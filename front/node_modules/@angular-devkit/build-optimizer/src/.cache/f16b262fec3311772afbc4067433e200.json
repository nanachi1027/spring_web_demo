{"remainingRequest":"/Users/nanachi/iceland/fullstack_project/front/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/nanachi/iceland/fullstack_project/front/node_modules/@clr/angular/esm5/clr-angular.js","dependencies":[{"path":"/Users/nanachi/iceland/fullstack_project/front/node_modules/@clr/angular/esm5/clr-angular.js","mtime":499162500000},{"path":"/Users/nanachi/iceland/fullstack_project/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nanachi/iceland/fullstack_project/front/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __values, __spread, __read, __extends } from 'tslib';\nimport { Directive, NgModule, EventEmitter, Input, Output, TemplateRef, ViewContainerRef, Injectable, Component, Optional, SkipSelf, ViewChild, ContentChildren, ElementRef, HostListener, QueryList, Inject, PLATFORM_ID, Renderer2, InjectionToken, Injector, NgZone, LOCALE_ID, ComponentFactoryResolver, HostBinding, Self, forwardRef, ChangeDetectorRef, ContentChild, IterableDiffers } from '@angular/core';\nimport { CommonModule, isPlatformBrowser, DOCUMENT, FormatWidth, FormStyle, getLocaleDateFormat, getLocaleDayNames, getLocaleFirstDayOfWeek, getLocaleMonthNames, TranslationWidth } from '@angular/common';\nimport { Subject } from 'rxjs/Subject';\nimport { first } from 'rxjs/operator/first';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { NgControl, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { map } from 'rxjs/operators/map';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nvar ClrIconCustomTag = /*@__PURE__*/ (function () {\n    function ClrIconCustomTag() {\n    }\n    return ClrIconCustomTag;\n}());\nvar CLR_ICON_DIRECTIVES = [ClrIconCustomTag];\nvar ClrIconModule = /*@__PURE__*/ (function () {\n    function ClrIconModule() {\n    }\n    return ClrIconModule;\n}());\nvar IconCustomTag = ClrIconCustomTag;\nvar ICON_DIRECTIVES = CLR_ICON_DIRECTIVES;\nvar Point = {\n    RIGHT_CENTER: 0,\n    RIGHT_TOP: 1,\n    RIGHT_BOTTOM: 2,\n    TOP_CENTER: 3,\n    TOP_RIGHT: 4,\n    TOP_LEFT: 5,\n    BOTTOM_CENTER: 6,\n    BOTTOM_RIGHT: 7,\n    BOTTOM_LEFT: 8,\n    LEFT_CENTER: 9,\n    LEFT_TOP: 10,\n    LEFT_BOTTOM: 11,\n};\nPoint[Point.RIGHT_CENTER] = \"RIGHT_CENTER\";\nPoint[Point.RIGHT_TOP] = \"RIGHT_TOP\";\nPoint[Point.RIGHT_BOTTOM] = \"RIGHT_BOTTOM\";\nPoint[Point.TOP_CENTER] = \"TOP_CENTER\";\nPoint[Point.TOP_RIGHT] = \"TOP_RIGHT\";\nPoint[Point.TOP_LEFT] = \"TOP_LEFT\";\nPoint[Point.BOTTOM_CENTER] = \"BOTTOM_CENTER\";\nPoint[Point.BOTTOM_RIGHT] = \"BOTTOM_RIGHT\";\nPoint[Point.BOTTOM_LEFT] = \"BOTTOM_LEFT\";\nPoint[Point.LEFT_CENTER] = \"LEFT_CENTER\";\nPoint[Point.LEFT_TOP] = \"LEFT_TOP\";\nPoint[Point.LEFT_BOTTOM] = \"LEFT_BOTTOM\";\nvar POSITION_RELATIVE = \"relative\";\nvar POSITION_ABSOLUTE = \"absolute\";\nvar POSITION_FIXED = \"fixed\";\nvar OVERFLOW_SCROLL = \"scroll\";\nvar OVERFLOW_AUTO = \"auto\";\nvar Popover = /*@__PURE__*/ (function () {\n    function Popover(element) {\n        this.element = element;\n        this.scrollableElements = [];\n        this.boundOnScrollListener = this.emitScrollEvent.bind(this);\n        element.style.position = POSITION_ABSOLUTE;\n        element.style.top = 0;\n        element.style.bottom = \"auto\";\n        element.style.left = 0;\n        element.style.right = \"auto\";\n    }\n    Popover.prototype.anchor = function (anchor, anchorAlign, popoverAlign, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.offsetX, offsetX = _c === void 0 ? 0 : _c, _d = _b.offsetY, offsetY = _d === void 0 ? 0 : _d, _e = _b.useAnchorParent, useAnchorParent = _e === void 0 ? false : _e;\n        this.addScrollEventListeners(anchor);\n        if (useAnchorParent) {\n            anchor = anchor.parentNode;\n        }\n        anchor.style.position = \"static\";\n        var anchorRect = anchor.getBoundingClientRect();\n        var popoverRect = this.element.getBoundingClientRect();\n        var leftDiff = anchorRect.left - popoverRect.left + offsetX;\n        var topDiff = anchorRect.top - popoverRect.top + offsetY;\n        switch (anchorAlign) {\n            case Point.LEFT_TOP:\n            case Point.TOP_LEFT:\n                break;\n            case Point.TOP_CENTER:\n                leftDiff += anchorRect.width / 2;\n                break;\n            case Point.TOP_RIGHT:\n                leftDiff += anchorRect.width;\n                break;\n            case Point.RIGHT_TOP:\n                leftDiff += anchorRect.width;\n                break;\n            case Point.LEFT_BOTTOM:\n                topDiff += anchorRect.height;\n                break;\n            case Point.BOTTOM_LEFT:\n                topDiff += anchorRect.height;\n                break;\n            case Point.BOTTOM_CENTER:\n                topDiff += anchorRect.height;\n                leftDiff += anchorRect.width / 2;\n                break;\n            case Point.BOTTOM_RIGHT:\n                topDiff += anchorRect.height;\n                leftDiff += anchorRect.width;\n                break;\n            case Point.RIGHT_BOTTOM:\n                topDiff += anchorRect.height;\n                leftDiff += anchorRect.width;\n                break;\n            case Point.LEFT_CENTER:\n                topDiff += anchorRect.height / 2;\n                break;\n            case Point.RIGHT_CENTER:\n                topDiff += anchorRect.height / 2;\n                leftDiff += anchorRect.width;\n                break;\n            default:\n        }\n        switch (popoverAlign) {\n            case Point.LEFT_TOP:\n            case Point.TOP_LEFT:\n                break;\n            case Point.TOP_CENTER:\n                leftDiff -= popoverRect.width / 2;\n                break;\n            case Point.TOP_RIGHT:\n                leftDiff -= popoverRect.width;\n                break;\n            case Point.RIGHT_TOP:\n                leftDiff -= popoverRect.width;\n                break;\n            case Point.LEFT_BOTTOM:\n                topDiff -= popoverRect.height;\n                break;\n            case Point.BOTTOM_LEFT:\n                topDiff -= popoverRect.height;\n                break;\n            case Point.BOTTOM_CENTER:\n                topDiff -= popoverRect.height;\n                leftDiff -= popoverRect.width / 2;\n                break;\n            case Point.BOTTOM_RIGHT:\n                topDiff -= popoverRect.height;\n                leftDiff -= popoverRect.width;\n                break;\n            case Point.RIGHT_BOTTOM:\n                topDiff -= popoverRect.height;\n                leftDiff -= popoverRect.width;\n                break;\n            case Point.LEFT_CENTER:\n                topDiff -= popoverRect.height / 2;\n                break;\n            case Point.RIGHT_CENTER:\n                topDiff -= popoverRect.height / 2;\n                leftDiff -= popoverRect.width;\n                break;\n            default:\n        }\n        var popoverComputedStyle = getComputedStyle(this.element);\n        var marginLeft = parseInt(popoverComputedStyle.marginLeft, 10);\n        var marginRight = parseInt(popoverComputedStyle.marginRight, 10);\n        var marginTop = parseInt(popoverComputedStyle.marginTop, 10);\n        var marginBottom = parseInt(popoverComputedStyle.marginBottom, 10);\n        switch (anchorAlign) {\n            case Point.LEFT_TOP:\n            case Point.TOP_LEFT:\n            case Point.TOP_RIGHT:\n            case Point.RIGHT_TOP:\n                if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {\n                    topDiff -= marginBottom;\n                    leftDiff -= marginRight;\n                }\n                if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {\n                    topDiff -= marginTop;\n                    leftDiff += marginLeft;\n                }\n                if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {\n                    topDiff += marginTop;\n                    leftDiff += marginLeft;\n                }\n                if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {\n                    topDiff += marginTop;\n                    leftDiff -= marginRight;\n                }\n                break;\n            case Point.LEFT_BOTTOM:\n            case Point.BOTTOM_LEFT:\n            case Point.BOTTOM_RIGHT:\n            case Point.RIGHT_BOTTOM:\n                if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {\n                    topDiff -= marginBottom;\n                    leftDiff += marginLeft;\n                }\n                if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {\n                    topDiff -= marginBottom;\n                    leftDiff -= marginRight;\n                }\n                if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {\n                    topDiff += marginTop;\n                    leftDiff += marginLeft;\n                }\n                if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {\n                    topDiff += marginTop;\n                    leftDiff -= marginRight;\n                }\n                break;\n            case Point.TOP_CENTER:\n                topDiff -= marginBottom;\n                leftDiff += marginLeft;\n                leftDiff -= marginRight;\n                break;\n            case Point.BOTTOM_CENTER:\n                topDiff += marginTop;\n                leftDiff += marginLeft;\n                leftDiff -= marginRight;\n                break;\n            case Point.LEFT_CENTER:\n                topDiff += marginTop;\n                topDiff -= marginBottom;\n                leftDiff -= marginRight;\n                break;\n            case Point.RIGHT_CENTER:\n                topDiff += marginTop;\n                topDiff -= marginBottom;\n                leftDiff += marginLeft;\n                break;\n            default:\n        }\n        this.element.style.transform = \"translateX(\" + leftDiff + \"px) translateY(\" + topDiff + \"px)\";\n        return this._scroll.asObservable();\n    };\n    Popover.prototype.release = function () {\n        this.element.style.transform = \"\";\n        this.removeScrollEventListeners();\n    };\n    Popover.prototype.isPositioned = function (container) {\n        var position = getComputedStyle(container).position;\n        return position === POSITION_RELATIVE || position === POSITION_ABSOLUTE || position === POSITION_FIXED;\n    };\n    Popover.prototype.emitScrollEvent = function () {\n        this._scroll.next();\n    };\n    Popover.prototype.addScrollEventListeners = function (e) {\n        this._scroll = new Subject();\n        var anchor = e;\n        var current = e;\n        while (current && current !== document) {\n            if (this.scrolls(current)) {\n                current.addEventListener(\"scroll\", this.boundOnScrollListener);\n                this.scrollableElements.push(current);\n            }\n            if (current !== anchor && this.isPositioned(current)) {\n                break;\n            }\n            current = current.parentNode;\n        }\n    };\n    Popover.prototype.removeScrollEventListeners = function () {\n        try {\n            for (var _a = __values(this.scrollableElements), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var elem = _b.value;\n                elem.removeEventListener(\"scroll\", this.boundOnScrollListener);\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return))\n                    _c.call(_a);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        this.scrollableElements.length = 0;\n        if (this._scroll) {\n            this._scroll.complete();\n            delete this._scroll;\n        }\n        var e_1, _c;\n    };\n    Popover.prototype.scrolls = function (container) {\n        var computedStyles = getComputedStyle(container);\n        return computedStyles.overflowX === OVERFLOW_SCROLL || computedStyles.overflowX === OVERFLOW_AUTO ||\n            computedStyles.overflowY === OVERFLOW_SCROLL || computedStyles.overflowY === OVERFLOW_AUTO;\n    };\n    return Popover;\n}());\nvar openCount = 0;\nvar waiting = [];\nvar PopoverDirectiveOld = /*@__PURE__*/ (function () {\n    function PopoverDirectiveOld(templateRef, viewContainer) {\n        this.templateRef = templateRef;\n        this.viewContainer = viewContainer;\n        this.popoverOptions = {};\n        this.clrPopoverOldChange = new EventEmitter(false);\n    }\n    Object.defineProperty(PopoverDirectiveOld.prototype, \"clrPopoverOld\", {\n        set: function (open) {\n            var _this = this;\n            if (open) {\n                if (this.popoverOptions.allowMultipleOpen) {\n                    this.createPopover();\n                }\n                else {\n                    if (openCount === 0) {\n                        this.createPopover();\n                    }\n                    else {\n                        waiting.push(function () {\n                            _this.createPopover();\n                        });\n                    }\n                }\n            }\n            else {\n                this.viewContainer.clear();\n                this.destroyPopover();\n                if (!this.popoverOptions.allowMultipleOpen) {\n                    if (waiting.length > 0) {\n                        var createPopoverFn = waiting.shift();\n                        createPopoverFn();\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PopoverDirectiveOld.prototype.createPopover = function () {\n        var _this = this;\n        var embeddedViewRef = (this.viewContainer.createEmbeddedView(this.templateRef));\n        embeddedViewRef.detectChanges();\n        var elementNodes = embeddedViewRef.rootNodes.filter(function (node) {\n            return node.nodeType === 1;\n        });\n        this._popoverInstance = new Popover(elementNodes[0]);\n        this._subscription =\n            this._popoverInstance.anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions)\n                .subscribe(function () {\n                _this.clrPopoverOldChange.emit(false);\n            });\n        openCount++;\n    };\n    PopoverDirectiveOld.prototype.destroyPopover = function () {\n        if (this._popoverInstance) {\n            this._subscription.unsubscribe();\n            this._popoverInstance.release();\n            delete this._popoverInstance;\n            openCount--;\n        }\n    };\n    PopoverDirectiveOld.prototype.ngOnDestroy = function () {\n        this.destroyPopover();\n    };\n    return PopoverDirectiveOld;\n}());\nvar POPOVER_DIRECTIVES = [PopoverDirectiveOld];\nvar ClrCommonPopoverModule = /*@__PURE__*/ (function () {\n    function ClrCommonPopoverModule() {\n    }\n    return ClrCommonPopoverModule;\n}());\nvar LoadingListener = /*@__PURE__*/ (function () {\n    function LoadingListener() {\n    }\n    return LoadingListener;\n}());\nvar ButtonInGroupService = /*@__PURE__*/ (function () {\n    function ButtonInGroupService() {\n        this._changes = new Subject();\n    }\n    Object.defineProperty(ButtonInGroupService.prototype, \"changes\", {\n        get: function () {\n            return this._changes.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ButtonInGroupService.prototype.updateButtonGroup = function (button) {\n        this._changes.next(button);\n    };\n    return ButtonInGroupService;\n}());\nvar ClrButton = /*@__PURE__*/ (function () {\n    function ClrButton(buttonInGroupService) {\n        this.buttonInGroupService = buttonInGroupService;\n        this._enableService = false;\n        this._inMenu = false;\n        this._classNames = \"btn\";\n        this._name = null;\n        this._type = null;\n        this._disabled = null;\n        this._click = new EventEmitter(false);\n    }\n    Object.defineProperty(ClrButton.prototype, \"inMenu\", {\n        get: function () {\n            return this._inMenu;\n        },\n        set: function (value) {\n            value = !!value;\n            if (this._inMenu !== value) {\n                this._inMenu = value;\n                if (this._enableService && this.buttonInGroupService) {\n                    this.buttonInGroupService.updateButtonGroup(this);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrButton.prototype, \"classNames\", {\n        get: function () {\n            return this._classNames;\n        },\n        set: function (value) {\n            if (typeof value === \"string\") {\n                var classNames = value.split(\" \");\n                if (classNames.indexOf(\"btn\") === -1) {\n                    classNames.push(\"btn\");\n                }\n                this._classNames = classNames.join(\" \");\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrButton.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        set: function (value) {\n            if (typeof value === \"string\") {\n                this._name = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrButton.prototype, \"type\", {\n        get: function () {\n            return this._type;\n        },\n        set: function (value) {\n            if (typeof value === \"string\") {\n                this._type = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrButton.prototype, \"disabled\", {\n        get: function () {\n            return this._disabled;\n        },\n        set: function (value) {\n            if (value !== null && value !== false) {\n                this._disabled = \"\";\n            }\n            else {\n                this._disabled = null;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrButton.prototype.startLoading = function () {\n        this.loading = true;\n    };\n    ClrButton.prototype.doneLoading = function () {\n        this.loading = false;\n    };\n    ClrButton.prototype.emitClick = function () {\n        this._click.emit(true);\n    };\n    ClrButton.prototype.ngAfterViewInit = function () {\n        this._enableService = true;\n    };\n    return ClrButton;\n}());\nvar CLR_MENU_POSITIONS = [\"bottom-left\", \"bottom-right\", \"top-left\", \"top-right\", \"left-bottom\", \"left-top\", \"right-bottom\", \"right-top\"];\nvar ClrButtonGroup = /*@__PURE__*/ (function () {\n    function ClrButtonGroup(buttonGroupNewService, elementRef) {\n        this.buttonGroupNewService = buttonGroupNewService;\n        this.elementRef = elementRef;\n        this.inlineButtons = [];\n        this.menuButtons = [];\n        this._openMenu = false;\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n        this._overflowMenuToggleClicked = false;\n    }\n    ClrButtonGroup.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.initializeButtons();\n        this.buttonGroupNewService.changes.subscribe(function (button) { return _this.rearrangeButton(button); });\n        this.buttons.changes.subscribe(function () {\n            _this.initializeButtons();\n        });\n    };\n    ClrButtonGroup.prototype.rearrangeButton = function (button) {\n        var fromView;\n        var toView;\n        if (button.inMenu) {\n            fromView = this.inlineButtons;\n            toView = this.menuButtons;\n        }\n        else {\n            fromView = this.menuButtons;\n            toView = this.inlineButtons;\n        }\n        var index = fromView.indexOf(button);\n        if (index > -1) {\n            fromView.splice(index, 1);\n            var moveIndex = this.getMoveIndex(button);\n            if (moveIndex <= toView.length) {\n                toView.splice(moveIndex, 0, button);\n            }\n        }\n    };\n    ClrButtonGroup.prototype.getMoveIndex = function (buttonToMove) {\n        var tempArr = this.buttons.filter(function (button) { return (button.inMenu === buttonToMove.inMenu); });\n        return tempArr.indexOf(buttonToMove);\n    };\n    ClrButtonGroup.prototype.initializeButtons = function () {\n        var tempInlineButtons = [];\n        var tempInMenuButtons = [];\n        this.buttons.forEach(function (button) {\n            if (button.inMenu) {\n                tempInMenuButtons.push(button);\n            }\n            else {\n                tempInlineButtons.push(button);\n            }\n        });\n        this.inlineButtons = tempInlineButtons;\n        this.menuButtons = tempInMenuButtons;\n    };\n    Object.defineProperty(ClrButtonGroup.prototype, \"menuPosition\", {\n        get: function () {\n            return this._menuPosition;\n        },\n        set: function (pos) {\n            if (pos && (CLR_MENU_POSITIONS.indexOf(pos) > -1)) {\n                this._menuPosition = pos;\n            }\n            else {\n                this._menuPosition = \"bottom-left\";\n            }\n            switch (this._menuPosition) {\n                case (\"top-right\"):\n                    this.anchorPoint = Point.TOP_RIGHT;\n                    this.popoverPoint = Point.RIGHT_BOTTOM;\n                    break;\n                case (\"top-left\"):\n                    this.anchorPoint = Point.TOP_LEFT;\n                    this.popoverPoint = Point.LEFT_BOTTOM;\n                    break;\n                case (\"bottom-right\"):\n                    this.anchorPoint = Point.BOTTOM_RIGHT;\n                    this.popoverPoint = Point.RIGHT_TOP;\n                    break;\n                case (\"bottom-left\"):\n                    this.anchorPoint = Point.BOTTOM_LEFT;\n                    this.popoverPoint = Point.LEFT_TOP;\n                    break;\n                case (\"right-top\"):\n                    this.anchorPoint = Point.RIGHT_TOP;\n                    this.popoverPoint = Point.LEFT_TOP;\n                    break;\n                case (\"right-bottom\"):\n                    this.anchorPoint = Point.RIGHT_BOTTOM;\n                    this.popoverPoint = Point.LEFT_BOTTOM;\n                    break;\n                case (\"left-top\"):\n                    this.anchorPoint = Point.LEFT_TOP;\n                    this.popoverPoint = Point.RIGHT_TOP;\n                    break;\n                case (\"left-bottom\"):\n                    this.anchorPoint = Point.LEFT_BOTTOM;\n                    this.popoverPoint = Point.RIGHT_BOTTOM;\n                    break;\n                default:\n                    this.anchorPoint = Point.BOTTOM_LEFT;\n                    this.popoverPoint = Point.LEFT_TOP;\n                    break;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrButtonGroup.prototype, \"openMenu\", {\n        get: function () {\n            return this._openMenu;\n        },\n        set: function (value) {\n            this._openMenu = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrButtonGroup.prototype.toggleMenu = function () {\n        this.openMenu = !this.openMenu;\n        this._overflowMenuToggleClicked = true;\n    };\n    ClrButtonGroup.prototype.onMouseClick = function (target) {\n        if (this.openMenu && !this._overflowMenuToggleClicked) {\n            this._overflowMenuToggleClicked = false;\n            var current = target;\n            var host = this.elementRef.nativeElement;\n            if (current.classList.contains(\"dropdown-menu\")) {\n                current = current.parentNode;\n                while (current) {\n                    if (current === document) {\n                        this.openMenu = false;\n                        return;\n                    }\n                    if (current === host) {\n                        return;\n                    }\n                    current = current.parentNode;\n                }\n            }\n            this.openMenu = false;\n        }\n        this._overflowMenuToggleClicked = false;\n    };\n    return ClrButtonGroup;\n}());\nvar CLR_BUTTON_GROUP_DIRECTIVES = [ClrButton, ClrButtonGroup];\nvar ClrButtonGroupModule = /*@__PURE__*/ (function () {\n    function ClrButtonGroupModule() {\n    }\n    return ClrButtonGroupModule;\n}());\nvar Button = ClrButton;\nvar ButtonGroup = ClrButtonGroup;\nvar BUTTON_GROUP_DIRECTIVES = CLR_BUTTON_GROUP_DIRECTIVES;\nvar ClrLoading = /*@__PURE__*/ (function () {\n    function ClrLoading(listener) {\n        this.listener = listener;\n        this._loading = false;\n    }\n    Object.defineProperty(ClrLoading.prototype, \"loading\", {\n        get: function () {\n            return this._loading;\n        },\n        set: function (value) {\n            value = !!value;\n            if (value === this._loading) {\n                return;\n            }\n            this._loading = value;\n            if (this.listener) {\n                if (value) {\n                    this.listener.startLoading();\n                }\n                else {\n                    this.listener.doneLoading();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrLoading.prototype.ngOnDestroy = function () {\n        this.loading = false;\n    };\n    return ClrLoading;\n}());\nvar CLR_LOADING_DIRECTIVES = [ClrLoading];\nvar ClrLoadingModule = /*@__PURE__*/ (function () {\n    function ClrLoadingModule() {\n    }\n    return ClrLoadingModule;\n}());\nvar Loading = ClrLoading;\nvar LOADING_DIRECTIVES = CLR_LOADING_DIRECTIVES;\nvar ClrLoadingButton = /*@__PURE__*/ (function () {\n    function ClrLoadingButton() {\n    }\n    ClrLoadingButton.prototype.startLoading = function () {\n        this.loading = true;\n    };\n    ClrLoadingButton.prototype.doneLoading = function () {\n        this.loading = false;\n    };\n    return ClrLoadingButton;\n}());\nvar CLR_LOADING_BUTTON_DIRECTIVES = [ClrLoadingButton];\nvar ClrLoadingButtonModule = /*@__PURE__*/ (function () {\n    function ClrLoadingButtonModule() {\n    }\n    return ClrLoadingButtonModule;\n}());\nvar LoadingButton = ClrLoadingButton;\nvar LOADING_BUTTON_DIRECTIVES = CLR_LOADING_BUTTON_DIRECTIVES;\nvar ClrButtonModule = /*@__PURE__*/ (function () {\n    function ClrButtonModule() {\n    }\n    return ClrButtonModule;\n}());\nvar ClrCodeHighlight = /*@__PURE__*/ (function () {\n    function ClrCodeHighlight(_el, renderer, platformId) {\n        this._el = _el;\n        this.renderer = renderer;\n        this.platformId = platformId;\n        this._highlight = \"\";\n    }\n    ClrCodeHighlight.prototype.ngAfterContentInit = function () {\n        this.redraw();\n    };\n    ClrCodeHighlight.prototype.redraw = function () {\n        if (this._el && this._el.nativeElement && isPlatformBrowser(this.platformId)) {\n            Prism.highlightElement(this._el.nativeElement);\n        }\n    };\n    Object.defineProperty(ClrCodeHighlight.prototype, \"highlight\", {\n        get: function () {\n            return this._highlight;\n        },\n        set: function (val) {\n            if (val && val.trim() !== \"\") {\n                this._highlight = val;\n                this.renderer.addClass(this._el.nativeElement, this._highlight);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrCodeHighlight;\n}());\nvar CLR_CODE_HIGHLIGHT_DIRECTIVES = [ClrCodeHighlight];\nvar ClrSyntaxHighlightModule = /*@__PURE__*/ (function () {\n    function ClrSyntaxHighlightModule() {\n    }\n    return ClrSyntaxHighlightModule;\n}());\nvar CodeHighlight = ClrCodeHighlight;\nvar CODE_HIGHLIGHT_DIRECTIVES = CLR_CODE_HIGHLIGHT_DIRECTIVES;\nvar ClrCodeModule = /*@__PURE__*/ (function () {\n    function ClrCodeModule() {\n    }\n    return ClrCodeModule;\n}());\nvar activeCounter = 0;\nvar IF_ACTIVE_ID = new InjectionToken(\"IF_ACTIVE_ID\");\nfunction tokenFactory() {\n    return ++activeCounter;\n}\nvar IF_ACTIVE_ID_PROVIDER = {\n    provide: IF_ACTIVE_ID,\n    useFactory: tokenFactory\n};\nvar IfActiveService = /*@__PURE__*/ (function () {\n    function IfActiveService() {\n        this._currentChange = new Subject();\n    }\n    Object.defineProperty(IfActiveService.prototype, \"currentChange\", {\n        get: function () {\n            return this._currentChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IfActiveService.prototype, \"current\", {\n        get: function () {\n            return this._current;\n        },\n        set: function (value) {\n            if (this._current !== value) {\n                this._current = value;\n                this._currentChange.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IfActiveService;\n}());\nvar IfActiveDirective = /*@__PURE__*/ (function () {\n    function IfActiveDirective(ifActiveService, id, template, container) {\n        var _this = this;\n        this.ifActiveService = ifActiveService;\n        this.id = id;\n        this.template = template;\n        this.container = container;\n        this.wasActive = false;\n        this.activeChange = new EventEmitter(false);\n        this.checkAndUpdateView(ifActiveService.current);\n        this.subscription = this.ifActiveService.currentChange.subscribe(function (newCurrentId) {\n            _this.checkAndUpdateView(newCurrentId);\n        });\n    }\n    IfActiveDirective.prototype.checkAndUpdateView = function (currentId) {\n        var isNowActive = currentId === this.id;\n        if (isNowActive !== this.wasActive) {\n            this.updateView(isNowActive);\n            this.activeChange.emit(isNowActive);\n            this.wasActive = isNowActive;\n        }\n    };\n    Object.defineProperty(IfActiveDirective.prototype, \"active\", {\n        get: function () {\n            return this.ifActiveService.current === this.id;\n        },\n        set: function (value) {\n            if (value) {\n                this.ifActiveService.current = this.id;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IfActiveDirective.prototype.updateView = function (value) {\n        if (value) {\n            this.container.createEmbeddedView(this.template);\n        }\n        else {\n            this.container.clear();\n        }\n    };\n    IfActiveDirective.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    return IfActiveDirective;\n}());\nvar IfOpenService = /*@__PURE__*/ (function () {\n    function IfOpenService() {\n        this._openChange = new Subject();\n    }\n    Object.defineProperty(IfOpenService.prototype, \"openChange\", {\n        get: function () {\n            return this._openChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IfOpenService.prototype, \"open\", {\n        get: function () {\n            return this._open;\n        },\n        set: function (value) {\n            value = !!value;\n            if (this._open !== value) {\n                this._open = value;\n                this._openChange.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IfOpenService.prototype.toggleWithEvent = function (event) {\n        this.originalEvent = event;\n        this.open = !this.open;\n        delete this.originalEvent;\n    };\n    return IfOpenService;\n}());\nvar IfOpenDirective = /*@__PURE__*/ (function () {\n    function IfOpenDirective(ifOpenService, template, container) {\n        var _this = this;\n        this.ifOpenService = ifOpenService;\n        this.template = template;\n        this.container = container;\n        this.openChange = new EventEmitter(false);\n        this.subscription = this.ifOpenService.openChange.subscribe(function (change) {\n            _this.updateView(change);\n            _this.openChange.emit(change);\n        });\n    }\n    Object.defineProperty(IfOpenDirective.prototype, \"open\", {\n        get: function () {\n            return this.ifOpenService.open;\n        },\n        set: function (value) {\n            this.ifOpenService.open = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IfOpenDirective.prototype.updateView = function (value) {\n        if (value) {\n            this.container.createEmbeddedView(this.template);\n        }\n        else {\n            this.container.clear();\n        }\n    };\n    IfOpenDirective.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    return IfOpenDirective;\n}());\nvar CONDITIONAL_DIRECTIVES = [IfActiveDirective, IfOpenDirective];\nvar ClrConditionalModule = /*@__PURE__*/ (function () {\n    function ClrConditionalModule() {\n    }\n    return ClrConditionalModule;\n}());\nvar FocusTrapTracker = /*@__PURE__*/ (function () {\n    function FocusTrapTracker() {\n        this._previousFocusTraps = [];\n    }\n    Object.defineProperty(FocusTrapTracker.prototype, \"current\", {\n        get: function () {\n            return this._current;\n        },\n        set: function (value) {\n            this._previousFocusTraps.push(this._current);\n            this._current = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FocusTrapTracker.prototype, \"nbFocusTrappers\", {\n        get: function () {\n            return this._previousFocusTraps.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FocusTrapTracker.prototype.activatePreviousTrapper = function () {\n        this._current = this._previousFocusTraps.pop();\n    };\n    return FocusTrapTracker;\n}());\nfunction FocusTrapTrackerProvider(existing) {\n    return existing || new FocusTrapTracker();\n}\nvar FocusTrapDirective = /*@__PURE__*/ (function () {\n    function FocusTrapDirective(el, injector, focusTrapsTracker, renderer, platformId) {\n        this.el = el;\n        this.injector = injector;\n        this.focusTrapsTracker = focusTrapsTracker;\n        this.renderer = renderer;\n        this.platformId = platformId;\n        this.document = this.injector.get(DOCUMENT);\n        this.focusTrapsTracker.current = this;\n        this.renderer.setAttribute(this.el.nativeElement, \"tabindex\", \"0\");\n    }\n    FocusTrapDirective.prototype.onFocusIn = function (event) {\n        var nativeElement = this.el.nativeElement;\n        if (this.focusTrapsTracker.current === this && event.target && !nativeElement.contains(event.target)) {\n            nativeElement.focus();\n        }\n    };\n    FocusTrapDirective.prototype.createFocusableOffScreenEl = function () {\n        var offScreenSpan = this.document.createElement(\"span\");\n        this.renderer.setAttribute(offScreenSpan, \"tabindex\", \"0\");\n        this.renderer.addClass(offScreenSpan, \"offscreen-focus-rebounder\");\n        return offScreenSpan;\n    };\n    FocusTrapDirective.prototype.addReboundEls = function () {\n        if (isPlatformBrowser(this.platformId) && this.focusTrapsTracker.nbFocusTrappers === 1) {\n            this.topReboundEl = this.createFocusableOffScreenEl();\n            this.bottomReboundEl = this.createFocusableOffScreenEl();\n            this.renderer.insertBefore(this.document.body, this.topReboundEl, this.document.body.firstChild);\n            this.renderer.appendChild(this.document.body, this.bottomReboundEl);\n        }\n    };\n    FocusTrapDirective.prototype.removeReboundEls = function () {\n        if (isPlatformBrowser(this.platformId) && this.focusTrapsTracker.nbFocusTrappers === 1 && this.topReboundEl &&\n            this.bottomReboundEl) {\n            this.renderer.removeChild(this.document.body, this.topReboundEl);\n            this.renderer.removeChild(this.document.body, this.bottomReboundEl);\n            delete this.topReboundEl;\n            delete this.bottomReboundEl;\n        }\n    };\n    FocusTrapDirective.prototype.setPreviousFocus = function () {\n        if (this.previousActiveElement && this.previousActiveElement.focus) {\n            this.previousActiveElement.focus();\n        }\n    };\n    FocusTrapDirective.prototype.ngAfterViewInit = function () {\n        if (isPlatformBrowser(this.platformId)) {\n            this.previousActiveElement = (this.document.activeElement);\n        }\n        this.addReboundEls();\n    };\n    FocusTrapDirective.prototype.ngOnDestroy = function () {\n        this.removeReboundEls();\n        this.setPreviousFocus();\n        this.focusTrapsTracker.activatePreviousTrapper();\n    };\n    return FocusTrapDirective;\n}());\nvar FOCUS_TRAP_DIRECTIVES = [FocusTrapDirective];\nvar ɵ0 = FocusTrapTrackerProvider;\nvar ClrFocusTrapModule = /*@__PURE__*/ (function () {\n    function ClrFocusTrapModule() {\n    }\n    return ClrFocusTrapModule;\n}());\nvar EmptyAnchor = /*@__PURE__*/ (function () {\n    function EmptyAnchor() {\n    }\n    return EmptyAnchor;\n}());\nvar ClrHostWrappingModule = /*@__PURE__*/ (function () {\n    function ClrHostWrappingModule() {\n    }\n    return ClrHostWrappingModule;\n}());\nvar UP_ARROW = 38;\nvar DOWN_ARROW = 40;\nvar RIGHT_ARROW = 39;\nvar LEFT_ARROW = 37;\nvar ESC = 27;\nvar DEFAULT_LOCALE_FORMAT = \"dd/MM/y\";\nvar LITTLE_ENDIAN_REGEX = /d+.+m+.+y+/i;\nvar MIDDLE_ENDIAN_REGEX = /m+.+d+.+y+/i;\nvar DELIMITER_REGEX = /d+|m+|y+/i;\nvar USER_INPUT_REGEX = /\\d+/g;\nvar MOBILE_USERAGENT_REGEX = /Mobi/i;\nvar RTL_REGEX = /\\u200f/g;\nvar YEAR = \"YYYY\";\nvar MONTH = \"MM\";\nvar DATE = \"DD\";\nvar LITTLE_ENDIAN = {\n    name: \"LITTLE_ENDIAN\",\n    format: [DATE, MONTH, YEAR]\n};\nvar MIDDLE_ENDIAN = {\n    name: \"MIDDLE_ENDIAN\",\n    format: [MONTH, DATE, YEAR]\n};\nvar BIG_ENDIAN = {\n    name: \"BIG_ENDIAN\",\n    format: [YEAR, MONTH, DATE]\n};\nvar NO_OF_DAYS_IN_A_WEEK = 7;\nvar NO_OF_ROWS_IN_CALENDAR_VIEW = 6;\nvar TOTAL_DAYS_IN_DAYS_VIEW = NO_OF_DAYS_IN_A_WEEK * NO_OF_ROWS_IN_CALENDAR_VIEW;\nfunction getNumberOfDaysInTheMonth(year, month) {\n    return (new Date(year, month + 1, 0)).getDate();\n}\nfunction getDay(year, month, date) {\n    return (new Date(year, month, date)).getDay();\n}\nfunction parseToFourDigitYear(year) {\n    if (year > 9999 || (year > 100 && year < 999) || year < 10) {\n        return -1;\n    }\n    if (year > 999) {\n        return year;\n    }\n    var currYear = (new Date()).getFullYear();\n    var century = Math.floor(currYear / 100) * 100;\n    var result = year + century;\n    if (result > currYear + 20) {\n        result = result - 100;\n    }\n    return result;\n}\nvar DayViewModel = /*@__PURE__*/ (function () {\n    function DayViewModel(dayModel, isTodaysDate, isDisabled, isSelected, isFocusable) {\n        if (isTodaysDate === void 0) {\n            isTodaysDate = false;\n        }\n        if (isDisabled === void 0) {\n            isDisabled = false;\n        }\n        if (isSelected === void 0) {\n            isSelected = false;\n        }\n        if (isFocusable === void 0) {\n            isFocusable = false;\n        }\n        this.dayModel = dayModel;\n        this.isTodaysDate = isTodaysDate;\n        this.isDisabled = isDisabled;\n        this.isSelected = isSelected;\n        this.isFocusable = isFocusable;\n    }\n    Object.defineProperty(DayViewModel.prototype, \"tabIndex\", {\n        get: function () {\n            return this.isFocusable ? 0 : -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DayViewModel;\n}());\nvar CalendarModel = /*@__PURE__*/ (function () {\n    function CalendarModel(year, month) {\n        this.year = year;\n        this.month = month;\n        this.initializeDaysInCalendar();\n    }\n    CalendarModel.prototype.initializeDaysInCalendar = function () {\n        var _this = this;\n        var noOfDaysInCalendar = getNumberOfDaysInTheMonth(this.year, this.month);\n        this.days = Array(noOfDaysInCalendar).fill(null).map(function (date, index) {\n            return new DayModel(_this.year, _this.month, index + 1);\n        });\n    };\n    CalendarModel.prototype.isEqual = function (calendar) {\n        if (calendar) {\n            return this.year === calendar.year && this.month === calendar.month;\n        }\n        return false;\n    };\n    CalendarModel.prototype.isDayInCalendar = function (day) {\n        if (day) {\n            return (this.year === day.year && this.month === day.month);\n        }\n        return false;\n    };\n    CalendarModel.prototype.previousMonth = function () {\n        if (this.month === 0) {\n            return new CalendarModel(this.year - 1, 11);\n        }\n        else {\n            return new CalendarModel(this.year, this.month - 1);\n        }\n    };\n    CalendarModel.prototype.nextMonth = function () {\n        if (this.month === 11) {\n            return new CalendarModel(this.year + 1, 0);\n        }\n        else {\n            return new CalendarModel(this.year, this.month + 1);\n        }\n    };\n    return CalendarModel;\n}());\nvar DayModel = /*@__PURE__*/ (function () {\n    function DayModel(year, month, date) {\n        this.year = year;\n        this.month = month;\n        this.date = date;\n    }\n    Object.defineProperty(DayModel.prototype, \"calendar\", {\n        get: function () {\n            return new CalendarModel(this.year, this.month);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DayModel.prototype.isEqual = function (day) {\n        if (day) {\n            return ((this.year === day.year) && (this.month === day.month) && (this.date === day.date));\n        }\n        return false;\n    };\n    DayModel.prototype.toDate = function () {\n        return new Date(this.year, this.month, this.date);\n    };\n    DayModel.prototype.incrementBy = function (value) {\n        var date = new Date(this.year, this.month, this.date + value);\n        return new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n    };\n    DayModel.prototype.clone = function () {\n        return new DayModel(this.year, this.month, this.date);\n    };\n    return DayModel;\n}());\nvar CalendarViewModel = /*@__PURE__*/ (function () {\n    function CalendarViewModel(calendar, selectedDay, focusableDay, today, firstDayOfWeek) {\n        this.calendar = calendar;\n        this.selectedDay = selectedDay;\n        this.focusableDay = focusableDay;\n        this.today = today;\n        this.firstDayOfWeek = firstDayOfWeek;\n        this.currMonthDayViews = [];\n        this.initializeCalendarView();\n    }\n    Object.defineProperty(CalendarViewModel.prototype, \"calendarView\", {\n        get: function () {\n            return this._calendarView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CalendarViewModel.prototype.initializeCalendarView = function () {\n        var prevMonthCalendar = this.calendar.previousMonth();\n        var nextMonthCalendar = this.calendar.nextMonth();\n        var daysFromPrevMonthInCalView = this.numDaysFromPrevMonthInCalView(this.calendar.year, this.calendar.month);\n        var daysFromNextMonthInCalView = TOTAL_DAYS_IN_DAYS_VIEW - (this.calendar.days.length + daysFromPrevMonthInCalView);\n        var prevMonthDayViews = [];\n        var nextMonthDayViews = [];\n        if (daysFromPrevMonthInCalView > 0) {\n            prevMonthDayViews =\n                this.generateDayViewModels(prevMonthCalendar.days.slice(-1 * daysFromPrevMonthInCalView), true, false);\n        }\n        this.currMonthDayViews = this.generateDayViewModels(this.calendar.days, false, true);\n        if (daysFromNextMonthInCalView > 0) {\n            nextMonthDayViews =\n                this.generateDayViewModels(nextMonthCalendar.days.slice(0, daysFromNextMonthInCalView), true, false);\n        }\n        this._calendarView = this.generateCalendarView(prevMonthDayViews, this.currMonthDayViews, nextMonthDayViews);\n        this.initializeSelectedDay();\n        this.initializeFocusableDay();\n    };\n    CalendarViewModel.prototype.generateDayViewModels = function (days, isDisabled, isCurrentCalendar) {\n        var dayViews = days.map(function (day) {\n            return new DayViewModel(day, false, isDisabled, false, false);\n        });\n        if (isCurrentCalendar && this.calendar.isDayInCalendar(this.today)) {\n            dayViews[this.today.date - 1].isTodaysDate = true;\n        }\n        return dayViews;\n    };\n    CalendarViewModel.prototype.numDaysFromPrevMonthInCalView = function (currentYear, currentMonth) {\n        var firstDayOfCurrMonth = getDay(currentYear, currentMonth, 1);\n        if (firstDayOfCurrMonth >= this.firstDayOfWeek) {\n            return firstDayOfCurrMonth - this.firstDayOfWeek;\n        }\n        else {\n            return NO_OF_DAYS_IN_A_WEEK + firstDayOfCurrMonth - this.firstDayOfWeek;\n        }\n    };\n    CalendarViewModel.prototype.isDayInCalendarView = function (day) {\n        if (!this.calendar.isDayInCalendar(day)) {\n            return false;\n        }\n        return true;\n    };\n    CalendarViewModel.prototype.generateCalendarView = function (prev, curr, next) {\n        var combinationArr = __spread(prev, curr, next);\n        var calendarView = [];\n        for (var i = 0; i < NO_OF_ROWS_IN_CALENDAR_VIEW; i++) {\n            calendarView[i] = combinationArr.slice(i * NO_OF_DAYS_IN_A_WEEK, (i + 1) * NO_OF_DAYS_IN_A_WEEK);\n        }\n        return calendarView;\n    };\n    CalendarViewModel.prototype.initializeSelectedDay = function () {\n        if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {\n            this.currMonthDayViews[this.selectedDay.date - 1].isSelected = true;\n        }\n    };\n    CalendarViewModel.prototype.initializeFocusableDay = function () {\n        if (this.focusableDay && this.isDayInCalendarView(this.focusableDay)) {\n            this.setFocusableFlag(this.focusableDay, true);\n        }\n        else if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {\n            this.setFocusableFlag(this.selectedDay, true);\n            this.focusableDay = this.selectedDay.clone();\n        }\n        else if (this.isDayInCalendarView(this.today)) {\n            this.setFocusableFlag(this.today, true);\n            this.focusableDay = this.today.clone();\n        }\n        else {\n            this.focusableDay = new DayModel(this.calendar.year, this.calendar.month, 15);\n            this.setFocusableFlag(this.focusableDay, true);\n        }\n    };\n    CalendarViewModel.prototype.setFocusableFlag = function (day, flag) {\n        if (day) {\n            this.currMonthDayViews[day.date - 1].isFocusable = flag;\n        }\n    };\n    CalendarViewModel.prototype.updateFocusableDay = function (day) {\n        this.setFocusableFlag(this.focusableDay, false);\n        this.setFocusableFlag(day, true);\n        this.focusableDay = day;\n    };\n    return CalendarViewModel;\n}());\nvar DateNavigationService = /*@__PURE__*/ (function () {\n    function DateNavigationService() {\n        this._todaysFullDate = new Date();\n        this._selectedDayChange = new Subject();\n        this._displayedCalendarChange = new Subject();\n        this._focusOnCalendarChange = new Subject();\n        this._focusedDayChange = new Subject();\n    }\n    Object.defineProperty(DateNavigationService.prototype, \"displayedCalendar\", {\n        get: function () {\n            return this._displayedCalendar;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateNavigationService.prototype.setDisplayedCalendar = function (value) {\n        if (!this._displayedCalendar.isEqual(value)) {\n            this._displayedCalendar = value;\n            this._displayedCalendarChange.next();\n        }\n    };\n    DateNavigationService.prototype.initializeTodaysDate = function () {\n        this._todaysFullDate = new Date();\n        this._today = new DayModel(this._todaysFullDate.getFullYear(), this._todaysFullDate.getMonth(), this._todaysFullDate.getDate());\n    };\n    Object.defineProperty(DateNavigationService.prototype, \"today\", {\n        get: function () {\n            return this._today;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateNavigationService.prototype, \"selectedDayChange\", {\n        get: function () {\n            return this._selectedDayChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateNavigationService.prototype.notifySelectedDayChanged = function (dayModel) {\n        if (dayModel.isEqual(this.selectedDay)) {\n            return;\n        }\n        this.selectedDay = dayModel;\n        this._selectedDayChange.next(dayModel);\n    };\n    DateNavigationService.prototype.initializeCalendar = function () {\n        this.focusedDay = null;\n        this.initializeTodaysDate();\n        if (this.selectedDay) {\n            this._displayedCalendar = new CalendarModel(this.selectedDay.year, this.selectedDay.month);\n        }\n        else {\n            this._displayedCalendar = new CalendarModel(this.today.year, this.today.month);\n        }\n    };\n    DateNavigationService.prototype.changeMonth = function (month) {\n        this.setDisplayedCalendar(new CalendarModel(this._displayedCalendar.year, month));\n    };\n    DateNavigationService.prototype.changeYear = function (year) {\n        this.setDisplayedCalendar(new CalendarModel(year, this._displayedCalendar.month));\n    };\n    DateNavigationService.prototype.moveToNextMonth = function () {\n        this.setDisplayedCalendar(this._displayedCalendar.nextMonth());\n    };\n    DateNavigationService.prototype.moveToPreviousMonth = function () {\n        this.setDisplayedCalendar(this._displayedCalendar.previousMonth());\n    };\n    DateNavigationService.prototype.moveToCurrentMonth = function () {\n        if (!this.displayedCalendar.isDayInCalendar(this.today)) {\n            this.setDisplayedCalendar(new CalendarModel(this.today.year, this.today.month));\n        }\n        this._focusOnCalendarChange.next();\n    };\n    DateNavigationService.prototype.incrementFocusDay = function (value) {\n        this.focusedDay = this.focusedDay.incrementBy(value);\n        if (this._displayedCalendar.isDayInCalendar(this.focusedDay)) {\n            this._focusedDayChange.next(this.focusedDay);\n        }\n        else {\n            this.setDisplayedCalendar(this.focusedDay.calendar);\n        }\n        this._focusOnCalendarChange.next();\n    };\n    Object.defineProperty(DateNavigationService.prototype, \"displayedCalendarChange\", {\n        get: function () {\n            return this._displayedCalendarChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateNavigationService.prototype, \"focusOnCalendarChange\", {\n        get: function () {\n            return this._focusOnCalendarChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateNavigationService.prototype, \"focusedDayChange\", {\n        get: function () {\n            return this._focusedDayChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DateNavigationService;\n}());\nvar DatepickerFocusService = /*@__PURE__*/ (function () {\n    function DatepickerFocusService(_ngZone, platformId) {\n        this._ngZone = _ngZone;\n        this.platformId = platformId;\n    }\n    DatepickerFocusService.prototype.focusCell = function (elRef) {\n        var _this = this;\n        this._ngZone.runOutsideAngular(function () {\n            first.call(_this._ngZone.onStable.asObservable()).subscribe(function () {\n                if (isPlatformBrowser(_this.platformId)) {\n                    var focusEl = elRef.nativeElement.querySelector(\"[tabindex=\\\"0\\\"]\");\n                    if (focusEl) {\n                        focusEl.focus();\n                    }\n                }\n            });\n        });\n    };\n    return DatepickerFocusService;\n}());\nvar LocaleHelperService = /*@__PURE__*/ (function () {\n    function LocaleHelperService(locale) {\n        this.locale = locale;\n        this._firstDayOfWeek = 0;\n        this.initializeLocaleData();\n    }\n    Object.defineProperty(LocaleHelperService.prototype, \"firstDayOfWeek\", {\n        get: function () {\n            return this._firstDayOfWeek;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LocaleHelperService.prototype, \"localeDaysNarrow\", {\n        get: function () {\n            return this._localeDaysNarrow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LocaleHelperService.prototype, \"localeMonthsAbbreviated\", {\n        get: function () {\n            return this._localeMonthsAbbreviated;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LocaleHelperService.prototype, \"localeMonthsWide\", {\n        get: function () {\n            return this._localeMonthsWide;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LocaleHelperService.prototype, \"localeDateFormat\", {\n        get: function () {\n            return this._localeDateFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LocaleHelperService.prototype.initializeLocaleData = function () {\n        this.initializeFirstDayOfWeek();\n        this.initializeLocaleDateFormat();\n        this.initializeLocaleMonthsAbbreviated();\n        this.initializeLocaleMonthsWide();\n        this.initializeLocaleDaysNarrow();\n    };\n    LocaleHelperService.prototype.initializeLocaleDaysNarrow = function () {\n        var tempArr = getLocaleDayNames(this.locale, FormStyle.Format, TranslationWidth.Narrow).slice();\n        var firstDayOfWeek = this.firstDayOfWeek;\n        if (firstDayOfWeek > 0) {\n            var prevDays = tempArr.splice(0, firstDayOfWeek);\n            tempArr.push.apply(tempArr, __spread(prevDays));\n        }\n        this._localeDaysNarrow = tempArr;\n    };\n    LocaleHelperService.prototype.initializeLocaleMonthsAbbreviated = function () {\n        this._localeMonthsAbbreviated =\n            getLocaleMonthNames(this.locale, FormStyle.Format, TranslationWidth.Abbreviated).slice();\n    };\n    LocaleHelperService.prototype.initializeLocaleMonthsWide = function () {\n        this._localeMonthsWide = getLocaleMonthNames(this.locale, FormStyle.Format, TranslationWidth.Wide).slice();\n    };\n    LocaleHelperService.prototype.initializeFirstDayOfWeek = function () {\n        this._firstDayOfWeek = getLocaleFirstDayOfWeek(this.locale);\n    };\n    LocaleHelperService.prototype.initializeLocaleDateFormat = function () {\n        this._localeDateFormat = getLocaleDateFormat(this.locale, FormatWidth.Short);\n    };\n    return LocaleHelperService;\n}());\nvar ClrCalendar = /*@__PURE__*/ (function () {\n    function ClrCalendar(_localeHelperService, _dateNavigationService, _datepickerFocusService, _elRef) {\n        this._localeHelperService = _localeHelperService;\n        this._dateNavigationService = _dateNavigationService;\n        this._datepickerFocusService = _datepickerFocusService;\n        this._elRef = _elRef;\n        this._subs = [];\n        this.generateCalendarView();\n        this.initializeSubscriptions();\n    }\n    Object.defineProperty(ClrCalendar.prototype, \"localeDaysNarrow\", {\n        get: function () {\n            return this._localeHelperService.localeDaysNarrow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrCalendar.prototype, \"calendar\", {\n        get: function () {\n            return this._dateNavigationService.displayedCalendar;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrCalendar.prototype, \"selectedDay\", {\n        get: function () {\n            return this._dateNavigationService.selectedDay;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrCalendar.prototype, \"focusedDay\", {\n        get: function () {\n            return this._dateNavigationService.focusedDay;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrCalendar.prototype, \"today\", {\n        get: function () {\n            return this._dateNavigationService.today;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrCalendar.prototype.initializeSubscriptions = function () {\n        var _this = this;\n        this._subs.push(this._dateNavigationService.displayedCalendarChange.subscribe(function () {\n            _this.generateCalendarView();\n        }));\n        this._subs.push(this._dateNavigationService.focusedDayChange.subscribe(function (focusedDay) {\n            _this.calendarViewModel.updateFocusableDay(focusedDay);\n        }));\n        this._subs.push(this._dateNavigationService.focusOnCalendarChange.subscribe(function () {\n            _this._datepickerFocusService.focusCell(_this._elRef);\n        }));\n    };\n    ClrCalendar.prototype.generateCalendarView = function () {\n        this.calendarViewModel = new CalendarViewModel(this.calendar, this.selectedDay, this.focusedDay, this.today, this._localeHelperService.firstDayOfWeek);\n    };\n    ClrCalendar.prototype.onKeyDown = function (event) {\n        if (event && this.focusedDay) {\n            switch (event.keyCode) {\n                case UP_ARROW:\n                    event.preventDefault();\n                    this._dateNavigationService.incrementFocusDay(-1 * NO_OF_DAYS_IN_A_WEEK);\n                    break;\n                case DOWN_ARROW:\n                    event.preventDefault();\n                    this._dateNavigationService.incrementFocusDay(NO_OF_DAYS_IN_A_WEEK);\n                    break;\n                case LEFT_ARROW:\n                    event.preventDefault();\n                    this._dateNavigationService.incrementFocusDay(-1);\n                    break;\n                case RIGHT_ARROW:\n                    event.preventDefault();\n                    this._dateNavigationService.incrementFocusDay(1);\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n    ClrCalendar.prototype.ngAfterViewInit = function () {\n        this._datepickerFocusService.focusCell(this._elRef);\n    };\n    ClrCalendar.prototype.ngOnDestroy = function () {\n        this._subs.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    return ClrCalendar;\n}());\nvar counter = 0;\nvar FormControlService = /*@__PURE__*/ (function () {\n    function FormControlService() {\n        this._id = \"clr-form-control-\" + (++counter);\n        this._idChange = new BehaviorSubject(this._id);\n    }\n    Object.defineProperty(FormControlService.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        set: function (value) {\n            this._id = value;\n            this._idChange.next(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlService.prototype, \"idChange\", {\n        get: function () {\n            return this._idChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FormControlService;\n}());\nvar DateFormControlService = /*@__PURE__*/ (function () {\n    function DateFormControlService() {\n        this._touchedChange = new Subject();\n        this._dirtyChange = new Subject();\n    }\n    Object.defineProperty(DateFormControlService.prototype, \"touchedChange\", {\n        get: function () {\n            return this._touchedChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateFormControlService.prototype, \"dirtyChange\", {\n        get: function () {\n            return this._dirtyChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateFormControlService.prototype.markAsTouched = function () {\n        this._touchedChange.next();\n    };\n    DateFormControlService.prototype.markAsDirty = function () {\n        this._dirtyChange.next();\n    };\n    return DateFormControlService;\n}());\nvar DateIOService = /*@__PURE__*/ (function () {\n    function DateIOService(_localeHelperService) {\n        this._localeHelperService = _localeHelperService;\n        this.cldrLocaleDateFormat = DEFAULT_LOCALE_FORMAT;\n        this.localeDisplayFormat = LITTLE_ENDIAN;\n        this.delimiters = [\"/\", \"/\"];\n        this.cldrLocaleDateFormat = this._localeHelperService.localeDateFormat;\n        this.initializeLocaleDisplayFormat();\n    }\n    DateIOService.prototype.initializeLocaleDisplayFormat = function () {\n        var format = this.cldrLocaleDateFormat.toLocaleLowerCase();\n        if (LITTLE_ENDIAN_REGEX.test(format)) {\n            this.localeDisplayFormat = LITTLE_ENDIAN;\n        }\n        else if (MIDDLE_ENDIAN_REGEX.test(format)) {\n            this.localeDisplayFormat = MIDDLE_ENDIAN;\n        }\n        else {\n            this.localeDisplayFormat = BIG_ENDIAN;\n        }\n        this.extractDelimiters();\n    };\n    DateIOService.prototype.extractDelimiters = function () {\n        if (this.cldrLocaleDateFormat) {\n            var localeFormat = this.cldrLocaleDateFormat.replace(RTL_REGEX, \"\");\n            var delimiters = localeFormat.split(DELIMITER_REGEX);\n            if (delimiters && delimiters.length === 4) {\n                this.delimiters = [delimiters[1], delimiters[2]];\n            }\n            else {\n                console.error(\"Unexpected date format received. Delimiters extracted: \", delimiters);\n            }\n        }\n    };\n    DateIOService.prototype.toLocaleDisplayFormatString = function (date) {\n        if (date) {\n            if (isNaN(date.getTime())) {\n                return \"\";\n            }\n            var dateNo = date.getDate();\n            var monthNo = date.getMonth() + 1;\n            var dateStr = dateNo > 9 ? dateNo.toString() : \"0\" + dateNo;\n            var monthStr = monthNo > 9 ? monthNo.toString() : \"0\" + monthNo;\n            if (this.localeDisplayFormat === LITTLE_ENDIAN) {\n                return dateStr + this.delimiters[0] + monthStr + this.delimiters[1] + date.getFullYear();\n            }\n            else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {\n                return monthStr + this.delimiters[0] + dateStr + this.delimiters[1] + date.getFullYear();\n            }\n            else {\n                return date.getFullYear() + this.delimiters[0] + monthStr + this.delimiters[1] + dateStr;\n            }\n        }\n        return \"\";\n    };\n    Object.defineProperty(DateIOService.prototype, \"placeholderText\", {\n        get: function () {\n            var format = this.localeDisplayFormat.format;\n            return format[0] + this.delimiters[0] + format[1] + this.delimiters[1] + format[2];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateIOService.prototype.isValidMonth = function (month) {\n        return (month > -1 && month < 12);\n    };\n    DateIOService.prototype.isValidDate = function (year, month, date) {\n        return (date > 0 && date <= getNumberOfDaysInTheMonth(year, month));\n    };\n    DateIOService.prototype.validateAndGetDate = function (year, month, date) {\n        var y = +year;\n        var m = +month - 1;\n        var d = +date;\n        if (!this.isValidMonth(m) || !this.isValidDate(y, m, d)) {\n            return null;\n        }\n        var result = parseToFourDigitYear(y);\n        return result !== -1 ? (new Date(result, m, d)) : null;\n    };\n    DateIOService.prototype.isValidInput = function (date) {\n        if (!date) {\n            return null;\n        }\n        var dateParts = date.match(USER_INPUT_REGEX);\n        if (!dateParts || dateParts.length !== 3) {\n            return null;\n        }\n        var _a = __read(dateParts, 3), firstPart = _a[0], secondPart = _a[1], thirdPart = _a[2];\n        if (this.localeDisplayFormat === LITTLE_ENDIAN) {\n            return this.validateAndGetDate(thirdPart, secondPart, firstPart);\n        }\n        else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {\n            return this.validateAndGetDate(thirdPart, firstPart, secondPart);\n        }\n        else {\n            return this.validateAndGetDate(firstPart, secondPart, thirdPart);\n        }\n    };\n    return DateIOService;\n}());\nvar DATEPICKER_ENABLE_BREAKPOINT = 768;\nvar DatepickerEnabledService = /*@__PURE__*/ (function () {\n    function DatepickerEnabledService(_document) {\n        this._document = _document;\n        this._isUserAgentMobile = false;\n        if (this._document) {\n            this._isUserAgentMobile = MOBILE_USERAGENT_REGEX.test(_document.defaultView.navigator.userAgent);\n            this._innerWidth = _document.defaultView.innerWidth;\n        }\n    }\n    Object.defineProperty(DatepickerEnabledService.prototype, \"isEnabled\", {\n        get: function () {\n            if (this._document) {\n                if (this._innerWidth < DATEPICKER_ENABLE_BREAKPOINT && this._isUserAgentMobile) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DatepickerEnabledService;\n}());\nvar ClrDateContainer = /*@__PURE__*/ (function () {\n    function ClrDateContainer(_ifOpenService, _dateNavigationService, _datepickerEnabledService, dateFormControlService) {\n        var _this = this;\n        this._ifOpenService = _ifOpenService;\n        this._dateNavigationService = _dateNavigationService;\n        this._datepickerEnabledService = _datepickerEnabledService;\n        this.dateFormControlService = dateFormControlService;\n        this._dynamic = false;\n        this._sub = this._ifOpenService.openChange.subscribe(function (open) {\n            if (open) {\n                _this.initializeCalendar();\n            }\n        });\n    }\n    Object.defineProperty(ClrDateContainer.prototype, \"isEnabled\", {\n        get: function () {\n            return this._datepickerEnabledService.isEnabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDateContainer.prototype.initializeCalendar = function () {\n        this._dateNavigationService.initializeCalendar();\n    };\n    ClrDateContainer.prototype.toggleDatepicker = function (event) {\n        this._ifOpenService.toggleWithEvent(event);\n        this.dateFormControlService.markAsTouched();\n    };\n    ClrDateContainer.prototype.ngOnDestroy = function () {\n        this._sub.unsubscribe();\n    };\n    return ClrDateContainer;\n}());\nvar HostWrapper = /*@__PURE__*/ (function () {\n    function HostWrapper(containerType, vcr) {\n        this.injector = vcr.injector;\n        if (!this.injector.get(containerType, null)) {\n            var cfr = this.injector.get(ComponentFactoryResolver);\n            var el = this.injector.get(ElementRef);\n            vcr.createComponent(cfr.resolveComponentFactory(EmptyAnchor));\n            var factory = cfr.resolveComponentFactory(containerType);\n            var containerRef = vcr.createComponent(factory, undefined, undefined, [[el.nativeElement]]);\n            vcr.remove(0);\n            containerRef.instance._dynamic = true;\n            this.injector = containerRef.injector;\n        }\n    }\n    HostWrapper.prototype.get = function (token, notFoundValue) {\n        return this.injector.get(token, notFoundValue);\n    };\n    return HostWrapper;\n}());\nvar WrappedFormControl = /*@__PURE__*/ (function () {\n    function WrappedFormControl(wrapperType, vcr) {\n        this.wrapperType = wrapperType;\n        this.vcr = vcr;\n    }\n    Object.defineProperty(WrappedFormControl.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        set: function (value) {\n            this._id = value;\n            if (this.formControlService) {\n                this.formControlService.id = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WrappedFormControl.prototype.getProviderFromContainer = function (token, notFoundValue) {\n        return this._containerInjector.get(token, notFoundValue);\n    };\n    WrappedFormControl.prototype.ngOnInit = function () {\n        this._containerInjector = new HostWrapper(this.wrapperType, this.vcr);\n        this.formControlService = this._containerInjector.get(FormControlService);\n        if (this._id) {\n            this.formControlService.id = this._id;\n        }\n        else {\n            this._id = this.formControlService.id;\n        }\n    };\n    return WrappedFormControl;\n}());\nvar ClrDateInput = /*@__PURE__*/ (function (_super) {\n    __extends(ClrDateInput, _super);\n    function ClrDateInput(container, vcr, elRef, renderer, _ngControl, _dateIOService, _dateNavigationService, _datepickerEnabledService, dateFormControlService, platformId) {\n        var _this = _super.call(this, ClrDateContainer, vcr) || this;\n        _this.container = container;\n        _this.elRef = elRef;\n        _this.renderer = renderer;\n        _this._ngControl = _ngControl;\n        _this._dateIOService = _dateIOService;\n        _this._dateNavigationService = _dateNavigationService;\n        _this._datepickerEnabledService = _datepickerEnabledService;\n        _this.dateFormControlService = dateFormControlService;\n        _this.platformId = platformId;\n        _this._subscriptions = [];\n        _this.previousOutputInitializedFlag = false;\n        _this.initialLoad = true;\n        _this._dateUpdated = new EventEmitter(false);\n        return _this;\n    }\n    ClrDateInput.prototype.initializePreviousOutput = function (dayModel) {\n        if (!this.previousOutputInitializedFlag) {\n            this.previousOutput = dayModel;\n            this.previousOutputInitializedFlag = true;\n        }\n    };\n    ClrDateInput.prototype.ngOnInit = function () {\n        _super.prototype.ngOnInit.call(this);\n        if (!this.container) {\n            this.populateContainerServices();\n        }\n        this.initializeSubscriptions();\n        this.processInitialInputs();\n    };\n    ClrDateInput.prototype.processInitialInputs = function () {\n        this.processUserDateObject(this.dateValueOnInitialLoad);\n        if (this._ngControl && this._ngControl.value) {\n            this.updateInputValue(this._ngControl.value);\n            this.initializePreviousOutput(this._dateNavigationService.selectedDay);\n        }\n    };\n    ClrDateInput.prototype.ngAfterViewInit = function () {\n        if (this._dateNavigationService) {\n            var selDay = this._dateNavigationService.selectedDay;\n            if (selDay) {\n                var dateStr = this._dateIOService.toLocaleDisplayFormatString(selDay.toDate());\n                this.writeDateStrToInputField(dateStr);\n            }\n        }\n        this.initialLoad = false;\n    };\n    ClrDateInput.prototype.ngOnDestroy = function () {\n        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    ClrDateInput.prototype.populateContainerServices = function () {\n        this._dateIOService = this.getProviderFromContainer(DateIOService);\n        this._dateNavigationService = this.getProviderFromContainer(DateNavigationService);\n        this._datepickerEnabledService = this.getProviderFromContainer(DatepickerEnabledService);\n        this.dateFormControlService = this.getProviderFromContainer(DateFormControlService);\n    };\n    ClrDateInput.prototype.writeDateStrToInputField = function (value) {\n        this.renderer.setProperty(this.elRef.nativeElement, \"value\", value);\n    };\n    Object.defineProperty(ClrDateInput.prototype, \"date\", {\n        set: function (value) {\n            if (this.initialLoad) {\n                this.dateValueOnInitialLoad = value;\n            }\n            else {\n                this.processUserDateObject(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDateInput.prototype.processUserDateObject = function (value) {\n        if (this._dateIOService) {\n            var dateStr = this._dateIOService.toLocaleDisplayFormatString(value);\n            this.updateInputValue(dateStr);\n        }\n    };\n    ClrDateInput.prototype.updateInputValue = function (dateStr) {\n        var date = this._dateIOService.isValidInput(dateStr);\n        if (date) {\n            var dayModel = new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n            if (!dayModel.isEqual(this._dateNavigationService.selectedDay)) {\n                this._dateNavigationService.selectedDay = dayModel;\n                this.writeDateStrToInputField(dateStr);\n            }\n        }\n        else {\n            this._dateNavigationService.selectedDay = null;\n        }\n    };\n    Object.defineProperty(ClrDateInput.prototype, \"placeholderText\", {\n        get: function () {\n            return this.placeholder ? this.placeholder : this._dateIOService.placeholderText;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDateInput.prototype, \"inputType\", {\n        get: function () {\n            return isPlatformBrowser(this.platformId) && this._datepickerEnabledService.isEnabled ? \"text\" : \"date\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDateInput.prototype.emitDateOutput = function (dayModel) {\n        if (dayModel && !dayModel.isEqual(this.previousOutput)) {\n            this._dateUpdated.emit(dayModel.toDate());\n            this.previousOutput = dayModel;\n        }\n        else if (!dayModel && this.previousOutput) {\n            this._dateUpdated.emit(null);\n            this.previousOutput = null;\n        }\n    };\n    ClrDateInput.prototype.onValueChange = function (target) {\n        var value = target.value;\n        var date = this._dateIOService.isValidInput(value);\n        if (date) {\n            var dayModel = new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n            this._dateNavigationService.selectedDay = dayModel;\n            this.emitDateOutput(dayModel);\n        }\n        else {\n            this._dateNavigationService.selectedDay = null;\n            this.emitDateOutput(null);\n        }\n    };\n    ClrDateInput.prototype.initializeSubscriptions = function () {\n        var _this = this;\n        if (this._dateNavigationService && this._dateIOService) {\n            this._subscriptions.push(this._dateNavigationService.selectedDayChange.subscribe(function (dayModel) {\n                var dateStr = _this._dateIOService.toLocaleDisplayFormatString(dayModel.toDate());\n                _this.writeDateStrToInputField(dateStr);\n                if (_this._ngControl) {\n                    _this._ngControl.control.setValue(dateStr);\n                }\n                _this.emitDateOutput(dayModel);\n            }));\n            if (this._ngControl) {\n                this._subscriptions.push(this._ngControl.valueChanges.subscribe(function (value) {\n                    var date = _this._dateIOService.isValidInput(value);\n                    if (date) {\n                        var dayModel = new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n                        _this._dateNavigationService.selectedDay = dayModel;\n                        _this.initializePreviousOutput(dayModel);\n                    }\n                    else {\n                        _this.initializePreviousOutput(null);\n                    }\n                }));\n            }\n        }\n        if (this.dateFormControlService) {\n            this._subscriptions.push(this.dateFormControlService.touchedChange.subscribe(function () {\n                if (_this._ngControl) {\n                    _this._ngControl.control.markAsTouched();\n                }\n            }));\n            this._subscriptions.push(this.dateFormControlService.dirtyChange.subscribe(function () {\n                if (_this._ngControl) {\n                    _this._ngControl.control.markAsDirty();\n                }\n            }));\n        }\n    };\n    return ClrDateInput;\n}(WrappedFormControl));\nvar AbstractPopover = /*@__PURE__*/ (function () {\n    function AbstractPopover(injector, parentHost) {\n        var _this = this;\n        this.parentHost = parentHost;\n        this.updateAnchor = false;\n        this.popoverOptions = {};\n        this.closeOnOutsideClick = false;\n        this.el = injector.get(ElementRef);\n        this.ifOpenService = injector.get(IfOpenService);\n        this.renderer = injector.get(Renderer2);\n        this.anchorElem = parentHost.nativeElement;\n        this.popoverInstance = new Popover(this.el.nativeElement);\n        this.subscription = this.ifOpenService.openChange.subscribe(function (change) {\n            if (change) {\n                _this.anchor();\n                _this.attachESCListener();\n            }\n            else {\n                _this.release();\n                _this.detachESCListener();\n            }\n        });\n        if (this.ifOpenService.open) {\n            this.anchor();\n            this.attachESCListener();\n        }\n    }\n    AbstractPopover.prototype.anchor = function () {\n        this.updateAnchor = true;\n        this.ignore = this.ifOpenService.originalEvent;\n    };\n    AbstractPopover.prototype.release = function () {\n        this.detachOutsideClickListener();\n        this.popoverInstance.release();\n    };\n    AbstractPopover.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        if (this.updateAnchor) {\n            this.updateAnchor = false;\n            this.popoverInstance.anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions)\n                .subscribe(function () {\n                _this.ifOpenService.open = false;\n            });\n            this.attachOutsideClickListener();\n        }\n    };\n    AbstractPopover.prototype.ngOnDestroy = function () {\n        this.release();\n        this.detachESCListener();\n        this.subscription.unsubscribe();\n    };\n    Object.defineProperty(AbstractPopover.prototype, \"isOffScreen\", {\n        get: function () {\n            return this.ifOpenService.open ? false : true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractPopover.prototype.attachESCListener = function () {\n        var _this = this;\n        this.documentESCListener = this.renderer.listen(\"document\", \"keydown\", function (event) {\n            if (event && event.keyCode === ESC) {\n                _this.ifOpenService.open = false;\n            }\n        });\n    };\n    AbstractPopover.prototype.detachESCListener = function () {\n        if (this.documentESCListener) {\n            this.documentESCListener();\n            delete this.documentESCListener;\n        }\n    };\n    AbstractPopover.prototype.attachOutsideClickListener = function () {\n        var _this = this;\n        if (this.closeOnOutsideClick) {\n            this.hostClickListener = this.renderer.listen(this.el.nativeElement, \"click\", function (event) { return _this.ignore = event; });\n            if (this.ignoredElement) {\n                this.ignoredElementClickListener =\n                    this.renderer.listen(this.ignoredElement, \"click\", function (event) { return _this.ignore = event; });\n            }\n            this.documentClickListener = this.renderer.listen(\"document\", \"click\", function (event) {\n                if (event === _this.ignore) {\n                    delete _this.ignore;\n                }\n                else {\n                    _this.ifOpenService.open = false;\n                }\n            });\n        }\n    };\n    AbstractPopover.prototype.detachOutsideClickListener = function () {\n        if (this.closeOnOutsideClick) {\n            if (this.hostClickListener) {\n                this.hostClickListener();\n                delete this.hostClickListener;\n            }\n            if (this.ignoredElementClickListener) {\n                this.ignoredElementClickListener();\n                delete this.ignoredElementClickListener;\n            }\n            if (this.documentClickListener) {\n                this.documentClickListener();\n                delete this.documentClickListener;\n            }\n        }\n    };\n    return AbstractPopover;\n}());\nvar ViewManagerService = /*@__PURE__*/ (function () {\n    function ViewManagerService() {\n        this._currentView = \"DAYVIEW\";\n    }\n    Object.defineProperty(ViewManagerService.prototype, \"isDayView\", {\n        get: function () {\n            return this._currentView === \"DAYVIEW\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewManagerService.prototype, \"isYearView\", {\n        get: function () {\n            return this._currentView === \"YEARVIEW\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewManagerService.prototype, \"isMonthView\", {\n        get: function () {\n            return this._currentView === \"MONTHVIEW\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewManagerService.prototype.changeToMonthView = function () {\n        this._currentView = \"MONTHVIEW\";\n    };\n    ViewManagerService.prototype.changeToYearView = function () {\n        this._currentView = \"YEARVIEW\";\n    };\n    ViewManagerService.prototype.changeToDayView = function () {\n        this._currentView = \"DAYVIEW\";\n    };\n    return ViewManagerService;\n}());\nvar ClrDatepickerViewManager = /*@__PURE__*/ (function (_super) {\n    __extends(ClrDatepickerViewManager, _super);\n    function ClrDatepickerViewManager(parent, _injector, _viewManagerService) {\n        var _this = _super.call(this, _injector, parent) || this;\n        _this._viewManagerService = _viewManagerService;\n        _this.configurePopover();\n        return _this;\n    }\n    ClrDatepickerViewManager.prototype.configurePopover = function () {\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n        this.closeOnOutsideClick = true;\n    };\n    Object.defineProperty(ClrDatepickerViewManager.prototype, \"isMonthView\", {\n        get: function () {\n            return this._viewManagerService.isMonthView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatepickerViewManager.prototype, \"isYearView\", {\n        get: function () {\n            return this._viewManagerService.isYearView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatepickerViewManager.prototype, \"isDayView\", {\n        get: function () {\n            return this._viewManagerService.isDayView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrDatepickerViewManager;\n}(AbstractPopover));\nvar ClrDay = /*@__PURE__*/ (function () {\n    function ClrDay(_dateNavigationService, _ifOpenService, dateFormControlService) {\n        this._dateNavigationService = _dateNavigationService;\n        this._ifOpenService = _ifOpenService;\n        this.dateFormControlService = dateFormControlService;\n    }\n    ClrDay.prototype.onDayViewFocus = function () {\n        this._dateNavigationService.focusedDay = this.dayView.dayModel;\n    };\n    ClrDay.prototype.selectDay = function () {\n        var day = this.dayView.dayModel;\n        this._dateNavigationService.notifySelectedDayChanged(day);\n        this.dateFormControlService.markAsDirty();\n        this._ifOpenService.open = false;\n    };\n    return ClrDay;\n}());\nvar ClrDaypicker = /*@__PURE__*/ (function () {\n    function ClrDaypicker(_viewManagerService, _dateNavigationService, _localeHelperService) {\n        this._viewManagerService = _viewManagerService;\n        this._dateNavigationService = _dateNavigationService;\n        this._localeHelperService = _localeHelperService;\n    }\n    ClrDaypicker.prototype.changeToMonthView = function () {\n        this._viewManagerService.changeToMonthView();\n    };\n    ClrDaypicker.prototype.changeToYearView = function () {\n        this._viewManagerService.changeToYearView();\n    };\n    Object.defineProperty(ClrDaypicker.prototype, \"calendarMonth\", {\n        get: function () {\n            return this._localeHelperService.localeMonthsAbbreviated[this._dateNavigationService.displayedCalendar.month];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDaypicker.prototype, \"calendarYear\", {\n        get: function () {\n            return this._dateNavigationService.displayedCalendar.year;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDaypicker.prototype.nextMonth = function () {\n        this._dateNavigationService.moveToNextMonth();\n    };\n    ClrDaypicker.prototype.previousMonth = function () {\n        this._dateNavigationService.moveToPreviousMonth();\n    };\n    ClrDaypicker.prototype.currentMonth = function () {\n        this._dateNavigationService.moveToCurrentMonth();\n    };\n    return ClrDaypicker;\n}());\nvar ClrMonthpicker = /*@__PURE__*/ (function () {\n    function ClrMonthpicker(_viewManagerService, _localeHelperService, _dateNavigationService, _datepickerFocusService, _elRef) {\n        this._viewManagerService = _viewManagerService;\n        this._localeHelperService = _localeHelperService;\n        this._dateNavigationService = _dateNavigationService;\n        this._datepickerFocusService = _datepickerFocusService;\n        this._elRef = _elRef;\n        this._focusedMonthIndex = this.calendarMonthIndex;\n    }\n    Object.defineProperty(ClrMonthpicker.prototype, \"monthNames\", {\n        get: function () {\n            return this._localeHelperService.localeMonthsWide;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrMonthpicker.prototype, \"calendarMonthIndex\", {\n        get: function () {\n            return this._dateNavigationService.displayedCalendar.month;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrMonthpicker.prototype.changeMonth = function (monthIndex) {\n        this._dateNavigationService.changeMonth(monthIndex);\n        this._viewManagerService.changeToDayView();\n    };\n    ClrMonthpicker.prototype.getTabIndex = function (monthIndex) {\n        return monthIndex === this._focusedMonthIndex ? 0 : -1;\n    };\n    ClrMonthpicker.prototype.onKeyDown = function (event) {\n        if (event) {\n            var keyCode = event.keyCode;\n            if (keyCode === UP_ARROW && this._focusedMonthIndex > 0) {\n                event.preventDefault();\n                this._focusedMonthIndex--;\n                this._datepickerFocusService.focusCell(this._elRef);\n            }\n            else if (keyCode === DOWN_ARROW && this._focusedMonthIndex < 11) {\n                event.preventDefault();\n                this._focusedMonthIndex++;\n                this._datepickerFocusService.focusCell(this._elRef);\n            }\n            else if (keyCode === RIGHT_ARROW && this._focusedMonthIndex < 6) {\n                event.preventDefault();\n                this._focusedMonthIndex = this._focusedMonthIndex + 6;\n                this._datepickerFocusService.focusCell(this._elRef);\n            }\n            else if (keyCode === LEFT_ARROW && this._focusedMonthIndex > 5) {\n                event.preventDefault();\n                this._focusedMonthIndex = this._focusedMonthIndex - 6;\n                this._datepickerFocusService.focusCell(this._elRef);\n            }\n        }\n    };\n    ClrMonthpicker.prototype.ngAfterViewInit = function () {\n        this._datepickerFocusService.focusCell(this._elRef);\n    };\n    return ClrMonthpicker;\n}());\nvar YEARS_TO_DISPLAY = 10;\nvar YearRangeModel = /*@__PURE__*/ (function () {\n    function YearRangeModel(year) {\n        this.year = year;\n        this.yearRange = [];\n        this.generateYearRange();\n    }\n    Object.defineProperty(YearRangeModel.prototype, \"middleYear\", {\n        get: function () {\n            return this.yearRange[Math.floor(this.yearRange.length / 2)];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    YearRangeModel.prototype.generateYearRange = function () {\n        var remainder = this.year % YEARS_TO_DISPLAY;\n        var floor = this.year - remainder;\n        var ceil = floor + YEARS_TO_DISPLAY;\n        this.yearRange = this.generateRange(floor, ceil);\n    };\n    YearRangeModel.prototype.generateRange = function (floor, ceil) {\n        return Array.from({ length: (ceil - floor) }, function (v, k) { return k + floor; });\n    };\n    YearRangeModel.prototype.nextDecade = function () {\n        return new YearRangeModel(this.year + 10);\n    };\n    YearRangeModel.prototype.previousDecade = function () {\n        return new YearRangeModel(this.year - 10);\n    };\n    YearRangeModel.prototype.currentDecade = function () {\n        return new YearRangeModel((new Date()).getFullYear());\n    };\n    YearRangeModel.prototype.inRange = function (value) {\n        return this.yearRange.indexOf(value) > -1;\n    };\n    return YearRangeModel;\n}());\nvar ClrYearpicker = /*@__PURE__*/ (function () {\n    function ClrYearpicker(_dateNavigationService, _viewManagerService, _datepickerFocusService, _elRef) {\n        this._dateNavigationService = _dateNavigationService;\n        this._viewManagerService = _viewManagerService;\n        this._datepickerFocusService = _datepickerFocusService;\n        this._elRef = _elRef;\n        this.yearRangeModel = new YearRangeModel(this.calendarYear);\n        this._focusedYear = this.calendarYear;\n    }\n    Object.defineProperty(ClrYearpicker.prototype, \"calendarYear\", {\n        get: function () {\n            return this._dateNavigationService.displayedCalendar.year;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrYearpicker.prototype.incrementFocusYearBy = function (value) {\n        this._focusedYear = this._focusedYear + value;\n        if (!this.yearRangeModel.inRange(this._focusedYear)) {\n            if (value > 0) {\n                this.yearRangeModel = this.yearRangeModel.nextDecade();\n            }\n            else {\n                this.yearRangeModel = this.yearRangeModel.previousDecade();\n            }\n        }\n        this._datepickerFocusService.focusCell(this._elRef);\n    };\n    ClrYearpicker.prototype.changeYear = function (year) {\n        this._dateNavigationService.changeYear(year);\n        this._viewManagerService.changeToDayView();\n    };\n    ClrYearpicker.prototype.previousDecade = function () {\n        this.yearRangeModel = this.yearRangeModel.previousDecade();\n    };\n    ClrYearpicker.prototype.currentDecade = function () {\n        if (!this.yearRangeModel.inRange(this._dateNavigationService.today.year)) {\n            this.yearRangeModel = this.yearRangeModel.currentDecade();\n        }\n        this._datepickerFocusService.focusCell(this._elRef);\n    };\n    ClrYearpicker.prototype.nextDecade = function () {\n        this.yearRangeModel = this.yearRangeModel.nextDecade();\n    };\n    ClrYearpicker.prototype.getTabIndex = function (year) {\n        if (!this.yearRangeModel.inRange(this._focusedYear)) {\n            if (this.yearRangeModel.inRange(this.calendarYear)) {\n                this._focusedYear = this.calendarYear;\n            }\n            else {\n                this._focusedYear = this.yearRangeModel.middleYear;\n            }\n        }\n        return this._focusedYear === year ? 0 : -1;\n    };\n    ClrYearpicker.prototype.onKeyDown = function (event) {\n        if (event) {\n            var keyCode = event.keyCode;\n            if (keyCode === UP_ARROW) {\n                event.preventDefault();\n                this.incrementFocusYearBy(-1);\n            }\n            else if (keyCode === DOWN_ARROW) {\n                event.preventDefault();\n                this.incrementFocusYearBy(1);\n            }\n            else if (keyCode === RIGHT_ARROW) {\n                event.preventDefault();\n                this.incrementFocusYearBy(5);\n            }\n            else if (keyCode === LEFT_ARROW) {\n                event.preventDefault();\n                this.incrementFocusYearBy(-5);\n            }\n        }\n    };\n    ClrYearpicker.prototype.ngAfterViewInit = function () {\n        this._datepickerFocusService.focusCell(this._elRef);\n    };\n    return ClrYearpicker;\n}());\nvar CLR_DATEPICKER_DIRECTIVES = [\n    ClrDay, ClrDateContainer, ClrDateInput, ClrDatepickerViewManager, ClrMonthpicker, ClrYearpicker, ClrDaypicker,\n    ClrCalendar\n];\nvar ClrDatepickerModule = /*@__PURE__*/ (function () {\n    function ClrDatepickerModule() {\n    }\n    return ClrDatepickerModule;\n}());\nvar latestId = 0;\nvar ClrCheckboxDeprecated = /*@__PURE__*/ (function () {\n    function ClrCheckboxDeprecated() {\n        this._id = (latestId++).toString();\n        this.clrAriaLabeledBy = null;\n        this.name = null;\n        this.disabled = false;\n        this.inline = false;\n        this._checked = false;\n        this._indeterminate = false;\n        this.indeterminateChange = new EventEmitter(false);\n        this.change = new EventEmitter(false);\n        this.onChangeCallback = function (_) { };\n        this.onTouchedCallback = function () { };\n    }\n    Object.defineProperty(ClrCheckboxDeprecated.prototype, \"id\", {\n        get: function () {\n            return \"clr-checkbox-\" + this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrCheckboxDeprecated.prototype, \"checked\", {\n        get: function () {\n            return this._checked;\n        },\n        set: function (value) {\n            if (value !== this._checked) {\n                if (this._indeterminate) {\n                    this.setIndeterminate(false);\n                }\n                this.setChecked(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrCheckboxDeprecated.prototype, \"indeterminate\", {\n        get: function () {\n            return this._indeterminate;\n        },\n        set: function (value) {\n            if (this._indeterminate !== value) {\n                if (this._checked) {\n                    this.setChecked(false);\n                }\n                this.setIndeterminate(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrCheckboxDeprecated.prototype.setIndeterminate = function (value) {\n        this._indeterminate = value;\n        this.indeterminateChange.emit(this._indeterminate);\n    };\n    ClrCheckboxDeprecated.prototype.setChecked = function (value) {\n        this._checked = value;\n        this.change.emit(this._checked);\n    };\n    ClrCheckboxDeprecated.prototype.toggle = function () {\n        this.checked = !this.checked;\n        this.onChangeCallback(this.checked);\n    };\n    ClrCheckboxDeprecated.prototype.writeValue = function (value) {\n        if (value === null) {\n            value = false;\n        }\n        if (value !== this.checked) {\n            this.checked = value;\n        }\n    };\n    ClrCheckboxDeprecated.prototype.registerOnChange = function (onChange) {\n        this.onChangeCallback = onChange;\n    };\n    ClrCheckboxDeprecated.prototype.registerOnTouched = function (onTouched) {\n        this.onTouchedCallback = onTouched;\n    };\n    ClrCheckboxDeprecated.prototype.touch = function () {\n        this.onTouchedCallback();\n    };\n    ClrCheckboxDeprecated.prototype.checkIndeterminateState = function () {\n        if (!this.disabled) {\n            this.toggle();\n        }\n    };\n    return ClrCheckboxDeprecated;\n}());\nvar CLR_CHECKBOX_DIRECTIVES = [ClrCheckboxDeprecated];\nvar ClrCheckboxModule = /*@__PURE__*/ (function () {\n    function ClrCheckboxModule() {\n    }\n    return ClrCheckboxModule;\n}());\nvar Checkbox = ClrCheckboxDeprecated;\nvar ClrCheckbox = ClrCheckboxDeprecated;\nvar CHECKBOX_DIRECTIVES = CLR_CHECKBOX_DIRECTIVES;\nvar ClrFormsModule = /*@__PURE__*/ (function () {\n    function ClrFormsModule() {\n    }\n    return ClrFormsModule;\n}());\nvar Expand = /*@__PURE__*/ (function () {\n    function Expand() {\n        this.expandable = 0;\n        this.replace = false;\n        this._loading = false;\n        this._expanded = false;\n        this._animate = new Subject();\n        this._expandChange = new Subject();\n    }\n    Object.defineProperty(Expand.prototype, \"loading\", {\n        get: function () {\n            return this._loading;\n        },\n        set: function (value) {\n            value = !!value;\n            if (value !== this._loading) {\n                this._loading = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Expand.prototype, \"expanded\", {\n        get: function () {\n            return this._expanded;\n        },\n        set: function (value) {\n            value = !!value;\n            if (value !== this._expanded) {\n                this._expanded = value;\n                this._animate.next();\n                this._expandChange.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Expand.prototype, \"animate\", {\n        get: function () {\n            return this._animate.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Expand.prototype, \"expandChange\", {\n        get: function () {\n            return this._expandChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Expand.prototype.startLoading = function () {\n        this.loading = true;\n    };\n    Expand.prototype.doneLoading = function () {\n        this.loading = false;\n        this._animate.next();\n    };\n    return Expand;\n}());\nvar IfExpanded = /*@__PURE__*/ (function () {\n    function IfExpanded(template, container, expand) {\n        var _this = this;\n        this.template = template;\n        this.container = container;\n        this.expand = expand;\n        this._expanded = false;\n        this.expandedChange = new EventEmitter(true);\n        this._subscriptions = [];\n        expand.expandable++;\n        this._subscriptions.push(expand.expandChange.subscribe(function () {\n            _this.updateView();\n            _this.expandedChange.emit(_this.expand.expanded);\n        }));\n    }\n    Object.defineProperty(IfExpanded.prototype, \"expanded\", {\n        get: function () {\n            return this._expanded;\n        },\n        set: function (value) {\n            if (typeof value === \"boolean\") {\n                this.expand.expanded = value;\n                this._expanded = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IfExpanded.prototype.updateView = function () {\n        if (this.expand.expanded && this.container.length !== 0) {\n            return;\n        }\n        if (this.expand.expanded) {\n            this.container.createEmbeddedView(this.template);\n        }\n        else {\n            this.container.clear();\n        }\n    };\n    IfExpanded.prototype.ngOnInit = function () {\n        this.updateView();\n    };\n    IfExpanded.prototype.ngOnDestroy = function () {\n        this.expand.expandable--;\n        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    return IfExpanded;\n}());\nvar EXPAND_DIRECTIVES = [IfExpanded];\nvar ClrIfExpandModule = /*@__PURE__*/ (function () {\n    function ClrIfExpandModule() {\n    }\n    return ClrIfExpandModule;\n}());\nvar OutsideClick = /*@__PURE__*/ (function () {\n    function OutsideClick(el) {\n        this.el = el;\n        this.strict = false;\n        this.outsideClick = new EventEmitter(false);\n    }\n    OutsideClick.prototype.documentClick = function (event) {\n        var target = event.target;\n        var host = this.el.nativeElement;\n        if (target === host) {\n            return;\n        }\n        if (!this.strict && host.contains(target)) {\n            return;\n        }\n        this.outsideClick.emit(event);\n    };\n    return OutsideClick;\n}());\nvar OUSTIDE_CLICK_DIRECTIVES = [OutsideClick];\nvar ClrOutsideClickModule = /*@__PURE__*/ (function () {\n    function ClrOutsideClickModule() {\n    }\n    return ClrOutsideClickModule;\n}());\nvar DomAdapter = /*@__PURE__*/ (function () {\n    function DomAdapter() {\n    }\n    DomAdapter.prototype.userDefinedWidth = function (element) {\n        element.classList.add(\"datagrid-cell-width-zero\");\n        var userDefinedWidth = parseInt(getComputedStyle(element).getPropertyValue(\"width\"), 10);\n        element.classList.remove(\"datagrid-cell-width-zero\");\n        return userDefinedWidth;\n    };\n    DomAdapter.prototype.scrollBarWidth = function (element) {\n        return element.offsetWidth - element.clientWidth;\n    };\n    DomAdapter.prototype.scrollWidth = function (element) {\n        return element.scrollWidth || 0;\n    };\n    DomAdapter.prototype.computedHeight = function (element) {\n        return parseInt(getComputedStyle(element).getPropertyValue(\"height\"), 10);\n    };\n    DomAdapter.prototype.clientRectHeight = function (element) {\n        return parseInt(element.getBoundingClientRect().height, 10);\n    };\n    DomAdapter.prototype.clientRectRight = function (element) {\n        return parseInt(element.getBoundingClientRect().right, 10);\n    };\n    DomAdapter.prototype.clientRectWidth = function (element) {\n        return parseInt(element.getBoundingClientRect().width, 10);\n    };\n    DomAdapter.prototype.minWidth = function (element) {\n        return parseInt(getComputedStyle(element).getPropertyValue(\"min-width\"), 10);\n    };\n    DomAdapter.prototype.focus = function (element) {\n        element.focus();\n    };\n    return DomAdapter;\n}());\nvar DatagridRenderOrganizer = /*@__PURE__*/ (function () {\n    function DatagridRenderOrganizer() {\n        this.alreadySized = false;\n        this.widths = [];\n        this._noLayout = new Subject();\n        this._clearWidths = new Subject();\n        this._detectStrictWidths = new Subject();\n        this._tableMode = new Subject();\n        this._computeWidths = new Subject();\n        this._alignColumns = new Subject();\n        this.scrollbar = new Subject();\n        this.scrollbarWidth = new Subject();\n        this._done = new Subject();\n    }\n    Object.defineProperty(DatagridRenderOrganizer.prototype, \"noLayout\", {\n        get: function () {\n            return this._noLayout.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridRenderOrganizer.prototype, \"clearWidths\", {\n        get: function () {\n            return this._clearWidths.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridRenderOrganizer.prototype, \"detectStrictWidths\", {\n        get: function () {\n            return this._detectStrictWidths.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridRenderOrganizer.prototype, \"tableMode\", {\n        get: function () {\n            return this._tableMode.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridRenderOrganizer.prototype, \"computeWidths\", {\n        get: function () {\n            return this._computeWidths.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridRenderOrganizer.prototype, \"alignColumns\", {\n        get: function () {\n            return this._alignColumns.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridRenderOrganizer.prototype, \"done\", {\n        get: function () {\n            return this._done.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatagridRenderOrganizer.prototype.resize = function () {\n        this.widths.length = 0;\n        this._noLayout.next(true);\n        if (this.alreadySized) {\n            this._clearWidths.next();\n        }\n        this._detectStrictWidths.next();\n        this._tableMode.next(true);\n        this._computeWidths.next();\n        this._tableMode.next(false);\n        this._alignColumns.next();\n        this._noLayout.next(false);\n        this.scrollbar.next();\n        this.alreadySized = true;\n        this._done.next();\n    };\n    return DatagridRenderOrganizer;\n}());\nvar DatagridRowExpandAnimation = /*@__PURE__*/ (function () {\n    function DatagridRowExpandAnimation(el, domAdapter, renderer, expand, renderOrganizer) {\n        var _this = this;\n        this.el = el;\n        this.domAdapter = domAdapter;\n        this.renderer = renderer;\n        this.expand = expand;\n        this.renderOrganizer = renderOrganizer;\n        if (expand && expand.animate) {\n            expand.animate.subscribe(function () {\n                if (_this.oldHeight) {\n                    setTimeout(function () { return _this.run(); });\n                }\n                else {\n                    _this.animate();\n                }\n            });\n        }\n    }\n    DatagridRowExpandAnimation.prototype.animate = function () {\n        var _this = this;\n        if (!this.el.nativeElement.animate) {\n            return;\n        }\n        if (this.running) {\n            this.running.finish();\n        }\n        this.oldHeight = this.domAdapter.computedHeight(this.el.nativeElement);\n        this.renderer.setStyle(this.el.nativeElement, \"height\", this.oldHeight + \"px\");\n        this.renderer.setStyle(this.el.nativeElement, \"overflow-y\", \"hidden\");\n        setTimeout(function () {\n            if (_this.expand.loading) {\n                return;\n            }\n            _this.run();\n        });\n    };\n    DatagridRowExpandAnimation.prototype.run = function () {\n        var _this = this;\n        this.renderer.setStyle(this.el.nativeElement, \"height\", null);\n        this.renderOrganizer.scrollbar.next();\n        var newHeight = this.domAdapter.computedHeight(this.el.nativeElement);\n        this.running = this.el.nativeElement.animate({ height: [this.oldHeight + \"px\", newHeight + \"px\"], overflowY: [\"hidden\", \"hidden\"], easing: \"ease-in-out\" }, { duration: 200 });\n        this.running.onfinish = function () {\n            _this.renderer.setStyle(_this.el.nativeElement, \"overflow-y\", null);\n            delete _this.running;\n        };\n        delete this.oldHeight;\n    };\n    return DatagridRowExpandAnimation;\n}());\nvar CustomFilter = /*@__PURE__*/ (function () {\n    function CustomFilter() {\n    }\n    return CustomFilter;\n}());\nvar StateDebouncer = /*@__PURE__*/ (function () {\n    function StateDebouncer() {\n        this._change = new Subject();\n        this.nbChanges = 0;\n    }\n    Object.defineProperty(StateDebouncer.prototype, \"change\", {\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StateDebouncer.prototype.changeStart = function () {\n        this.nbChanges++;\n    };\n    StateDebouncer.prototype.changeDone = function () {\n        if (--this.nbChanges === 0) {\n            this._change.next();\n        }\n    };\n    return StateDebouncer;\n}());\nvar Page = /*@__PURE__*/ (function () {\n    function Page(stateDebouncer) {\n        this.stateDebouncer = stateDebouncer;\n        this._size = 0;\n        this._totalItems = 0;\n        this._change = new Subject();\n        this._sizeChange = new Subject();\n        this._current = 1;\n    }\n    Object.defineProperty(Page.prototype, \"size\", {\n        get: function () {\n            return this._size;\n        },\n        set: function (size) {\n            var oldSize = this._size;\n            if (size !== oldSize) {\n                this._size = size;\n                if (size === 0) {\n                    this._current = 1;\n                }\n                else {\n                    this._current = Math.floor(oldSize / size * (this._current - 1)) + 1;\n                }\n                this._change.next(this._current);\n                this._sizeChange.next(this._size);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Page.prototype, \"totalItems\", {\n        get: function () {\n            return this._totalItems;\n        },\n        set: function (total) {\n            this._totalItems = total;\n            if (this.current > this.last) {\n                this.current = this.last;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Page.prototype, \"last\", {\n        get: function () {\n            if (this._last) {\n                return this._last;\n            }\n            if (this.size > 0 && this.totalItems) {\n                return Math.ceil(this.totalItems / this.size);\n            }\n            return 1;\n        },\n        set: function (page) {\n            this._last = page;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Page.prototype, \"change\", {\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Page.prototype, \"sizeChange\", {\n        get: function () {\n            return this._sizeChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Page.prototype, \"current\", {\n        get: function () {\n            return this._current;\n        },\n        set: function (page) {\n            if (page !== this._current) {\n                this.stateDebouncer.changeStart();\n                this._current = page;\n                this._change.next(page);\n                this.stateDebouncer.changeDone();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Page.prototype.previous = function () {\n        if (this.current > 1) {\n            this.current--;\n        }\n    };\n    Page.prototype.next = function () {\n        if (this.current < this.last) {\n            this.current++;\n        }\n    };\n    Object.defineProperty(Page.prototype, \"firstItem\", {\n        get: function () {\n            if (this.size === 0) {\n                return 0;\n            }\n            return (this.current - 1) * this.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Page.prototype, \"lastItem\", {\n        get: function () {\n            if (this.size === 0) {\n                return this.totalItems - 1;\n            }\n            var lastInPage = (this.current) * this.size - 1;\n            if (this.totalItems) {\n                lastInPage = Math.min(lastInPage, this.totalItems - 1);\n            }\n            return lastInPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Page.prototype.resetPageSize = function () {\n        this.size = 0;\n    };\n    return Page;\n}());\nvar FiltersProvider = /*@__PURE__*/ (function () {\n    function FiltersProvider(_page, stateDebouncer) {\n        this._page = _page;\n        this.stateDebouncer = stateDebouncer;\n        this._change = new Subject();\n        this._all = [];\n    }\n    Object.defineProperty(FiltersProvider.prototype, \"change\", {\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FiltersProvider.prototype.hasActiveFilters = function () {\n        try {\n            for (var _a = __values(this._all), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var filter = _b.value.filter;\n                if (filter && filter.isActive()) {\n                    return true;\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return))\n                    _c.call(_a);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return false;\n        var e_2, _c;\n    };\n    FiltersProvider.prototype.getActiveFilters = function () {\n        var ret = [];\n        try {\n            for (var _a = __values(this._all), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var filter = _b.value.filter;\n                if (filter && filter.isActive()) {\n                    ret.push(filter);\n                }\n            }\n        }\n        catch (e_3_1) {\n            e_3 = { error: e_3_1 };\n        }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return))\n                    _c.call(_a);\n            }\n            finally {\n                if (e_3)\n                    throw e_3.error;\n            }\n        }\n        return ret;\n        var e_3, _c;\n    };\n    FiltersProvider.prototype.add = function (filter) {\n        var _this = this;\n        var index = this._all.length;\n        var subscription = filter.changes.subscribe(function () { return _this.resetPageAndEmitFilterChange([filter]); });\n        var hasUnregistered = false;\n        var registered = new RegisteredFilter(filter, function () {\n            if (hasUnregistered) {\n                return;\n            }\n            subscription.unsubscribe();\n            _this._all.splice(index, 1);\n            if (filter.isActive()) {\n                _this.resetPageAndEmitFilterChange([]);\n            }\n            hasUnregistered = true;\n        });\n        this._all.push(registered);\n        if (filter.isActive()) {\n            this.resetPageAndEmitFilterChange([filter]);\n        }\n        return registered;\n    };\n    FiltersProvider.prototype.accepts = function (item) {\n        try {\n            for (var _a = __values(this._all), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var filter = _b.value.filter;\n                if (filter && filter.isActive() && !filter.accepts(item)) {\n                    return false;\n                }\n            }\n        }\n        catch (e_4_1) {\n            e_4 = { error: e_4_1 };\n        }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return))\n                    _c.call(_a);\n            }\n            finally {\n                if (e_4)\n                    throw e_4.error;\n            }\n        }\n        return true;\n        var e_4, _c;\n    };\n    FiltersProvider.prototype.resetPageAndEmitFilterChange = function (filters) {\n        this.stateDebouncer.changeStart();\n        this._page.current = 1;\n        this._change.next(filters);\n        this.stateDebouncer.changeDone();\n    };\n    return FiltersProvider;\n}());\nvar RegisteredFilter = /*@__PURE__*/ (function () {\n    function RegisteredFilter(filter, unregister) {\n        this.filter = filter;\n        this.unregister = unregister;\n    }\n    return RegisteredFilter;\n}());\nvar DatagridFilterRegistrar = /*@__PURE__*/ (function () {\n    function DatagridFilterRegistrar(filters) {\n        this.filters = filters;\n    }\n    Object.defineProperty(DatagridFilterRegistrar.prototype, \"filter\", {\n        get: function () {\n            return this.registered && this.registered.filter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatagridFilterRegistrar.prototype.setFilter = function (filter) {\n        this.deleteFilter();\n        if (filter instanceof RegisteredFilter) {\n            this.registered = (filter);\n        }\n        else if (filter) {\n            this.registered = this.filters.add((filter));\n        }\n    };\n    DatagridFilterRegistrar.prototype.deleteFilter = function () {\n        if (this.registered) {\n            this.registered.unregister();\n            delete this.registered;\n        }\n    };\n    DatagridFilterRegistrar.prototype.ngOnDestroy = function () {\n        this.deleteFilter();\n    };\n    return DatagridFilterRegistrar;\n}());\nvar ClrDatagridFilter = /*@__PURE__*/ (function (_super) {\n    __extends(ClrDatagridFilter, _super);\n    function ClrDatagridFilter(_filters) {\n        var _this = _super.call(this, _filters) || this;\n        _this.anchorPoint = Point.RIGHT_BOTTOM;\n        _this.popoverPoint = Point.RIGHT_TOP;\n        _this.popoverOptions = { allowMultipleOpen: true };\n        _this._open = false;\n        _this.openChanged = new EventEmitter(false);\n        return _this;\n    }\n    Object.defineProperty(ClrDatagridFilter.prototype, \"open\", {\n        get: function () {\n            return this._open;\n        },\n        set: function (open) {\n            var boolOpen = !!open;\n            if (boolOpen !== this._open) {\n                this._open = boolOpen;\n                this.openChanged.emit(boolOpen);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridFilter.prototype, \"customFilter\", {\n        set: function (filter) {\n            this.setFilter(filter);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridFilter.prototype, \"active\", {\n        get: function () {\n            return !!this.filter && this.filter.isActive();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridFilter.prototype.toggle = function () {\n        this.open = !this.open;\n    };\n    return ClrDatagridFilter;\n}(DatagridFilterRegistrar));\nvar DatagridStringFilterImpl = /*@__PURE__*/ (function () {\n    function DatagridStringFilterImpl(filterFn) {\n        this.filterFn = filterFn;\n        this._changes = new Subject();\n        this._rawValue = \"\";\n        this._lowerCaseValue = \"\";\n    }\n    Object.defineProperty(DatagridStringFilterImpl.prototype, \"changes\", {\n        get: function () {\n            return this._changes.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridStringFilterImpl.prototype, \"value\", {\n        get: function () {\n            return this._rawValue;\n        },\n        set: function (value) {\n            if (!value) {\n                value = \"\";\n            }\n            if (value !== this._rawValue) {\n                this._rawValue = value;\n                this._lowerCaseValue = value.toLowerCase().trim();\n                this._changes.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridStringFilterImpl.prototype, \"lowerCaseValue\", {\n        get: function () {\n            return this._lowerCaseValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatagridStringFilterImpl.prototype.isActive = function () {\n        return !!this.value;\n    };\n    DatagridStringFilterImpl.prototype.accepts = function (item) {\n        return this.filterFn.accepts(item, this.lowerCaseValue);\n    };\n    return DatagridStringFilterImpl;\n}());\nvar DatagridStringFilter = /*@__PURE__*/ (function (_super) {\n    __extends(DatagridStringFilter, _super);\n    function DatagridStringFilter(filters, domAdapter) {\n        var _this = _super.call(this, filters) || this;\n        _this.domAdapter = domAdapter;\n        _this.open = false;\n        _this.filterValueChange = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(DatagridStringFilter.prototype, \"customStringFilter\", {\n        set: function (value) {\n            if (value instanceof RegisteredFilter) {\n                this.setFilter(value);\n            }\n            else {\n                this.setFilter(new DatagridStringFilterImpl((value)));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatagridStringFilter.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.filterContainer.openChanged.subscribe(function (open) {\n            if (open) {\n                setTimeout(function () {\n                    _this.domAdapter.focus(_this.input.nativeElement);\n                });\n            }\n        });\n    };\n    Object.defineProperty(DatagridStringFilter.prototype, \"value\", {\n        get: function () {\n            return this.filter.value;\n        },\n        set: function (value) {\n            if (!this.filter) {\n                return;\n            }\n            if (!value) {\n                value = \"\";\n            }\n            if (value !== this.filter.value) {\n                this.filter.value = value;\n                this.filterValueChange.emit(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatagridStringFilter.prototype.close = function () {\n        this.open = false;\n    };\n    return DatagridStringFilter;\n}(DatagridFilterRegistrar));\nvar OompaLoompa = /*@__PURE__*/ (function () {\n    function OompaLoompa(cdr, willyWonka) {\n        var _this = this;\n        this.subscription = willyWonka.chocolate.subscribe(function () {\n            if (_this.latestFlavor !== _this.flavor) {\n                cdr.detectChanges();\n            }\n        });\n    }\n    OompaLoompa.prototype.ngAfterContentChecked = function () {\n        this.latestFlavor = this.flavor;\n    };\n    OompaLoompa.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    return OompaLoompa;\n}());\nvar RowActionService = /*@__PURE__*/ (function () {\n    function RowActionService() {\n        this.actionableCount = 0;\n    }\n    RowActionService.prototype.register = function () {\n        this.actionableCount++;\n    };\n    RowActionService.prototype.unregister = function () {\n        this.actionableCount--;\n    };\n    Object.defineProperty(RowActionService.prototype, \"hasActionableRow\", {\n        get: function () {\n            return this.actionableCount > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RowActionService;\n}());\nvar WillyWonka = /*@__PURE__*/ (function () {\n    function WillyWonka() {\n        this._chocolate = new Subject();\n    }\n    Object.defineProperty(WillyWonka.prototype, \"chocolate\", {\n        get: function () {\n            return this._chocolate.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WillyWonka.prototype.ngAfterViewChecked = function () {\n        this._chocolate.next();\n    };\n    return WillyWonka;\n}());\nvar DatagridWillyWonka = /*@__PURE__*/ (function (_super) {\n    __extends(DatagridWillyWonka, _super);\n    function DatagridWillyWonka() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return DatagridWillyWonka;\n}(WillyWonka));\nvar ActionableOompaLoompa = /*@__PURE__*/ (function (_super) {\n    __extends(ActionableOompaLoompa, _super);\n    function ActionableOompaLoompa(cdr, willyWonka, rowActions) {\n        var _this = this;\n        if (!willyWonka) {\n            throw new Error(\"clr-dg-row should only be used inside of a clr-datagrid\");\n        }\n        _this = _super.call(this, cdr, willyWonka) || this;\n        _this.rowActions = rowActions;\n        return _this;\n    }\n    Object.defineProperty(ActionableOompaLoompa.prototype, \"flavor\", {\n        get: function () {\n            return this.rowActions.hasActionableRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ActionableOompaLoompa;\n}(OompaLoompa));\nvar ExpandableRowsCount = /*@__PURE__*/ (function () {\n    function ExpandableRowsCount() {\n        this.expandableCount = 0;\n    }\n    ExpandableRowsCount.prototype.register = function () {\n        this.expandableCount++;\n    };\n    ExpandableRowsCount.prototype.unregister = function () {\n        this.expandableCount--;\n    };\n    Object.defineProperty(ExpandableRowsCount.prototype, \"hasExpandableRow\", {\n        get: function () {\n            return this.expandableCount > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ExpandableRowsCount;\n}());\nvar ExpandableOompaLoompa = /*@__PURE__*/ (function (_super) {\n    __extends(ExpandableOompaLoompa, _super);\n    function ExpandableOompaLoompa(cdr, willyWonka, expandableCount) {\n        var _this = this;\n        if (!willyWonka) {\n            throw new Error(\"clr-dg-row should only be used inside of a clr-datagrid\");\n        }\n        _this = _super.call(this, cdr, willyWonka) || this;\n        _this.expandableCount = expandableCount;\n        return _this;\n    }\n    Object.defineProperty(ExpandableOompaLoompa.prototype, \"flavor\", {\n        get: function () {\n            return this.expandableCount.hasExpandableRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ExpandableOompaLoompa;\n}(OompaLoompa));\nvar NestedProperty = /*@__PURE__*/ (function () {\n    function NestedProperty(prop) {\n        this.prop = prop;\n        if (prop.indexOf(\".\") >= 0) {\n            this.splitProp = prop.split(\".\");\n        }\n    }\n    NestedProperty.prototype.getPropValue = function (item) {\n        if (this.splitProp) {\n            var value = item;\n            try {\n                for (var _a = __values(this.splitProp), _b = _a.next(); !_b.done; _b = _a.next()) {\n                    var nestedProp = _b.value;\n                    if (value == null || typeof value === \"undefined\" || typeof value[nestedProp] === \"undefined\") {\n                        return undefined;\n                    }\n                    value = value[nestedProp];\n                }\n            }\n            catch (e_5_1) {\n                e_5 = { error: e_5_1 };\n            }\n            finally {\n                try {\n                    if (_b && !_b.done && (_c = _a.return))\n                        _c.call(_a);\n                }\n                finally {\n                    if (e_5)\n                        throw e_5.error;\n                }\n            }\n            return value;\n        }\n        else {\n            return item[this.prop];\n        }\n        var e_5, _c;\n    };\n    return NestedProperty;\n}());\nvar DatagridPropertyComparator = /*@__PURE__*/ (function () {\n    function DatagridPropertyComparator(prop) {\n        this.prop = prop;\n        this.nestedProp = new NestedProperty(prop);\n    }\n    DatagridPropertyComparator.prototype.compare = function (a, b) {\n        var propA = this.nestedProp.getPropValue(a);\n        var propB = this.nestedProp.getPropValue(b);\n        if (typeof propA === \"string\") {\n            propA = propA.toLowerCase();\n        }\n        if (typeof propB === \"string\") {\n            propB = propB.toLowerCase();\n        }\n        if (typeof propA === \"undefined\" || propA === null) {\n            if (typeof propB === \"undefined\" || propB === null) {\n                return 0;\n            }\n            else {\n                return 1;\n            }\n        }\n        else {\n            if (typeof propB === \"undefined\" || propB === null) {\n                return -1;\n            }\n            else if (propA < propB) {\n                return -1;\n            }\n            else if (propA > propB) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        }\n    };\n    return DatagridPropertyComparator;\n}());\nvar DatagridPropertyStringFilter = /*@__PURE__*/ (function () {\n    function DatagridPropertyStringFilter(prop, exact) {\n        if (exact === void 0) {\n            exact = false;\n        }\n        this.prop = prop;\n        this.exact = exact;\n        this.nestedProp = new NestedProperty(prop);\n    }\n    DatagridPropertyStringFilter.prototype.accepts = function (item, search) {\n        var propValue = this.nestedProp.getPropValue(item);\n        if (typeof propValue === \"undefined\") {\n            return false;\n        }\n        else if (this.exact) {\n            return (\"\" + propValue).toLowerCase() === search;\n        }\n        else {\n            return (\"\" + propValue).toLowerCase().indexOf(search) >= 0;\n        }\n    };\n    return DatagridPropertyStringFilter;\n}());\nvar ClrDatagridSortOrder = {\n    UNSORTED: 0,\n    ASC: 1,\n    DESC: -1,\n};\nClrDatagridSortOrder[ClrDatagridSortOrder.UNSORTED] = \"UNSORTED\";\nClrDatagridSortOrder[ClrDatagridSortOrder.ASC] = \"ASC\";\nClrDatagridSortOrder[ClrDatagridSortOrder.DESC] = \"DESC\";\nvar DragDispatcher = /*@__PURE__*/ (function () {\n    function DragDispatcher(_ngZone, _renderer) {\n        this._ngZone = _ngZone;\n        this._renderer = _renderer;\n        this._onDragStart = new Subject();\n        this._onDragMove = new Subject();\n        this._onDragEnd = new Subject();\n    }\n    Object.defineProperty(DragDispatcher.prototype, \"onDragStart\", {\n        get: function () {\n            return this._onDragStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragDispatcher.prototype, \"onDragMove\", {\n        get: function () {\n            return this._onDragMove;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragDispatcher.prototype, \"onDragEnd\", {\n        get: function () {\n            return this._onDragEnd;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DragDispatcher.prototype.addDragListener = function () {\n        var handleEl = this.handleRef.nativeElement;\n        this._listeners = [\n            this.customDragEvent(handleEl, \"mousedown\", \"mousemove\", \"mouseup\"),\n            this.customDragEvent(handleEl, \"touchstart\", \"touchmove\", \"touchend\")\n        ];\n    };\n    DragDispatcher.prototype.customDragEvent = function (element, startOnEvent, moveOnEvent, endOnEvent) {\n        var _this = this;\n        var dragMoveListener;\n        var dragEndListener;\n        return this._renderer.listen(element, startOnEvent, function (startEvent) {\n            _this.notifyDragStart(startEvent);\n            dragMoveListener = _this._ngZone.runOutsideAngular(function () {\n                return _this._renderer.listen(\"document\", moveOnEvent, function (moveEvent) {\n                    _this.notifyDragMove(moveEvent);\n                });\n            });\n            dragEndListener = _this._renderer.listen(\"document\", endOnEvent, function (endEvent) {\n                dragMoveListener();\n                _this.notifyDragEnd(endEvent);\n                dragEndListener();\n            });\n        });\n    };\n    DragDispatcher.prototype.notifyDragStart = function (event) {\n        return this._onDragStart.next(event);\n    };\n    DragDispatcher.prototype.notifyDragMove = function (event) {\n        return this._onDragMove.next(event);\n    };\n    DragDispatcher.prototype.notifyDragEnd = function (event) {\n        return this._onDragEnd.next(event);\n    };\n    DragDispatcher.prototype.destroy = function () {\n        if (this._listeners) {\n            this._listeners.map(function (event) { return event(); });\n        }\n    };\n    return DragDispatcher;\n}());\nvar Sort = /*@__PURE__*/ (function () {\n    function Sort(stateDebouncer) {\n        this.stateDebouncer = stateDebouncer;\n        this._reverse = false;\n        this._change = new Subject();\n    }\n    Object.defineProperty(Sort.prototype, \"comparator\", {\n        get: function () {\n            return this._comparator;\n        },\n        set: function (value) {\n            this.stateDebouncer.changeStart();\n            this._comparator = value;\n            this.emitChange();\n            this.stateDebouncer.changeDone();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Sort.prototype, \"reverse\", {\n        get: function () {\n            return this._reverse;\n        },\n        set: function (value) {\n            this.stateDebouncer.changeStart();\n            this._reverse = value;\n            this.emitChange();\n            this.stateDebouncer.changeDone();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Sort.prototype.emitChange = function () {\n        this._change.next(this);\n    };\n    Object.defineProperty(Sort.prototype, \"change\", {\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Sort.prototype.toggle = function (sortBy, forceReverse) {\n        this.stateDebouncer.changeStart();\n        if (this.comparator === sortBy) {\n            this._reverse = typeof forceReverse !== \"undefined\" ? forceReverse || !this._reverse : !this._reverse;\n        }\n        else {\n            this._comparator = sortBy;\n            this._reverse = typeof forceReverse !== \"undefined\" ? forceReverse : false;\n        }\n        this.emitChange();\n        this.stateDebouncer.changeDone();\n    };\n    Sort.prototype.clear = function () {\n        this.comparator = null;\n    };\n    Sort.prototype.compare = function (a, b) {\n        return (this.reverse ? -1 : 1) * this.comparator.compare(a, b);\n    };\n    return Sort;\n}());\nvar nbCount = 0;\nvar ClrDatagridColumn = /*@__PURE__*/ (function (_super) {\n    __extends(ClrDatagridColumn, _super);\n    function ClrDatagridColumn(_sort, filters, _dragDispatcher) {\n        var _this = _super.call(this, filters) || this;\n        _this._sort = _sort;\n        _this._dragDispatcher = _dragDispatcher;\n        _this._sorted = false;\n        _this.sortedChange = new EventEmitter();\n        _this._sortOrder = ClrDatagridSortOrder.UNSORTED;\n        _this.sortOrderChange = new EventEmitter();\n        _this.customFilter = false;\n        _this.filterValueChange = new EventEmitter();\n        _this._sortSubscription = _sort.change.subscribe(function (sort) {\n            if (_this.sortOrder !== ClrDatagridSortOrder.UNSORTED && sort.comparator !== _this._sortBy) {\n                _this._sortOrder = ClrDatagridSortOrder.UNSORTED;\n                _this.sortOrderChange.emit(_this._sortOrder);\n            }\n            if (_this.sorted && sort.comparator !== _this._sortBy) {\n                _this._sorted = false;\n                _this.sortedChange.emit(false);\n            }\n        });\n        _this.columnId = \"dg-col-\" + nbCount.toString();\n        nbCount++;\n        return _this;\n    }\n    Object.defineProperty(ClrDatagridColumn.prototype, \"hidden\", {\n        get: function () {\n            return !!this.hideable && this.hideable.hidden;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"handleElRef\", {\n        set: function (value) {\n            this._dragDispatcher.handleRef = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"handleTrackerElRef\", {\n        set: function (value) {\n            this._dragDispatcher.handleTrackerRef = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridColumn.prototype.ngOnDestroy = function () {\n        this._sortSubscription.unsubscribe();\n    };\n    Object.defineProperty(ClrDatagridColumn.prototype, \"field\", {\n        get: function () {\n            return this._field;\n        },\n        set: function (field) {\n            if (typeof field === \"string\") {\n                this._field = field;\n                if (!this.customFilter) {\n                    this.setFilter(new DatagridStringFilterImpl(new DatagridPropertyStringFilter(field)));\n                }\n                if (!this._sortBy) {\n                    this._sortBy = new DatagridPropertyComparator(field);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"sortBy\", {\n        get: function () {\n            return this._sortBy;\n        },\n        set: function (comparator) {\n            if (typeof comparator === \"string\") {\n                this._sortBy = new DatagridPropertyComparator(comparator);\n            }\n            else {\n                if (comparator) {\n                    this._sortBy = comparator;\n                }\n                else {\n                    if (this._field) {\n                        this._sortBy = new DatagridPropertyComparator(this._field);\n                    }\n                    else {\n                        delete this._sortBy;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"sortable\", {\n        get: function () {\n            return !!this._sortBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"sorted\", {\n        get: function () {\n            return this._sorted;\n        },\n        set: function (value) {\n            if (!value && this.sorted) {\n                this._sorted = false;\n                this._sort.clear();\n            }\n            else if (value && !this.sorted) {\n                this.sort();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"sortOrder\", {\n        get: function () {\n            return this._sortOrder;\n        },\n        set: function (value) {\n            if (typeof value === \"undefined\") {\n                return;\n            }\n            if (this._sortOrder === value) {\n                return;\n            }\n            switch (value) {\n                default:\n                case ClrDatagridSortOrder.UNSORTED:\n                    this._sort.clear();\n                    break;\n                case ClrDatagridSortOrder.ASC:\n                    this.sort(false);\n                    break;\n                case ClrDatagridSortOrder.DESC:\n                    this.sort(true);\n                    break;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"ariaSort\", {\n        get: function () {\n            switch (this._sortOrder) {\n                default:\n                case ClrDatagridSortOrder.UNSORTED:\n                    return \"none\";\n                case ClrDatagridSortOrder.ASC:\n                    return \"ascending\";\n                case ClrDatagridSortOrder.DESC:\n                    return \"descending\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridColumn.prototype.sort = function (reverse) {\n        if (!this.sortable) {\n            return;\n        }\n        this._sort.toggle(this._sortBy, reverse);\n        this._sortOrder = this._sort.reverse ? ClrDatagridSortOrder.DESC : ClrDatagridSortOrder.ASC;\n        this.sortOrderChange.emit(this._sortOrder);\n        this._sorted = true;\n        this.sortedChange.emit(true);\n    };\n    Object.defineProperty(ClrDatagridColumn.prototype, \"asc\", {\n        get: function () {\n            if (typeof this.sortOrder === \"undefined\") {\n                return this.sorted && !this._sort.reverse;\n            }\n            else {\n                return this.sortOrder === ClrDatagridSortOrder.ASC;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"desc\", {\n        get: function () {\n            if (typeof this.sortOrder === \"undefined\") {\n                return this.sorted && this._sort.reverse;\n            }\n            else {\n                return this.sortOrder === ClrDatagridSortOrder.DESC;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"projectedFilter\", {\n        set: function (custom) {\n            if (custom) {\n                this.deleteFilter();\n                this.customFilter = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"filterValue\", {\n        get: function () {\n            return this.filter.value;\n        },\n        set: function (newValue) {\n            this.updateFilterValue = newValue;\n            this.filterValueChange.emit(this.filter.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridColumn.prototype, \"updateFilterValue\", {\n        set: function (newValue) {\n            if (!this.filter) {\n                return;\n            }\n            if (!newValue) {\n                newValue = \"\";\n            }\n            if (newValue !== this.filter.value) {\n                this.filter.value = newValue;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrDatagridColumn;\n}(DatagridFilterRegistrar));\nvar Items = /*@__PURE__*/ (function () {\n    function Items(_filters, _sort, _page) {\n        this._filters = _filters;\n        this._sort = _sort;\n        this._page = _page;\n        this.loading = false;\n        this.trackBy = function (index, item) { return item; };\n        this._smart = false;\n        this._displayed = [];\n        this._change = new Subject();\n        this._allChanges = new Subject();\n    }\n    Items.prototype.destroy = function () {\n        if (this._filtersSub) {\n            this._filtersSub.unsubscribe();\n        }\n        if (this._sortSub) {\n            this._sortSub.unsubscribe();\n        }\n        if (this._pageSub) {\n            this._pageSub.unsubscribe();\n        }\n    };\n    Object.defineProperty(Items.prototype, \"smart\", {\n        get: function () {\n            return this._smart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Items.prototype.smartenUp = function () {\n        var _this = this;\n        this._smart = true;\n        this._filtersSub = this._filters.change.subscribe(function () { return _this._filterItems(); });\n        this._sortSub = this._sort.change.subscribe(function () {\n            if (!_this._sort.comparator) {\n                _this._filterItems();\n            }\n            else {\n                _this._sortItems();\n            }\n        });\n        this._pageSub = this._page.change.subscribe(function () { return _this._changePage(); });\n    };\n    Object.defineProperty(Items.prototype, \"all\", {\n        get: function () {\n            return this._all;\n        },\n        set: function (items) {\n            this._all = items;\n            this.emitAllChanges(items);\n            if (this.smart) {\n                this._filterItems();\n            }\n            else {\n                this._displayed = items;\n                this.emitChange();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Items.prototype.refresh = function () {\n        if (this.smart) {\n            this._filterItems();\n        }\n    };\n    Object.defineProperty(Items.prototype, \"displayed\", {\n        get: function () {\n            return this._displayed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Items.prototype.emitChange = function () {\n        this._change.next(this.displayed);\n    };\n    Object.defineProperty(Items.prototype, \"change\", {\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Items.prototype.emitAllChanges = function (items) {\n        this._allChanges.next(items);\n    };\n    Object.defineProperty(Items.prototype, \"allChanges\", {\n        get: function () {\n            return this._allChanges.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Items.prototype, \"uninitialized\", {\n        get: function () {\n            return !this._all;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Items.prototype._filterItems = function () {\n        var _this = this;\n        if (this.uninitialized) {\n            return;\n        }\n        if (this._filters.hasActiveFilters()) {\n            this._filtered = this._all.filter(function (item) { return _this._filters.accepts(item); });\n        }\n        else {\n            this._filtered = this._all.slice();\n        }\n        this._page.totalItems = this._filtered.length;\n        this._sortItems();\n    };\n    Items.prototype._sortItems = function () {\n        var _this = this;\n        if (this.uninitialized) {\n            return;\n        }\n        if (this._sort.comparator) {\n            this._filtered.sort(function (a, b) { return _this._sort.compare(a, b); });\n        }\n        this._changePage();\n    };\n    Items.prototype._changePage = function () {\n        if (this.uninitialized) {\n            return;\n        }\n        if (this._page.size > 0) {\n            this._displayed = this._filtered.slice(this._page.firstItem, this._page.lastItem + 1);\n        }\n        else {\n            this._displayed = this._filtered;\n        }\n        this.emitChange();\n    };\n    return Items;\n}());\nvar ClrDatagridItems = /*@__PURE__*/ (function () {\n    function ClrDatagridItems(template, _differs, _items) {\n        this.template = template;\n        this._differs = _differs;\n        this._items = _items;\n        _items.smartenUp();\n    }\n    Object.defineProperty(ClrDatagridItems.prototype, \"rawItems\", {\n        set: function (items) {\n            this._rawItems = items ? items : [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridItems.prototype.ngOnChanges = function (changes) {\n        if (\"rawItems\" in changes) {\n            var currentItems = changes[\"rawItems\"].currentValue;\n            if (!this._differ && currentItems) {\n                this._differ = this._differs.find(currentItems).create(this._items.trackBy);\n            }\n        }\n    };\n    Object.defineProperty(ClrDatagridItems.prototype, \"trackBy\", {\n        set: function (value) {\n            this._items.trackBy = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridItems.prototype.ngDoCheck = function () {\n        if (this._differ) {\n            var changes = this._differ.diff(this._rawItems);\n            if (changes) {\n                this._items.all = this._rawItems;\n            }\n        }\n    };\n    return ClrDatagridItems;\n}());\nvar ClrDatagridPlaceholder = /*@__PURE__*/ (function () {\n    function ClrDatagridPlaceholder(items) {\n        this.items = items;\n    }\n    Object.defineProperty(ClrDatagridPlaceholder.prototype, \"emptyDatagrid\", {\n        get: function () {\n            return !this.items.loading && (!this.items.displayed || this.items.displayed.length === 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrDatagridPlaceholder;\n}());\nvar POPOVER_HOST_ANCHOR = new InjectionToken(\"POPOVER_HOST_ANCHOR\");\nvar ClrSignpostTrigger = /*@__PURE__*/ (function () {\n    function ClrSignpostTrigger(ifOpenService, renderer, el) {\n        var _this = this;\n        this.ifOpenService = ifOpenService;\n        this.renderer = renderer;\n        this.el = el;\n        this.subscriptions = [];\n        this.subscriptions.push(this.ifOpenService.openChange.subscribe(function (isOpen) {\n            if (isOpen) {\n                _this.renderer.addClass(_this.el.nativeElement, \"active\");\n            }\n            else {\n                _this.renderer.removeClass(_this.el.nativeElement, \"active\");\n            }\n        }));\n    }\n    ClrSignpostTrigger.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    ClrSignpostTrigger.prototype.onSignpostTriggerClick = function (event) {\n        this.ifOpenService.toggleWithEvent(event);\n    };\n    return ClrSignpostTrigger;\n}());\nvar ClrSignpost = /*@__PURE__*/ (function () {\n    function ClrSignpost() {\n        this.useCustomTrigger = false;\n    }\n    Object.defineProperty(ClrSignpost.prototype, \"customTrigger\", {\n        set: function (trigger$$1) {\n            this.useCustomTrigger = !!trigger$$1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrSignpost;\n}());\nvar HideableColumnService = /*@__PURE__*/ (function () {\n    function HideableColumnService() {\n        this._columnList = [];\n        this._columnListChange = new BehaviorSubject(this._columnList);\n    }\n    Object.defineProperty(HideableColumnService.prototype, \"canHideNextColumn\", {\n        get: function () {\n            var hiddenColumns = this._columnList.filter(function (column) { return column !== undefined; }).filter(function (column) { return column.hidden; });\n            return (this._columnList.length - hiddenColumns.length > 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HideableColumnService.prototype, \"checkForAllColumnsVisible\", {\n        get: function () {\n            return !this._columnList.some(function (column) { return column && column.hidden; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HideableColumnService.prototype, \"columnListChange\", {\n        get: function () {\n            return this._columnListChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HideableColumnService.prototype.getColumns = function () {\n        return this._columnList;\n    };\n    HideableColumnService.prototype.showHiddenColumns = function () {\n        this._columnList.forEach(function (column) {\n            if (column && column.hidden === true) {\n                column.hidden = false;\n            }\n            if (column && column.lastVisibleColumn) {\n                column.lastVisibleColumn = false;\n            }\n        });\n    };\n    HideableColumnService.prototype.updateColumnList = function (columns) {\n        this._columnList = columns;\n        this.updateForLastVisibleColumn();\n        this._columnListChange.next(this._columnList);\n    };\n    HideableColumnService.prototype.updateForLastVisibleColumn = function () {\n        if (this.canHideNextColumn) {\n            this._columnList.map(function (column) {\n                if (column && column.lastVisibleColumn) {\n                    column.lastVisibleColumn = false;\n                }\n            });\n        }\n        else {\n            this._columnList.map(function (column) {\n                if (column && !column.hidden) {\n                    column.lastVisibleColumn = true;\n                }\n            });\n        }\n    };\n    HideableColumnService.prototype.getColumnById = function (id) {\n        if (id) {\n            return this._columnList.find(function (column) { return column && column.id === id; });\n        }\n        return;\n    };\n    return HideableColumnService;\n}());\nvar ClrDatagridCell = /*@__PURE__*/ (function () {\n    function ClrDatagridCell(hideableColumnService, _el, _renderer) {\n        this.hideableColumnService = hideableColumnService;\n        this._el = _el;\n        this._renderer = _renderer;\n    }\n    Object.defineProperty(ClrDatagridCell.prototype, \"id\", {\n        set: function (value) {\n            this._id = value;\n            this.mapHideableColumn(this._id);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridCell.prototype.mapHideableColumn = function (columnId) {\n        var _this = this;\n        if (!columnId) {\n            return;\n        }\n        var hideableColumn = this.hideableColumnService.getColumnById(this._id);\n        this.setHiddenClass(hideableColumn.hidden);\n        this.hiddenStateSubscription = hideableColumn.hiddenChangeState.subscribe(function () {\n            _this.setHiddenClass(hideableColumn.hidden);\n        });\n    };\n    ClrDatagridCell.prototype.setHiddenClass = function (hideableColumnValue) {\n        if (hideableColumnValue) {\n            this._renderer.addClass(this._el.nativeElement, \"datagrid-cell--hidden\");\n        }\n        else {\n            this._renderer.removeClass(this._el.nativeElement, \"datagrid-cell--hidden\");\n        }\n    };\n    ClrDatagridCell.prototype.ngOnDestroy = function () {\n        if (this.hiddenStateSubscription) {\n            this.hiddenStateSubscription.unsubscribe();\n        }\n    };\n    return ClrDatagridCell;\n}());\nvar nbSelection = 0;\nvar SelectionType = {\n    None: 0,\n    Single: 1,\n    Multi: 2,\n};\nSelectionType[SelectionType.None] = \"None\";\nSelectionType[SelectionType.Single] = \"Single\";\nSelectionType[SelectionType.Multi] = \"Multi\";\nvar Selection = /*@__PURE__*/ (function () {\n    function Selection(_items, _filters) {\n        var _this = this;\n        this._items = _items;\n        this._filters = _filters;\n        this.prevSelectionRefs = [];\n        this._selectionType = SelectionType.None;\n        this.rowSelectionMode = false;\n        this.debounce = false;\n        this.subscriptions = [];\n        this._change = new Subject();\n        this.id = \"clr-dg-selection\" + nbSelection++;\n        this.subscriptions.push(this._filters.change.subscribe(function () {\n            if (!_this._selectable) {\n                return;\n            }\n            _this.clearSelection();\n        }));\n        this.subscriptions.push(this._items.allChanges.subscribe(function (updatedItems) {\n            switch (_this.selectionType) {\n                case SelectionType.None: {\n                    break;\n                }\n                case SelectionType.Single: {\n                    var newSingle_1;\n                    var trackBy_1 = _this._items.trackBy;\n                    var selectionUpdated_1 = false;\n                    if (_this.currentSingle && !_this.prevSingleSelectionRef) {\n                        if (_this._items.all && _this._items.trackBy) {\n                            var lookup = _this._items.all.findIndex(function (maybe) { return maybe === _this.currentSingle; });\n                            _this.prevSingleSelectionRef = _this._items.trackBy(lookup, _this.currentSingle);\n                        }\n                    }\n                    updatedItems.forEach(function (item, index) {\n                        var ref = trackBy_1(index, item);\n                        if (_this.prevSingleSelectionRef === ref) {\n                            newSingle_1 = item;\n                            selectionUpdated_1 = true;\n                        }\n                    });\n                    if (_this._items.smart && !newSingle_1) {\n                        selectionUpdated_1 = true;\n                    }\n                    setTimeout(function () {\n                        if (selectionUpdated_1) {\n                            _this.currentSingle = newSingle_1;\n                        }\n                    }, 0);\n                    break;\n                }\n                case SelectionType.Multi: {\n                    var leftOver_1 = _this.current.slice();\n                    var trackBy_2 = _this._items.trackBy;\n                    var selectionUpdated_2 = false;\n                    if (_this.current.length > 0 && _this.prevSelectionRefs.length !== _this.current.length) {\n                        if (_this._items.all && _this._items.trackBy) {\n                            _this.prevSelectionRefs = [];\n                            _this.current.forEach(function (item) {\n                                var lookup = _this._items.all.findIndex(function (maybe) { return maybe === item; });\n                                _this.prevSelectionRefs.push(_this._items.trackBy(lookup, item));\n                            });\n                        }\n                    }\n                    if (leftOver_1.length > 0) {\n                        updatedItems.forEach(function (item, index) {\n                            var ref = trackBy_2(index, item);\n                            var selectedIndex = _this.prevSelectionRefs.indexOf(ref);\n                            if (selectedIndex > -1) {\n                                leftOver_1[selectedIndex] = item;\n                                selectionUpdated_2 = true;\n                            }\n                        });\n                        if (_this._items.smart) {\n                            leftOver_1 = leftOver_1.filter(function (selected) { return updatedItems.indexOf(selected) > -1; });\n                            if (_this.current.length !== leftOver_1.length) {\n                                selectionUpdated_2 = true;\n                            }\n                        }\n                        setTimeout(function () {\n                            if (selectionUpdated_2) {\n                                _this.current = leftOver_1;\n                            }\n                        }, 0);\n                    }\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n        }));\n    }\n    Selection.prototype.clearSelection = function () {\n        this.current.length = 0;\n        this.prevSelectionRefs = [];\n        this.emitChange();\n    };\n    Object.defineProperty(Selection.prototype, \"selectionType\", {\n        get: function () {\n            return this._selectionType;\n        },\n        set: function (value) {\n            if (value === this.selectionType) {\n                return;\n            }\n            this._selectionType = value;\n            if (value === SelectionType.None) {\n                delete this.current;\n            }\n            else {\n                this.current = [];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Selection.prototype, \"_selectable\", {\n        get: function () {\n            return this._selectionType === SelectionType.Multi || this._selectionType === SelectionType.Single;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Selection.prototype.destroy = function () {\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    Object.defineProperty(Selection.prototype, \"currentSingle\", {\n        get: function () {\n            return this._currentSingle;\n        },\n        set: function (value) {\n            var _this = this;\n            if (value === this._currentSingle) {\n                return;\n            }\n            this._currentSingle = value;\n            if (this._items.all && this._items.trackBy && value) {\n                var lookup = this._items.all.findIndex(function (maybe) { return maybe === value; });\n                this.prevSingleSelectionRef = this._items.trackBy(lookup, value);\n            }\n            this.emitChange();\n            this.debounce = true;\n            setTimeout(function () { return (_this.debounce = false); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Selection.prototype, \"current\", {\n        get: function () {\n            return this._current;\n        },\n        set: function (value) {\n            var _this = this;\n            this._current = value;\n            this.emitChange();\n            this.debounce = true;\n            setTimeout(function () { return (_this.debounce = false); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Selection.prototype.emitChange = function () {\n        if (this._selectionType === SelectionType.Single) {\n            this._change.next(this.currentSingle);\n        }\n        else if (this._selectionType === SelectionType.Multi) {\n            this._change.next(this.current);\n        }\n    };\n    Object.defineProperty(Selection.prototype, \"change\", {\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Selection.prototype.isSelected = function (item) {\n        if (this._selectionType === SelectionType.Single) {\n            return this.currentSingle === item;\n        }\n        else if (this._selectionType === SelectionType.Multi) {\n            return this.current.indexOf(item) >= 0;\n        }\n        return false;\n    };\n    Selection.prototype.selectItem = function (item) {\n        this.current.push(item);\n        if (this._items.trackBy) {\n            var lookup = this._items.all.findIndex(function (maybe) { return maybe === item; });\n            this.prevSelectionRefs.push(this._items.trackBy(lookup, item));\n        }\n    };\n    Selection.prototype.deselectItem = function (indexOfItem) {\n        this.current.splice(indexOfItem, 1);\n        if (this._items.trackBy && indexOfItem < this.prevSelectionRefs.length) {\n            this.prevSelectionRefs.splice(indexOfItem, 1);\n        }\n    };\n    Selection.prototype.setSelected = function (item, selected) {\n        switch (this._selectionType) {\n            case SelectionType.None:\n                break;\n            case SelectionType.Single:\n                break;\n            case SelectionType.Multi:\n                var index = this.current.indexOf(item);\n                if (index >= 0 && !selected) {\n                    this.deselectItem(index);\n                    this.emitChange();\n                }\n                else if (index < 0 && selected) {\n                    this.selectItem(item);\n                    this.emitChange();\n                }\n                break;\n            default:\n                break;\n        }\n    };\n    Selection.prototype.isAllSelected = function () {\n        var _this = this;\n        if (this._selectionType !== SelectionType.Multi || !this._items.displayed) {\n            return false;\n        }\n        var displayedItems = this._items.displayed;\n        var nbDisplayed = this._items.displayed.length;\n        if (nbDisplayed < 1) {\n            return false;\n        }\n        var temp = displayedItems.filter(function (item) { return _this.current.indexOf(item) > -1; });\n        return temp.length === displayedItems.length;\n    };\n    Selection.prototype.toggleAll = function () {\n        var _this = this;\n        if (this._selectionType === SelectionType.None || this._selectionType === SelectionType.Single) {\n            return;\n        }\n        if (this.isAllSelected()) {\n            this._items.displayed.forEach(function (item) {\n                var currentIndex = _this.current.indexOf(item);\n                if (currentIndex > -1) {\n                    _this.deselectItem(currentIndex);\n                }\n            });\n        }\n        else {\n            this._items.displayed.forEach(function (item) {\n                if (_this.current.indexOf(item) < 0) {\n                    _this.selectItem(item);\n                }\n            });\n        }\n        this.emitChange();\n    };\n    return Selection;\n}());\nvar nbRow = 0;\nvar ClrDatagridRow = /*@__PURE__*/ (function () {\n    function ClrDatagridRow(selection, rowActionService, globalExpandable, expand, hideableColumnService) {\n        this.selection = selection;\n        this.rowActionService = rowActionService;\n        this.globalExpandable = globalExpandable;\n        this.expand = expand;\n        this.hideableColumnService = hideableColumnService;\n        this.SELECTION_TYPE = SelectionType;\n        this._selected = false;\n        this.selectedChanged = new EventEmitter(false);\n        this.expandedChange = new EventEmitter(false);\n        this.id = \"clr-dg-row\" + nbRow++;\n        this.radioId = \"clr-dg-row-rd\" + nbRow++;\n    }\n    Object.defineProperty(ClrDatagridRow.prototype, \"selected\", {\n        get: function () {\n            if (this.selection.selectionType === SelectionType.None) {\n                return this._selected;\n            }\n            else {\n                return this.selection.isSelected(this.item);\n            }\n        },\n        set: function (value) {\n            if (this.selection.selectionType === SelectionType.None) {\n                this._selected = value;\n            }\n            else {\n                this.selection.setSelected(this.item, value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridRow.prototype.toggle = function (selected) {\n        if (selected === void 0) {\n            selected = !this.selected;\n        }\n        if (selected !== this.selected) {\n            this.selected = selected;\n            this.selectedChanged.emit(selected);\n        }\n    };\n    Object.defineProperty(ClrDatagridRow.prototype, \"expanded\", {\n        get: function () {\n            return this.expand.expanded;\n        },\n        set: function (value) {\n            this.expand.expanded = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridRow.prototype.toggleExpand = function () {\n        if (this.expand.expandable) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    };\n    ClrDatagridRow.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        var columnsList = this.hideableColumnService.getColumns();\n        this.updateCellsForColumns(columnsList);\n        this.dgCells.changes.subscribe(function (cellList) {\n            var columnList = _this.hideableColumnService.getColumns();\n            if (cellList.length === columnList.length) {\n                _this.updateCellsForColumns(columnList);\n            }\n        });\n        this.subscription = this.hideableColumnService.columnListChange.subscribe(function (columnList) {\n            if (columnList.length === _this.dgCells.length) {\n                _this.updateCellsForColumns(columnList);\n            }\n        });\n    };\n    ClrDatagridRow.prototype.updateCellsForColumns = function (columnList) {\n        this.dgCells.forEach(function (cell, index) {\n            var currentColumn = columnList[index];\n            if (currentColumn) {\n                cell.id = currentColumn.id;\n            }\n        });\n    };\n    ClrDatagridRow.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    return ClrDatagridRow;\n}());\nvar ColumnToggleButtonsService = /*@__PURE__*/ (function () {\n    function ColumnToggleButtonsService() {\n        this.buttons = null;\n        this.selectAllDisabled = false;\n        this._okButtonClicked = new Subject();\n        this._selectAllButtonClicked = new Subject();\n    }\n    Object.defineProperty(ColumnToggleButtonsService.prototype, \"okButtonClicked\", {\n        get: function () {\n            return this._okButtonClicked.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnToggleButtonsService.prototype, \"selectAllButtonClicked\", {\n        get: function () {\n            return this._selectAllButtonClicked.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnToggleButtonsService.prototype.buttonClicked = function (type) {\n        switch (type.toLowerCase()) {\n            case \"ok\":\n                this._okButtonClicked.next();\n                break;\n            case \"selectall\":\n                this._selectAllButtonClicked.next();\n                break;\n            default:\n                break;\n        }\n    };\n    return ColumnToggleButtonsService;\n}());\nvar StateProvider = /*@__PURE__*/ (function () {\n    function StateProvider(filters, sort, page, debouncer) {\n        var _this = this;\n        this.filters = filters;\n        this.sort = sort;\n        this.page = page;\n        this.debouncer = debouncer;\n        this.change = this.debouncer.change.pipe(map(function () { return _this.state; }));\n    }\n    Object.defineProperty(StateProvider.prototype, \"state\", {\n        get: function () {\n            var state$$1 = {};\n            if (this.page.size > 0) {\n                state$$1.page = { from: this.page.firstItem, to: this.page.lastItem, size: this.page.size };\n            }\n            if (this.sort.comparator) {\n                if (this.sort.comparator instanceof DatagridPropertyComparator) {\n                    state$$1.sort = { by: ((this.sort.comparator)).prop, reverse: this.sort.reverse };\n                }\n                else {\n                    state$$1.sort = { by: this.sort.comparator, reverse: this.sort.reverse };\n                }\n            }\n            var activeFilters = this.filters.getActiveFilters();\n            if (activeFilters.length > 0) {\n                state$$1.filters = [];\n                try {\n                    for (var activeFilters_1 = __values(activeFilters), activeFilters_1_1 = activeFilters_1.next(); !activeFilters_1_1.done; activeFilters_1_1 = activeFilters_1.next()) {\n                        var filter = activeFilters_1_1.value;\n                        if (filter instanceof DatagridStringFilterImpl) {\n                            var stringFilter = ((filter)).filterFn;\n                            if (stringFilter instanceof DatagridPropertyStringFilter) {\n                                state$$1.filters.push({\n                                    property: ((stringFilter)).prop,\n                                    value: ((filter)).value\n                                });\n                                continue;\n                            }\n                        }\n                        state$$1.filters.push(filter);\n                    }\n                }\n                catch (e_6_1) {\n                    e_6 = { error: e_6_1 };\n                }\n                finally {\n                    try {\n                        if (activeFilters_1_1 && !activeFilters_1_1.done && (_a = activeFilters_1.return))\n                            _a.call(activeFilters_1);\n                    }\n                    finally {\n                        if (e_6)\n                            throw e_6.error;\n                    }\n                }\n            }\n            return state$$1;\n            var e_6, _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return StateProvider;\n}());\nvar ClrDatagrid = /*@__PURE__*/ (function () {\n    function ClrDatagrid(columnService, organizer, items, expandableRows, selection, rowActionService, stateProvider) {\n        this.columnService = columnService;\n        this.organizer = organizer;\n        this.items = items;\n        this.expandableRows = expandableRows;\n        this.selection = selection;\n        this.rowActionService = rowActionService;\n        this.stateProvider = stateProvider;\n        this.SELECTION_TYPE = SelectionType;\n        this.refresh = new EventEmitter(false);\n        this.selectedChanged = new EventEmitter(false);\n        this.singleSelectedChanged = new EventEmitter(false);\n        this._subscriptions = [];\n    }\n    Object.defineProperty(ClrDatagrid.prototype, \"loading\", {\n        get: function () {\n            return this.items.loading;\n        },\n        set: function (value) {\n            this.items.loading = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagrid.prototype.dataChanged = function () {\n        this.items.refresh();\n    };\n    Object.defineProperty(ClrDatagrid.prototype, \"selected\", {\n        set: function (value) {\n            if (value) {\n                this.selection.selectionType = SelectionType.Multi;\n            }\n            else {\n                this.selection.selectionType = SelectionType.None;\n            }\n            this.selection.current = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagrid.prototype, \"singleSelected\", {\n        set: function (value) {\n            this.selection.selectionType = SelectionType.Single;\n            if (value) {\n                this.selection.currentSingle = value;\n            }\n            else if (this.selection.currentSingle) {\n                this.selection.currentSingle = null;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagrid.prototype, \"rowSelectionMode\", {\n        set: function (value) {\n            this.selection.rowSelectionMode = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagrid.prototype, \"rowSelectionModeDeprecated\", {\n        set: function (value) {\n            this.rowSelectionMode = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagrid.prototype, \"allSelected\", {\n        get: function () {\n            return this.selection.isAllSelected();\n        },\n        set: function (value) {\n            this.selection.toggleAll();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagrid.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._subscriptions.push(this.rows.changes.subscribe(function () {\n            if (!_this.items.smart) {\n                _this.items.all = _this.rows.map(function (row) { return row.item; });\n            }\n        }));\n        if (!this.items.smart) {\n            this.items.all = this.rows.map(function (row) { return row.item; });\n        }\n        this._subscriptions.push(this.columns.changes.subscribe(function (columns) {\n            _this.columnService.updateColumnList(_this.columns.map(function (col) { return col.hideable; }));\n        }));\n        this.columnService.updateColumnList(this.columns.map(function (col) { return col.hideable; }));\n    };\n    ClrDatagrid.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.refresh.emit(this.stateProvider.state);\n        this._subscriptions.push(this.stateProvider.change.subscribe(function (state$$1) { return _this.refresh.emit(state$$1); }));\n        this._subscriptions.push(this.selection.change.subscribe(function (s) {\n            if (_this.selection.selectionType === SelectionType.Single) {\n                _this.singleSelectedChanged.emit(s);\n            }\n            else if (_this.selection.selectionType === SelectionType.Multi) {\n                _this.selectedChanged.emit(s);\n            }\n        }));\n    };\n    ClrDatagrid.prototype.ngOnDestroy = function () {\n        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    ClrDatagrid.prototype.resize = function () {\n        this.organizer.resize();\n    };\n    return ClrDatagrid;\n}());\nvar ClrDatagridActionBar = /*@__PURE__*/ (function () {\n    function ClrDatagridActionBar() {\n    }\n    return ClrDatagridActionBar;\n}());\nvar ClrDatagridActionOverflow = /*@__PURE__*/ (function () {\n    function ClrDatagridActionOverflow(rowActionService) {\n        this.rowActionService = rowActionService;\n        this.anchorPoint = Point.RIGHT_CENTER;\n        this.popoverPoint = Point.LEFT_CENTER;\n        this._open = false;\n        this.openChanged = new EventEmitter(false);\n        this.rowActionService.register();\n    }\n    ClrDatagridActionOverflow.prototype.ngOnDestroy = function () {\n        this.rowActionService.unregister();\n    };\n    Object.defineProperty(ClrDatagridActionOverflow.prototype, \"open\", {\n        get: function () {\n            return this._open;\n        },\n        set: function (open) {\n            var boolOpen = !!open;\n            if (boolOpen !== this._open) {\n                this._open = boolOpen;\n                this.openChanged.emit(boolOpen);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridActionOverflow.prototype.toggle = function (event) {\n        this.openingEvent = event;\n        this.open = !this.open;\n    };\n    ClrDatagridActionOverflow.prototype.close = function (event) {\n        if (event === this.openingEvent) {\n            delete this.openingEvent;\n            return;\n        }\n        this.open = false;\n    };\n    return ClrDatagridActionOverflow;\n}());\nvar ClrDatagridColumnToggleButton = /*@__PURE__*/ (function () {\n    function ClrDatagridColumnToggleButton(toggleButtons) {\n        this.toggleButtons = toggleButtons;\n    }\n    ClrDatagridColumnToggleButton.prototype.getClasses = function () {\n        var classes = \"btn \";\n        if (this.isOk()) {\n            classes += \"btn-primary\";\n        }\n        else {\n            classes += \"btn-sm btn-link p6 text-uppercase\";\n        }\n        return classes;\n    };\n    ClrDatagridColumnToggleButton.prototype.isOk = function () {\n        return this.clrType === \"ok\";\n    };\n    ClrDatagridColumnToggleButton.prototype.click = function () {\n        this.toggleButtons.buttonClicked(this.clrType);\n    };\n    return ClrDatagridColumnToggleButton;\n}());\nvar ClrDatagridColumnToggleTitle = /*@__PURE__*/ (function () {\n    function ClrDatagridColumnToggleTitle() {\n    }\n    return ClrDatagridColumnToggleTitle;\n}());\nvar ClrDatagridColumnToggle = /*@__PURE__*/ (function () {\n    function ClrDatagridColumnToggle(hideableColumnService, columnToggleButtons) {\n        this.hideableColumnService = hideableColumnService;\n        this.columnToggleButtons = columnToggleButtons;\n        this.subscriptions = [];\n        this.anchorPoint = Point.TOP_LEFT;\n        this.popoverPoint = Point.LEFT_BOTTOM;\n        this.open = false;\n        this.columns = [];\n    }\n    Object.defineProperty(ClrDatagridColumnToggle.prototype, \"allColumnsVisible\", {\n        get: function () {\n            return this._allColumnsVisible;\n        },\n        set: function (value) {\n            this._allColumnsVisible = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridColumnToggle.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions.push(this.hideableColumnService.columnListChange.subscribe(function (columnList) {\n            _this.columns.length = 0;\n            _this.hideableColumnService.updateForLastVisibleColumn();\n            _this.allColumnsVisible = _this.hideableColumnService.checkForAllColumnsVisible;\n            _this.columnToggleButtons.selectAllDisabled = _this.allColumnsVisible;\n            columnList.forEach(function (col) {\n                if (col) {\n                    _this.columns.push(col);\n                }\n            });\n        }));\n        this.subscriptions.push(this.columnToggleButtons.okButtonClicked.subscribe(function () {\n            _this.toggleUI();\n        }));\n        this.subscriptions.push(this.columnToggleButtons.selectAllButtonClicked.subscribe(function () {\n            _this.selectAll();\n        }));\n    };\n    ClrDatagridColumnToggle.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    ClrDatagridColumnToggle.prototype.selectAll = function () {\n        this.hideableColumnService.showHiddenColumns();\n        this.allColumnsVisible = this.hideableColumnService.checkForAllColumnsVisible;\n    };\n    ClrDatagridColumnToggle.prototype.toggleColumn = function (event, column) {\n        column.hidden = !event;\n        this.allColumnsVisible = this.hideableColumnService.checkForAllColumnsVisible;\n        this.columnToggleButtons.selectAllDisabled = this.allColumnsVisible;\n        this.hideableColumnService.updateForLastVisibleColumn();\n    };\n    ClrDatagridColumnToggle.prototype.toggleUI = function () {\n        this.open = !this.open;\n    };\n    return ClrDatagridColumnToggle;\n}());\nvar DatagridDetailRegisterer = /*@__PURE__*/ (function () {\n    function DatagridDetailRegisterer(expandableRowsCount) {\n        this.expandableRowsCount = expandableRowsCount;\n        if (this.expandableRowsCount) {\n            this.expandableRowsCount.register();\n        }\n    }\n    DatagridDetailRegisterer.prototype.ngOnDestroy = function () {\n        if (this.expandableRowsCount) {\n            this.expandableRowsCount.unregister();\n        }\n    };\n    return DatagridDetailRegisterer;\n}());\nvar ClrDatagridFooter = /*@__PURE__*/ (function () {\n    function ClrDatagridFooter(selection, hideableColumnService, cdr) {\n        this.selection = selection;\n        this.hideableColumnService = hideableColumnService;\n        this.cdr = cdr;\n        this.subscriptions = [];\n        this.SELECTION_TYPE = SelectionType;\n    }\n    ClrDatagridFooter.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions.push(this.hideableColumnService.columnListChange.subscribe(function (change) {\n            var hiddenColumnsInSub = change.filter(function (col) { return col; });\n            if (hiddenColumnsInSub.length > 0) {\n                _this.activeToggler = true;\n            }\n        }));\n        var hiddenColumns = this.hideableColumnService.getColumns().filter(function (col) { return col; });\n        if (hiddenColumns.length > 0) {\n            this.activeToggler = true;\n        }\n    };\n    ClrDatagridFooter.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (sub) {\n            sub.unsubscribe();\n        });\n    };\n    return ClrDatagridFooter;\n}());\nvar DatagridHideableColumnModel = /*@__PURE__*/ (function () {\n    function DatagridHideableColumnModel(_template, _id, _hidden) {\n        if (_hidden === void 0) {\n            _hidden = false;\n        }\n        this._template = _template;\n        this._id = _id;\n        this._hidden = _hidden;\n        this.hiddenChangesState = new Subject();\n        this.lastVisibleColumn = false;\n    }\n    Object.defineProperty(DatagridHideableColumnModel.prototype, \"template\", {\n        get: function () {\n            return this._template;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridHideableColumnModel.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridHideableColumnModel.prototype, \"hidden\", {\n        get: function () {\n            return this._hidden;\n        },\n        set: function (value) {\n            if (this._hidden === value) {\n                return;\n            }\n            this._hidden = value;\n            this.hiddenChangesState.next(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatagridHideableColumnModel.prototype, \"hiddenChangeState\", {\n        get: function () {\n            return this.hiddenChangesState.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DatagridHideableColumnModel;\n}());\nvar ClrDatagridHideableColumn = /*@__PURE__*/ (function () {\n    function ClrDatagridHideableColumn(templateRef, viewContainerRef, dgColumn) {\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.dgColumn = dgColumn;\n        this.columnId = dgColumn.columnId;\n        this.viewContainerRef.createEmbeddedView(this.templateRef);\n        this.dgColumn.hideable = new DatagridHideableColumnModel(this.templateRef, this.columnId, this._hidden);\n    }\n    Object.defineProperty(ClrDatagridHideableColumn.prototype, \"clrDgHideableColumn\", {\n        set: function (value) {\n            this._hidden = (value && value.hidden) ? value.hidden : false;\n            if (this.dgColumn.hideable) {\n                this.dgColumn.hideable.hidden = (value && value.hidden) ? value.hidden : false;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrDatagridHideableColumn;\n}());\nvar ClrDatagridItemsTrackBy = /*@__PURE__*/ (function () {\n    function ClrDatagridItemsTrackBy(_items) {\n        this._items = _items;\n    }\n    Object.defineProperty(ClrDatagridItemsTrackBy.prototype, \"trackBy\", {\n        set: function (value) {\n            if (this._items) {\n                this._items.trackBy = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrDatagridItemsTrackBy;\n}());\nvar ClrDatagridPagination = /*@__PURE__*/ (function () {\n    function ClrDatagridPagination(page) {\n        this.page = page;\n        this.currentChanged = new EventEmitter(false);\n        page.size = 10;\n    }\n    ClrDatagridPagination.prototype.ngOnInit = function () {\n        var _this = this;\n        this._pageSubscription = this.page.change.subscribe(function (current) { return _this.currentChanged.emit(current); });\n    };\n    ClrDatagridPagination.prototype.ngOnDestroy = function () {\n        this.page.resetPageSize();\n        if (this._pageSubscription) {\n            this._pageSubscription.unsubscribe();\n        }\n    };\n    Object.defineProperty(ClrDatagridPagination.prototype, \"pageSize\", {\n        get: function () {\n            return this.page.size;\n        },\n        set: function (size) {\n            if (typeof size === \"number\") {\n                this.page.size = size;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridPagination.prototype, \"totalItems\", {\n        get: function () {\n            return this.page.totalItems;\n        },\n        set: function (total) {\n            if (typeof total === \"number\") {\n                this.page.totalItems = total;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridPagination.prototype, \"lastPage\", {\n        get: function () {\n            return this.page.last;\n        },\n        set: function (last) {\n            if (typeof last === \"number\") {\n                this.page.last = last;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridPagination.prototype, \"currentPage\", {\n        get: function () {\n            return this.page.current;\n        },\n        set: function (page) {\n            if (typeof page === \"number\") {\n                this.page.current = page;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridPagination.prototype.previous = function () {\n        this.page.previous();\n    };\n    ClrDatagridPagination.prototype.next = function () {\n        this.page.next();\n    };\n    Object.defineProperty(ClrDatagridPagination.prototype, \"firstItem\", {\n        get: function () {\n            return this.page.firstItem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridPagination.prototype, \"lastItem\", {\n        get: function () {\n            return this.page.lastItem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrDatagridPagination.prototype, \"middlePages\", {\n        get: function () {\n            var middlePages = [];\n            if (this.page.current > 1) {\n                middlePages.push(this.page.current - 1);\n            }\n            middlePages.push(this.page.current);\n            if (this.page.current < this.page.last) {\n                middlePages.push(this.page.current + 1);\n            }\n            return middlePages;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrDatagridPagination;\n}());\nvar ClrDatagridRowDetail = /*@__PURE__*/ (function () {\n    function ClrDatagridRowDetail(selection, rowActionService, expand, hideableColumnService) {\n        this.selection = selection;\n        this.rowActionService = rowActionService;\n        this.expand = expand;\n        this.hideableColumnService = hideableColumnService;\n        this.SELECTION_TYPE = SelectionType;\n        this._subscriptions = [];\n    }\n    Object.defineProperty(ClrDatagridRowDetail.prototype, \"replace\", {\n        get: function () {\n            return this.expand.replace;\n        },\n        set: function (value) {\n            this.expand.replace = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDatagridRowDetail.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        var columnsList = this.hideableColumnService.getColumns();\n        this.updateCellsForColumns(columnsList);\n        this._subscriptions.push(this.cells.changes.subscribe(function (cellList) {\n            var columnList = _this.hideableColumnService.getColumns();\n            if (cellList.length === columnList.length) {\n                _this.updateCellsForColumns(columnList);\n            }\n        }));\n        this._subscriptions.push(this.hideableColumnService.columnListChange.subscribe(function (columnList) {\n            if (columnList.length === _this.cells.length) {\n                _this.updateCellsForColumns(columnList);\n            }\n        }));\n    };\n    ClrDatagridRowDetail.prototype.updateCellsForColumns = function (columnList) {\n        this.cells.forEach(function (cell, index) {\n            var currentColumn = columnList[index];\n            if (currentColumn) {\n                cell.id = currentColumn.id;\n            }\n        });\n    };\n    ClrDatagridRowDetail.prototype.ngOnDestroy = function () {\n        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    return ClrDatagridRowDetail;\n}());\nvar DatagridBodyRenderer = /*@__PURE__*/ (function () {\n    function DatagridBodyRenderer(el, organizer, domAdapter) {\n        var _this = this;\n        this.el = el;\n        this.organizer = organizer;\n        this.domAdapter = domAdapter;\n        this.subscription = organizer.scrollbar.subscribe(function () { return _this.computeScrollbarWidth(); });\n    }\n    DatagridBodyRenderer.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    DatagridBodyRenderer.prototype.computeScrollbarWidth = function () {\n        this.organizer.scrollbarWidth.next(this.domAdapter.scrollBarWidth(this.el.nativeElement));\n    };\n    return DatagridBodyRenderer;\n}());\nvar NO_LAYOUT_CLASS = \"datagrid-no-layout\";\nvar COMPUTE_WIDTH_CLASS = \"datagrid-computing-columns-width\";\nvar STRICT_WIDTH_CLASS = \"datagrid-fixed-width\";\nvar DatagridCellRenderer = /*@__PURE__*/ (function () {\n    function DatagridCellRenderer(el, renderer, organizer) {\n        var _this = this;\n        this.el = el;\n        this.renderer = renderer;\n        this.subscription = organizer.clearWidths.subscribe(function () { return _this.clearWidth(); });\n    }\n    DatagridCellRenderer.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    DatagridCellRenderer.prototype.clearWidth = function () {\n        this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        this.renderer.setStyle(this.el.nativeElement, \"width\", null);\n    };\n    DatagridCellRenderer.prototype.setWidth = function (strict, value) {\n        if (strict) {\n            this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        }\n        else {\n            this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        }\n        this.renderer.setStyle(this.el.nativeElement, \"width\", value + \"px\");\n    };\n    return DatagridCellRenderer;\n}());\nvar DatagridColumnResizer = /*@__PURE__*/ (function () {\n    function DatagridColumnResizer(el, renderer, organizer, domAdapter, dragDispatcher) {\n        this.renderer = renderer;\n        this.organizer = organizer;\n        this.domAdapter = domAdapter;\n        this.dragDispatcher = dragDispatcher;\n        this.columnResizeBy = 0;\n        this.dragWithinMinWidth = false;\n        this.resizeEmitter = new EventEmitter();\n        this.subscriptions = [];\n        this.columnEl = el.nativeElement;\n    }\n    DatagridColumnResizer.prototype.ngOnDestroy = function () {\n        this.dragDispatcher.destroy();\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    DatagridColumnResizer.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.handleTrackerEl = this.dragDispatcher.handleTrackerRef.nativeElement;\n        this.dragDispatcher.addDragListener();\n        this.subscriptions.push(this.dragDispatcher.onDragStart.subscribe(function () { return _this.dragStartHandler(); }));\n        this.subscriptions.push(this.dragDispatcher.onDragMove.subscribe(function ($event) { return _this.dragMoveHandler($event); }));\n        this.subscriptions.push(this.dragDispatcher.onDragEnd.subscribe(function () { return _this.dragEndHandler(); }));\n    };\n    DatagridColumnResizer.prototype.dragStartHandler = function () {\n        if (!this.columnMinWidth) {\n            this.columnMinWidth = this.domAdapter.minWidth(this.columnEl);\n        }\n        this.renderer.setStyle(this.handleTrackerEl, \"display\", \"block\");\n        this.renderer.setStyle(document.body, \"cursor\", \"col-resize\");\n        this.dragDistancePositionX = 0;\n        this.columnRectWidth = this.domAdapter.clientRectWidth(this.columnEl);\n        this.pageStartPositionX = this.domAdapter.clientRectRight(this.columnEl);\n    };\n    DatagridColumnResizer.prototype.dragMoveHandler = function (moveEvent) {\n        var pageMovePosition = moveEvent.pageX || moveEvent.changedTouches[0].pageX;\n        this.dragDistancePositionX = this.getPositionWithinMax(pageMovePosition - this.pageStartPositionX);\n        this.renderer.setStyle(this.handleTrackerEl, \"right\", -1 * this.dragDistancePositionX + \"px\");\n    };\n    DatagridColumnResizer.prototype.dragEndHandler = function () {\n        this.renderer.setStyle(this.handleTrackerEl, \"right\", \"0px\");\n        this.renderer.setStyle(this.handleTrackerEl, \"display\", \"none\");\n        this.renderer.setStyle(document.body, \"cursor\", \"auto\");\n        if (this.dragDistancePositionX) {\n            this.columnResizeBy = this.dragDistancePositionX;\n            this.resizeEmitter.emit(this.columnRectWidth + this.columnResizeBy);\n            this.organizer.resize();\n        }\n    };\n    DatagridColumnResizer.prototype.getPositionWithinMax = function (draggedDistance) {\n        if (draggedDistance < 0) {\n            if (Math.abs(draggedDistance) < this.columnRectWidth - this.columnMinWidth) {\n                if (this.dragWithinMinWidth) {\n                    this.dragWithinMinWidth = false;\n                    this.renderer.removeClass(this.handleTrackerEl, \"exceeded-max\");\n                }\n                return draggedDistance;\n            }\n            else {\n                if (!this.dragWithinMinWidth) {\n                    this.dragWithinMinWidth = true;\n                    this.renderer.addClass(this.handleTrackerEl, \"exceeded-max\");\n                }\n                return this.columnMinWidth - this.columnRectWidth;\n            }\n        }\n        else {\n            if (this.dragWithinMinWidth) {\n                this.dragWithinMinWidth = false;\n                this.renderer.removeClass(this.handleTrackerEl, \"exceeded-max\");\n            }\n            return draggedDistance;\n        }\n    };\n    return DatagridColumnResizer;\n}());\nvar DatagridHeadRenderer = /*@__PURE__*/ (function () {\n    function DatagridHeadRenderer(el, renderer, organizer) {\n        var _this = this;\n        this.el = el;\n        this.renderer = renderer;\n        this.subscription = organizer.scrollbarWidth.subscribe(function (width) { return _this.accountForScrollbar(width); });\n    }\n    DatagridHeadRenderer.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    DatagridHeadRenderer.prototype.accountForScrollbar = function (width) {\n        this.renderer.setStyle(this.el.nativeElement, \"padding-right\", width + \"px\");\n    };\n    return DatagridHeadRenderer;\n}());\nvar DatagridHeaderRenderer = /*@__PURE__*/ (function () {\n    function DatagridHeaderRenderer(el, renderer, organizer, domAdapter, columnResizer) {\n        var _this = this;\n        this.el = el;\n        this.renderer = renderer;\n        this.domAdapter = domAdapter;\n        this.columnResizer = columnResizer;\n        this.subscriptions = [];\n        this.widthSet = false;\n        this.subscriptions.push(organizer.clearWidths.subscribe(function () { return _this.clearWidth(); }));\n        this.subscriptions.push(organizer.detectStrictWidths.subscribe(function () { return _this.detectStrictWidth(); }));\n    }\n    DatagridHeaderRenderer.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    DatagridHeaderRenderer.prototype.clearWidth = function () {\n        if (this.widthSet && !this.columnResizer.columnResizeBy) {\n            this.renderer.setStyle(this.el.nativeElement, \"width\", null);\n        }\n    };\n    DatagridHeaderRenderer.prototype.detectStrictWidth = function () {\n        if (this.columnResizer.columnResizeBy) {\n            this.strictWidth = this.columnResizer.columnRectWidth + this.columnResizer.columnResizeBy;\n        }\n        else {\n            this.strictWidth = this.domAdapter.userDefinedWidth(this.el.nativeElement);\n        }\n    };\n    DatagridHeaderRenderer.prototype.computeWidth = function () {\n        var width = this.strictWidth;\n        if (!width) {\n            width = this.domAdapter.scrollWidth(this.el.nativeElement);\n        }\n        return width;\n    };\n    DatagridHeaderRenderer.prototype.setWidth = function (width) {\n        if (this.strictWidth) {\n            if (this.columnResizer.columnResizeBy) {\n                this.renderer.setStyle(this.el.nativeElement, \"width\", width + \"px\");\n                this.columnResizer.columnResizeBy = 0;\n                this.widthSet = false;\n            }\n            this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n            return;\n        }\n        this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        this.renderer.setStyle(this.el.nativeElement, \"width\", width + \"px\");\n        this.widthSet = true;\n    };\n    return DatagridHeaderRenderer;\n}());\nvar NoopDomAdapter = /*@__PURE__*/ (function () {\n    function NoopDomAdapter() {\n    }\n    NoopDomAdapter.prototype.userDefinedWidth = function (element) {\n        return 0;\n    };\n    NoopDomAdapter.prototype.scrollBarWidth = function (element) {\n        return 0;\n    };\n    NoopDomAdapter.prototype.scrollWidth = function (element) {\n        return 0;\n    };\n    NoopDomAdapter.prototype.computedHeight = function (element) {\n        return 0;\n    };\n    NoopDomAdapter.prototype.clientRectHeight = function (element) {\n        return 0;\n    };\n    NoopDomAdapter.prototype.clientRectRight = function (element) {\n        return 0;\n    };\n    NoopDomAdapter.prototype.clientRectWidth = function (element) {\n        return 0;\n    };\n    NoopDomAdapter.prototype.minWidth = function (element) {\n        return 0;\n    };\n    NoopDomAdapter.prototype.focus = function (element) { };\n    return NoopDomAdapter;\n}());\nvar domAdapterFactory = function (platformId) {\n    if (isPlatformBrowser(platformId)) {\n        return new DomAdapter();\n    }\n    else {\n        return new NoopDomAdapter();\n    }\n};\nvar DatagridMainRenderer = /*@__PURE__*/ (function () {\n    function DatagridMainRenderer(organizer, items, page, domAdapter, el, renderer) {\n        var _this = this;\n        this.organizer = organizer;\n        this.items = items;\n        this.page = page;\n        this.domAdapter = domAdapter;\n        this.el = el;\n        this.renderer = renderer;\n        this._heightSet = false;\n        this._subscriptions = [];\n        this.columnsSizesStable = false;\n        this.shouldStabilizeColumns = true;\n        this._subscriptions.push(organizer.computeWidths.subscribe(function () { return _this.computeHeadersWidth(); }));\n        this._subscriptions.push(this.page.sizeChange.subscribe(function () {\n            if (_this._heightSet) {\n                _this.resetDatagridHeight();\n            }\n        }));\n        this._subscriptions.push(this.items.change.subscribe(function () { return _this.shouldStabilizeColumns = true; }));\n    }\n    DatagridMainRenderer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._subscriptions.push(this.headers.changes.subscribe(function () {\n            _this.columnsSizesStable = false;\n            _this.stabilizeColumns();\n        }));\n    };\n    DatagridMainRenderer.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        if (this.shouldStabilizeColumns) {\n            this.stabilizeColumns();\n        }\n        if (this.shouldComputeHeight()) {\n            setTimeout(function () {\n                _this.computeDatagridHeight();\n            });\n        }\n    };\n    DatagridMainRenderer.prototype.shouldComputeHeight = function () {\n        if (!this._heightSet && this.page.size > 0) {\n            if (this.items.displayed.length === this.page.size) {\n                return true;\n            }\n        }\n        return false;\n    };\n    DatagridMainRenderer.prototype.computeDatagridHeight = function () {\n        var value = this.domAdapter.clientRectHeight(this.el.nativeElement);\n        this.renderer.setStyle(this.el.nativeElement, \"height\", value + \"px\");\n        this._heightSet = true;\n    };\n    DatagridMainRenderer.prototype.resetDatagridHeight = function () {\n        this.renderer.setStyle(this.el.nativeElement, \"height\", \"\");\n        this._heightSet = false;\n    };\n    DatagridMainRenderer.prototype.ngOnDestroy = function () {\n        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    DatagridMainRenderer.prototype.computeHeadersWidth = function () {\n        var _this = this;\n        var nbColumns = this.headers.length;\n        var allStrict = true;\n        this.headers.forEach(function (header, index) {\n            if (!header.strictWidth) {\n                allStrict = false;\n            }\n            if (nbColumns === index + 1 && allStrict) {\n                delete header.strictWidth;\n            }\n            _this.organizer.widths[index] = { px: header.computeWidth(), strict: !!header.strictWidth };\n        });\n        this.headers.forEach(function (header, index) { return header.setWidth(_this.organizer.widths[index].px); });\n    };\n    DatagridMainRenderer.prototype.stabilizeColumns = function () {\n        var _this = this;\n        this.shouldStabilizeColumns = false;\n        if (this.columnsSizesStable) {\n            setTimeout(function () {\n                _this.organizer.scrollbar.next();\n            });\n            return;\n        }\n        if (this.items.displayed.length > 0) {\n            this.organizer.resize();\n            this.columnsSizesStable = true;\n        }\n    };\n    return DatagridMainRenderer;\n}());\nvar DatagridRowRenderer = /*@__PURE__*/ (function () {\n    function DatagridRowRenderer(organizer) {\n        var _this = this;\n        this.organizer = organizer;\n        this.subscription = organizer.alignColumns.subscribe(function () { return _this.setWidths(); });\n    }\n    DatagridRowRenderer.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    DatagridRowRenderer.prototype.setWidths = function () {\n        var _this = this;\n        if (this.organizer.widths.length !== this.cells.length) {\n            return;\n        }\n        this.cells.forEach(function (cell, index) {\n            var width = _this.organizer.widths[index];\n            cell.setWidth(width.strict, width.px);\n        });\n    };\n    DatagridRowRenderer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.cells.changes.subscribe(function () {\n            _this.setWidths();\n        });\n    };\n    DatagridRowRenderer.prototype.ngAfterViewInit = function () {\n        this.setWidths();\n    };\n    return DatagridRowRenderer;\n}());\nvar DatagridTableRenderer = /*@__PURE__*/ (function () {\n    function DatagridTableRenderer(el, renderer, organizer) {\n        var _this = this;\n        this.el = el;\n        this.renderer = renderer;\n        this.subscriptions = [];\n        this.subscriptions.push(organizer.tableMode.subscribe(function (on) { return _this.tableMode(on); }));\n        this.subscriptions.push(organizer.noLayout.subscribe(function (on) { return _this.noLayout(on); }));\n    }\n    DatagridTableRenderer.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    DatagridTableRenderer.prototype.ngAfterViewInit = function () {\n        this.outsideContainer.createEmbeddedView(this.projected);\n    };\n    DatagridTableRenderer.prototype.tableMode = function (on) {\n        if (on) {\n            this.insideContainer.insert(this.outsideContainer.detach(0), 0);\n            this.renderer.addClass(this.el.nativeElement, COMPUTE_WIDTH_CLASS);\n        }\n        else {\n            this.renderer.removeClass(this.el.nativeElement, COMPUTE_WIDTH_CLASS);\n            this.outsideContainer.insert(this.insideContainer.detach(0), 0);\n        }\n    };\n    DatagridTableRenderer.prototype.noLayout = function (on) {\n        if (on) {\n            this.renderer.addClass(this.el.nativeElement, NO_LAYOUT_CLASS);\n        }\n        else {\n            this.renderer.removeClass(this.el.nativeElement, NO_LAYOUT_CLASS);\n        }\n    };\n    return DatagridTableRenderer;\n}());\nvar CLR_DATAGRID_DIRECTIVES = [\n    ClrDatagrid, ClrDatagridActionBar, ClrDatagridActionOverflow, ClrDatagridColumn, ClrDatagridColumnToggle,\n    ClrDatagridHideableColumn, ClrDatagridFilter, ClrDatagridItems, ClrDatagridItemsTrackBy, ClrDatagridRow,\n    ClrDatagridRowDetail, DatagridDetailRegisterer, ClrDatagridCell, ClrDatagridFooter, ClrDatagridPagination,\n    ClrDatagridPlaceholder, ClrDatagridColumnToggleButton, ClrDatagridColumnToggleTitle,\n    DatagridMainRenderer, DatagridTableRenderer, DatagridHeadRenderer, DatagridHeaderRenderer, DatagridBodyRenderer,\n    DatagridColumnResizer, DatagridRowRenderer, DatagridCellRenderer,\n    DatagridWillyWonka, ActionableOompaLoompa, ExpandableOompaLoompa,\n    DatagridRowExpandAnimation,\n    DatagridStringFilter\n];\nvar ClrDatagridModule = /*@__PURE__*/ (function () {\n    function ClrDatagridModule() {\n    }\n    return ClrDatagridModule;\n}());\nvar Datagrid = ClrDatagrid;\nvar DatagridActionBar = ClrDatagridActionBar;\nvar DatagridActionOverflow = ClrDatagridActionOverflow;\nvar DatagridColumn = ClrDatagridColumn;\nvar DatagridColumnToggle = ClrDatagridColumnToggle;\nvar DatagridHideableColumnDirective = ClrDatagridHideableColumn;\nvar DatagridFilter = ClrDatagridFilter;\nvar DatagridItems = ClrDatagridItems;\nvar DatagridRow = ClrDatagridRow;\nvar DatagridRowDetail = ClrDatagridRowDetail;\nvar DatagridCell = ClrDatagridCell;\nvar DatagridFooter = ClrDatagridFooter;\nvar DatagridPagination = ClrDatagridPagination;\nvar DatagridPlaceholder = ClrDatagridPlaceholder;\nvar SortOrder = {\n    Unsorted: 0,\n    Asc: 1,\n    Desc: -1,\n};\nSortOrder[SortOrder.Unsorted] = \"Unsorted\";\nSortOrder[SortOrder.Asc] = \"Asc\";\nSortOrder[SortOrder.Desc] = \"Desc\";\nvar DATAGRID_DIRECTIVES = CLR_DATAGRID_DIRECTIVES;\nvar ClrStackBlock = /*@__PURE__*/ (function () {\n    function ClrStackBlock(parent) {\n        this.parent = parent;\n        this.expanded = false;\n        this.expandedChange = new EventEmitter(false);\n        this.expandable = false;\n        this.focused = false;\n        this._changedChildren = 0;\n        this._fullyInitialized = false;\n        this._changed = false;\n        if (parent) {\n            parent.addChild();\n        }\n    }\n    Object.defineProperty(ClrStackBlock.prototype, \"getChangedValue\", {\n        get: function () {\n            return this._changed || (this._changedChildren > 0 && !this.expanded);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrStackBlock.prototype, \"setChangedValue\", {\n        set: function (value) {\n            this._changed = value;\n            if (this.parent && this._fullyInitialized) {\n                if (value) {\n                    this.parent._changedChildren++;\n                }\n                else {\n                    this.parent._changedChildren--;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrStackBlock.prototype.ngOnInit = function () {\n        this._fullyInitialized = true;\n    };\n    ClrStackBlock.prototype.addChild = function () {\n        this.expandable = true;\n    };\n    ClrStackBlock.prototype.toggleExpand = function () {\n        if (this.expandable) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    };\n    Object.defineProperty(ClrStackBlock.prototype, \"caretDirection\", {\n        get: function () {\n            return this.expanded ? \"down\" : \"right\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrStackBlock.prototype, \"role\", {\n        get: function () {\n            return this.expandable ? \"button\" : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrStackBlock.prototype, \"tabIndex\", {\n        get: function () {\n            return this.expandable ? \"0\" : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrStackBlock.prototype, \"onStackLabelFocus\", {\n        get: function () {\n            return this.expandable && !this.expanded && this.focused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrStackBlock.prototype, \"ariaExpanded\", {\n        get: function () {\n            if (!this.expandable) {\n                return null;\n            }\n            else {\n                return this.expanded ? \"true\" : \"false\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrStackBlock;\n}());\nvar ClrStackView = /*@__PURE__*/ (function () {\n    function ClrStackView() {\n        this.editable = false;\n        this.save = new EventEmitter(false);\n        this._editMode = false;\n        this.editingChange = new EventEmitter(false);\n    }\n    Object.defineProperty(ClrStackView.prototype, \"editing\", {\n        get: function () {\n            return this.editable && this._editMode;\n        },\n        set: function (value) {\n            if (this.editable) {\n                this._editMode = value;\n                this.editingChange.emit(value);\n                if (!value) {\n                    this.save.emit(null);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrStackView;\n}());\nvar ClrStackHeader = /*@__PURE__*/ (function () {\n    function ClrStackHeader(stackView) {\n        this.stackView = stackView;\n    }\n    return ClrStackHeader;\n}());\nvar StackControl = /*@__PURE__*/ (function () {\n    function StackControl(stackView) {\n        var _this = this;\n        this.stackView = stackView;\n        this.modelChange = new EventEmitter(false);\n        this.stackView.editable = true;\n        this.stackView.editingChange.subscribe(function (editing) {\n            if (!editing) {\n                _this.modelChange.emit(_this.model);\n            }\n        });\n    }\n    return StackControl;\n}());\nvar ClrStackInput = /*@__PURE__*/ (function (_super) {\n    __extends(ClrStackInput, _super);\n    function ClrStackInput(stackView) {\n        var _this = _super.call(this, stackView) || this;\n        _this.stackView = stackView;\n        _this.type = \"text\";\n        return _this;\n    }\n    return ClrStackInput;\n}(StackControl));\nvar ClrStackSelect = /*@__PURE__*/ (function (_super) {\n    __extends(ClrStackSelect, _super);\n    function ClrStackSelect(stackView) {\n        var _this = _super.call(this, stackView) || this;\n        _this.stackView = stackView;\n        return _this;\n    }\n    return ClrStackSelect;\n}(StackControl));\nvar ClrStackViewCustomTags = /*@__PURE__*/ (function () {\n    function ClrStackViewCustomTags() {\n    }\n    return ClrStackViewCustomTags;\n}());\nvar CLR_STACK_VIEW_DIRECTIVES = [\n    ClrStackView, ClrStackHeader, ClrStackBlock, ClrStackViewCustomTags,\n    ClrStackInput, ClrStackSelect\n];\nvar ClrStackViewModule = /*@__PURE__*/ (function () {\n    function ClrStackViewModule() {\n    }\n    return ClrStackViewModule;\n}());\nvar StackView = ClrStackView;\nvar StackHeader = ClrStackHeader;\nvar StackBlock = ClrStackBlock;\nvar StackViewCustomTags = ClrStackViewCustomTags;\nvar StackInput = ClrStackInput;\nvar StackSelect = ClrStackSelect;\nvar STACK_VIEW_DIRECTIVES = CLR_STACK_VIEW_DIRECTIVES;\nvar NB_INSTANCES = 0;\nvar UNIQUE_ID = new InjectionToken(\"UNIQUE_ID\");\nfunction uniqueIdFactory() {\n    return \"clr-id-\" + (NB_INSTANCES++);\n}\nvar UNIQUE_ID_PROVIDER = {\n    provide: UNIQUE_ID,\n    useFactory: uniqueIdFactory\n};\nvar AbstractTreeSelection = /*@__PURE__*/ (function () {\n    function AbstractTreeSelection(parent) {\n        this.parent = parent;\n        this._selected = false;\n        this._indeterminate = false;\n    }\n    Object.defineProperty(AbstractTreeSelection.prototype, \"selected\", {\n        get: function () {\n            return this._selected;\n        },\n        set: function (value) {\n            this._selected = value;\n            this.indeterminate = false;\n            this.children.forEach(function (child) { return child.parentChanged(value); });\n            if (this.parent) {\n                this.parent.childChanged();\n            }\n            this.selectedChanged();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractTreeSelection.prototype, \"indeterminate\", {\n        get: function () {\n            return this._indeterminate;\n        },\n        set: function (value) {\n            value = !!value;\n            if (this._indeterminate !== value) {\n                this._indeterminate = value;\n                this.indeterminateChanged();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractTreeSelection.prototype.childChanged = function () {\n        var oneSelectedChild = false;\n        var previousSelectedValue = this._selected;\n        var previousIndeterminateValue = this._indeterminate;\n        this._selected = true;\n        this._indeterminate = false;\n        try {\n            for (var _a = __values(this.children), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var child = _b.value;\n                if (child.indeterminate) {\n                    this._selected = false;\n                    this._indeterminate = true;\n                    break;\n                }\n                if (child.selected) {\n                    oneSelectedChild = true;\n                    if (this._selected === false) {\n                        this._indeterminate = true;\n                        break;\n                    }\n                }\n                else {\n                    this._selected = false;\n                    if (oneSelectedChild) {\n                        this._indeterminate = true;\n                        break;\n                    }\n                }\n            }\n        }\n        catch (e_7_1) {\n            e_7 = { error: e_7_1 };\n        }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return))\n                    _c.call(_a);\n            }\n            finally {\n                if (e_7)\n                    throw e_7.error;\n            }\n        }\n        if (this.parent &&\n            (this._selected !== previousSelectedValue || this._indeterminate !== previousIndeterminateValue)) {\n            this.parent.childChanged();\n        }\n        if (this.selected !== previousSelectedValue) {\n            this.selectedChanged();\n        }\n        if (this.indeterminate !== previousIndeterminateValue) {\n            this.indeterminateChanged();\n        }\n        var e_7, _c;\n    };\n    AbstractTreeSelection.prototype.parentChanged = function (selected) {\n        if (selected && !this.selected) {\n            this._selected = true;\n            this.indeterminate = false;\n            this.children.forEach(function (child) { return child.parentChanged(true); });\n            this.selectedChanged();\n        }\n        if (!selected && (this.selected || this.indeterminate)) {\n            this._selected = false;\n            this.indeterminate = false;\n            this.children.forEach(function (child) { return child.parentChanged(false); });\n            this.selectedChanged();\n        }\n    };\n    return AbstractTreeSelection;\n}());\nvar TreeSelectionService = /*@__PURE__*/ (function () {\n    function TreeSelectionService() {\n        this.selectable = false;\n    }\n    return TreeSelectionService;\n}());\nfunction clrTreeSelectionProviderFactory(existing) {\n    return existing || new TreeSelectionService();\n}\nvar ɵ0$1 = clrTreeSelectionProviderFactory;\nvar ClrTreeNode = /*@__PURE__*/ (function (_super) {\n    __extends(ClrTreeNode, _super);\n    function ClrTreeNode(nodeExpand, parent, treeSelectionService, nodeId) {\n        var _this = _super.call(this, parent) || this;\n        _this.nodeExpand = nodeExpand;\n        _this.parent = parent;\n        _this.treeSelectionService = treeSelectionService;\n        _this.nodeId = nodeId;\n        _this._children = [];\n        _this.nodeSelectedChange = new EventEmitter(true);\n        _this.nodeIndeterminateChanged = new EventEmitter(true);\n        if (_this.parent) {\n            _this.parent.register(_this);\n        }\n        return _this;\n    }\n    Object.defineProperty(ClrTreeNode.prototype, \"children\", {\n        get: function () {\n            return this._children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrTreeNode.prototype.checkIfChildNodeRegistered = function (node) {\n        return this.children.indexOf(node) > -1;\n    };\n    ClrTreeNode.prototype.register = function (node) {\n        if (!this.checkIfChildNodeRegistered(node)) {\n            this.children.push(node);\n            if (this.selectable) {\n                if (this.selected) {\n                    node.parentChanged(this.selected);\n                }\n            }\n        }\n    };\n    ClrTreeNode.prototype.unregister = function (node) {\n        var index = this.children.indexOf(node);\n        if (index > -1) {\n            this.children.splice(index, 1);\n        }\n    };\n    ClrTreeNode.prototype.activateSelection = function () {\n        if (this.treeSelectionService && !this.treeSelectionService.selectable) {\n            this.treeSelectionService.selectable = true;\n        }\n    };\n    Object.defineProperty(ClrTreeNode.prototype, \"nodeSelected\", {\n        set: function (value) {\n            this.activateSelection();\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (this.selected !== value) {\n                this.selected = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrTreeNode.prototype.selectedChanged = function () {\n        this.nodeSelectedChange.emit(this.selected);\n    };\n    Object.defineProperty(ClrTreeNode.prototype, \"selectable\", {\n        get: function () {\n            if (this.treeSelectionService) {\n                return this.treeSelectionService.selectable;\n            }\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTreeNode.prototype, \"nodeIndeterminate\", {\n        set: function (value) {\n            this.indeterminate = value;\n            this.activateSelection();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrTreeNode.prototype.indeterminateChanged = function () {\n        this.nodeIndeterminateChanged.emit(this.indeterminate);\n    };\n    ClrTreeNode.prototype.toggleExpand = function () {\n        this.nodeExpand.expanded = !this.nodeExpand.expanded;\n    };\n    Object.defineProperty(ClrTreeNode.prototype, \"caretDirection\", {\n        get: function () {\n            return this.nodeExpand.expanded ? \"down\" : \"right\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTreeNode.prototype, \"expanded\", {\n        get: function () {\n            return this.nodeExpand.expanded;\n        },\n        set: function (value) {\n            value = !!value;\n            if (this.nodeExpand.expanded !== value) {\n                this.nodeExpand.expanded = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTreeNode.prototype, \"state\", {\n        get: function () {\n            return this.expanded && !this.nodeExpand.loading ? \"expanded\" : \"collapsed\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTreeNode.prototype, \"treeNodeRole\", {\n        get: function () {\n            return this.parent ? \"treeitem\" : \"tree\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTreeNode.prototype, \"rootAriaMultiSelectable\", {\n        get: function () {\n            if (this.parent || !this.selectable) {\n                return null;\n            }\n            else {\n                return true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTreeNode.prototype, \"ariaSelected\", {\n        get: function () {\n            return this.selectable ? this.selected : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTreeNode.prototype, \"ariaTreeNodeChildrenRole\", {\n        get: function () {\n            return this.children.length > 0 ? \"group\" : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrTreeNode.prototype.ngOnDestroy = function () {\n        if (this.parent) {\n            this.parent.unregister(this);\n        }\n    };\n    return ClrTreeNode;\n}(AbstractTreeSelection));\nvar CLR_TREE_VIEW_DIRECTIVES = [ClrTreeNode];\nvar ClrTreeViewModule = /*@__PURE__*/ (function () {\n    function ClrTreeViewModule() {\n    }\n    return ClrTreeViewModule;\n}());\nvar TreeNode = ClrTreeNode;\nvar TREE_VIEW_DIRECTIVES = CLR_TREE_VIEW_DIRECTIVES;\nvar ClrDataModule = /*@__PURE__*/ (function () {\n    function ClrDataModule() {\n    }\n    return ClrDataModule;\n}());\nvar RootDropdownService = /*@__PURE__*/ (function () {\n    function RootDropdownService() {\n        this._changes = new Subject();\n    }\n    Object.defineProperty(RootDropdownService.prototype, \"changes\", {\n        get: function () {\n            return this._changes.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RootDropdownService.prototype.closeMenus = function () {\n        this._changes.next(false);\n    };\n    return RootDropdownService;\n}());\nfunction clrRootDropdownFactory(existing) {\n    return existing || new RootDropdownService();\n}\nvar ROOT_DROPDOWN_PROVIDER = {\n    provide: RootDropdownService,\n    useFactory: clrRootDropdownFactory,\n    deps: [[new Optional(), new SkipSelf(), RootDropdownService]]\n};\nvar ClrDropdown = /*@__PURE__*/ (function () {\n    function ClrDropdown(parent, ifOpenService, dropdownService) {\n        var _this = this;\n        this.parent = parent;\n        this.ifOpenService = ifOpenService;\n        this.isMenuClosable = true;\n        this._subscription = dropdownService.changes.subscribe(function (value) { return _this.ifOpenService.open = value; });\n    }\n    ClrDropdown.prototype.ngOnDestroy = function () {\n        this._subscription.unsubscribe();\n    };\n    return ClrDropdown;\n}());\nvar ClrDropdownItem = /*@__PURE__*/ (function () {\n    function ClrDropdownItem(dropdown, el, _dropdownService, renderer) {\n        this.dropdown = dropdown;\n        this.el = el;\n        this._dropdownService = _dropdownService;\n        this.renderer = renderer;\n    }\n    ClrDropdownItem.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.renderer.listen(this.el.nativeElement, \"click\", function () { return _this.onDropdownItemClick(); });\n    };\n    ClrDropdownItem.prototype.onDropdownItemClick = function () {\n        if (this.dropdown.isMenuClosable && !this.el.nativeElement.classList.contains(\"disabled\")) {\n            this._dropdownService.closeMenus();\n        }\n    };\n    return ClrDropdownItem;\n}());\nvar ClrDropdownMenu = /*@__PURE__*/ (function (_super) {\n    __extends(ClrDropdownMenu, _super);\n    function ClrDropdownMenu(injector, parentHost, nested) {\n        var _this = this;\n        if (!parentHost) {\n            throw new Error(\"clr-dropdown-menu should only be used inside of a clr-dropdown\");\n        }\n        _this = _super.call(this, injector, parentHost) || this;\n        if (!nested) {\n            _this.anchorPoint = Point.BOTTOM_LEFT;\n            _this.popoverPoint = Point.LEFT_TOP;\n        }\n        else {\n            _this.anchorPoint = Point.RIGHT_TOP;\n            _this.popoverPoint = Point.LEFT_TOP;\n        }\n        _this.popoverOptions.allowMultipleOpen = true;\n        _this.closeOnOutsideClick = true;\n        return _this;\n    }\n    Object.defineProperty(ClrDropdownMenu.prototype, \"position\", {\n        set: function (position) {\n            switch (position) {\n                case (\"top-right\"):\n                    this.anchorPoint = Point.TOP_RIGHT;\n                    this.popoverPoint = Point.RIGHT_BOTTOM;\n                    break;\n                case (\"top-left\"):\n                    this.anchorPoint = Point.TOP_LEFT;\n                    this.popoverPoint = Point.LEFT_BOTTOM;\n                    break;\n                case (\"bottom-right\"):\n                    this.anchorPoint = Point.BOTTOM_RIGHT;\n                    this.popoverPoint = Point.RIGHT_TOP;\n                    break;\n                case (\"bottom-left\"):\n                    this.anchorPoint = Point.BOTTOM_LEFT;\n                    this.popoverPoint = Point.LEFT_TOP;\n                    break;\n                case (\"right-top\"):\n                    this.anchorPoint = Point.RIGHT_TOP;\n                    this.popoverPoint = Point.LEFT_TOP;\n                    break;\n                case (\"right-bottom\"):\n                    this.anchorPoint = Point.RIGHT_BOTTOM;\n                    this.popoverPoint = Point.LEFT_BOTTOM;\n                    break;\n                case (\"left-top\"):\n                    this.anchorPoint = Point.LEFT_TOP;\n                    this.popoverPoint = Point.RIGHT_TOP;\n                    break;\n                case (\"left-bottom\"):\n                    this.anchorPoint = Point.LEFT_BOTTOM;\n                    this.popoverPoint = Point.RIGHT_BOTTOM;\n                    break;\n                default:\n                    this.anchorPoint = Point.BOTTOM_LEFT;\n                    this.popoverPoint = Point.LEFT_TOP;\n                    break;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrDropdownMenu;\n}(AbstractPopover));\nvar ClrDropdownTrigger = /*@__PURE__*/ (function () {\n    function ClrDropdownTrigger(dropdown, ifOpenService) {\n        this.ifOpenService = ifOpenService;\n        this.isRootLevelToggle = true;\n        if (dropdown.parent) {\n            this.isRootLevelToggle = false;\n        }\n    }\n    Object.defineProperty(ClrDropdownTrigger.prototype, \"active\", {\n        get: function () {\n            return this.ifOpenService.open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrDropdownTrigger.prototype.onDropdownTriggerClick = function (event) {\n        this.ifOpenService.toggleWithEvent(event);\n    };\n    return ClrDropdownTrigger;\n}());\nvar CLR_DROPDOWN_DIRECTIVES = [ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem];\nvar ClrDropdownModule = /*@__PURE__*/ (function () {\n    function ClrDropdownModule() {\n    }\n    return ClrDropdownModule;\n}());\nvar Dropdown = ClrDropdown;\nvar DropdownMenu = ClrDropdownMenu;\nvar DropdownTrigger = ClrDropdownTrigger;\nvar DropdownItem = ClrDropdownItem;\nvar menuPositions = CLR_MENU_POSITIONS;\nvar DROPDOWN_DIRECTIVES = CLR_DROPDOWN_DIRECTIVES;\nvar ALERT_TYPES = [\"alert-info\", \"alert-warning\", \"alert-danger\", \"alert-success\", \"info\", \"warning\", \"danger\", \"success\"];\nvar AlertIconAndTypesService = /*@__PURE__*/ (function () {\n    function AlertIconAndTypesService() {\n        this.defaultIconShape = \"info-circle\";\n        this._alertIconShape = \"\";\n        this._alertType = \"info\";\n    }\n    Object.defineProperty(AlertIconAndTypesService.prototype, \"alertType\", {\n        get: function () {\n            return this._alertType;\n        },\n        set: function (val) {\n            if (ALERT_TYPES.indexOf(val) > -1) {\n                this._alertType = val;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AlertIconAndTypesService.prototype, \"alertIconShape\", {\n        get: function () {\n            if (\"\" === this._alertIconShape) {\n                return this.iconInfoFromType(this._alertType).shape;\n            }\n            return this._alertIconShape;\n        },\n        set: function (val) {\n            if (!val) {\n                this._alertIconShape = \"\";\n            }\n            else if (val !== this._alertIconShape) {\n                this._alertIconShape = val;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AlertIconAndTypesService.prototype.iconInfoFromType = function (type, classOrShape) {\n        if (classOrShape === void 0) {\n            classOrShape = \"shape\";\n        }\n        var returnObj = { shape: \"\", cssClass: \"\" };\n        switch (type) {\n            case \"warning\":\n            case \"alert-warning\":\n                returnObj.shape = \"exclamation-triangle\";\n                returnObj.cssClass = \"alert-warning\";\n                break;\n            case \"danger\":\n            case \"alert-danger\":\n                returnObj.shape = \"exclamation-circle\";\n                returnObj.cssClass = \"alert-danger\";\n                break;\n            case \"success\":\n            case \"alert-success\":\n                returnObj.shape = \"check-circle\";\n                returnObj.cssClass = \"alert-success\";\n                break;\n            default:\n                returnObj.shape = this.defaultIconShape;\n                returnObj.cssClass = \"alert-info\";\n                break;\n        }\n        return returnObj;\n    };\n    return AlertIconAndTypesService;\n}());\nvar MultiAlertService = /*@__PURE__*/ (function () {\n    function MultiAlertService() {\n        this.allAlerts = new QueryList();\n        this._current = 0;\n        this._change = new Subject();\n    }\n    Object.defineProperty(MultiAlertService.prototype, \"changes\", {\n        get: function () {\n            return this._change.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiAlertService.prototype, \"current\", {\n        get: function () {\n            return this._current;\n        },\n        set: function (index) {\n            if (index !== this._current) {\n                this._current = index;\n                this._change.next(index);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiAlertService.prototype, \"activeAlerts\", {\n        get: function () {\n            return this.allAlerts.filter(function (alert) { return !alert._closed; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiAlertService.prototype, \"currentAlert\", {\n        get: function () {\n            return this.activeAlerts[this.current];\n        },\n        set: function (alert) {\n            this.current = this.activeAlerts.indexOf(alert);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiAlertService.prototype, \"count\", {\n        get: function () {\n            return this.activeAlerts.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MultiAlertService.prototype.manage = function (alerts) {\n        this.allAlerts = alerts;\n    };\n    MultiAlertService.prototype.next = function () {\n        this.current = (this.current === this.activeAlerts.length - 1) ? 0 : this.current + 1;\n    };\n    MultiAlertService.prototype.previous = function () {\n        if (this.activeAlerts.length === 0) {\n            return;\n        }\n        this.current = (this.current === 0) ? this.activeAlerts.length - 1 : this.current - 1;\n    };\n    MultiAlertService.prototype.close = function () {\n        this.previous();\n    };\n    return MultiAlertService;\n}());\nvar ClrAlert = /*@__PURE__*/ (function () {\n    function ClrAlert(iconService, cdr, multiAlertService) {\n        this.iconService = iconService;\n        this.cdr = cdr;\n        this.multiAlertService = multiAlertService;\n        this.isSmall = false;\n        this.closable = true;\n        this.isAppLevel = false;\n        this._closed = false;\n        this._closedChanged = new EventEmitter(false);\n        this.previouslyHidden = false;\n        this.hidden = false;\n    }\n    Object.defineProperty(ClrAlert.prototype, \"alertType\", {\n        get: function () {\n            return this.iconService.alertType;\n        },\n        set: function (val) {\n            this.iconService.alertType = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrAlert.prototype, \"alertIconShape\", {\n        set: function (value) {\n            this.iconService.alertIconShape = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrAlert.prototype, \"alertClass\", {\n        get: function () {\n            return this.iconService.iconInfoFromType(this.iconService.alertType).cssClass;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrAlert.prototype.detectChangesIfNeeded = function () {\n        if (this.previouslyHidden !== this.hidden) {\n            this.previouslyHidden = this.hidden;\n            this.cdr.detectChanges();\n        }\n    };\n    Object.defineProperty(ClrAlert.prototype, \"isHidden\", {\n        get: function () {\n            if (this.multiAlertService) {\n                if (this.multiAlertService.currentAlert === this) {\n                    if (this.hidden === true) {\n                        this.previouslyHidden = true;\n                        this.hidden = false;\n                    }\n                }\n                else if (this.hidden === false) {\n                    this.previouslyHidden = false;\n                    this.hidden = true;\n                }\n                this.detectChangesIfNeeded();\n            }\n            return this.hidden;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrAlert.prototype.close = function () {\n        if (!this.closable) {\n            return;\n        }\n        this._closed = true;\n        if (this.multiAlertService) {\n            this.multiAlertService.close();\n        }\n        this._closedChanged.emit(true);\n    };\n    ClrAlert.prototype.open = function () {\n        this._closed = false;\n        this._closedChanged.emit(false);\n    };\n    return ClrAlert;\n}());\nvar ClrAlertItem = /*@__PURE__*/ (function () {\n    function ClrAlertItem(iconService) {\n        this.iconService = iconService;\n    }\n    return ClrAlertItem;\n}());\nvar ClrAlerts = /*@__PURE__*/ (function () {\n    function ClrAlerts(multiAlertService) {\n        this.multiAlertService = multiAlertService;\n        this.currentAlertIndexChange = new EventEmitter(false);\n        this.currentAlertChange = new EventEmitter(false);\n    }\n    Object.defineProperty(ClrAlerts.prototype, \"_inputCurrentIndex\", {\n        set: function (index) {\n            if (Number.isInteger(index) && index >= 0) {\n                this.multiAlertService.current = index;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrAlerts.prototype, \"currentAlertIndex\", {\n        get: function () {\n            return this.multiAlertService.current;\n        },\n        set: function (index) {\n            this.multiAlertService.current = index;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrAlerts.prototype, \"currentAlert\", {\n        get: function () {\n            return this.multiAlertService.currentAlert;\n        },\n        set: function (alert) {\n            if (alert) {\n                this.multiAlertService.currentAlert = alert;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrAlerts.prototype, \"alerts\", {\n        get: function () {\n            return this.allAlerts.filter(function (alert) {\n                return alert.isHidden === false;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrAlerts.prototype, \"currentAlertType\", {\n        get: function () {\n            if (this.multiAlertService.currentAlert) {\n                return this.multiAlertService.currentAlert.alertType;\n            }\n            return \"\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrAlerts.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.multiAlertService.manage(this.allAlerts);\n        this.multiAlertService.changes.subscribe(function (index) {\n            _this.currentAlertIndexChange.next(index);\n            _this.currentAlertChange.next(_this.multiAlertService.currentAlert);\n        });\n    };\n    return ClrAlerts;\n}());\nvar ClrAlertsPager = /*@__PURE__*/ (function () {\n    function ClrAlertsPager(multiAlertService) {\n        this.multiAlertService = multiAlertService;\n        this.currentAlertChange = new EventEmitter(false);\n        this.currentAlertIndexChange = new EventEmitter();\n    }\n    Object.defineProperty(ClrAlertsPager.prototype, \"currentAlert\", {\n        get: function () {\n            return this.multiAlertService.currentAlert;\n        },\n        set: function (alert) {\n            if (alert) {\n                this.multiAlertService.currentAlert = alert;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrAlertsPager.prototype, \"currentAlertIndex\", {\n        get: function () {\n            return this.multiAlertService.current;\n        },\n        set: function (index) {\n            this.multiAlertService.current = index;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrAlertsPager.prototype.ngOnInit = function () {\n        var _this = this;\n        this.multiAlertServiceChanges = this.multiAlertService.changes.subscribe(function (index) {\n            _this.currentAlertIndexChange.emit(index);\n            _this.currentAlertChange.emit(_this.multiAlertService.activeAlerts[index]);\n        });\n    };\n    ClrAlertsPager.prototype.pageUp = function () {\n        this.multiAlertService.next();\n    };\n    ClrAlertsPager.prototype.pageDown = function () {\n        this.multiAlertService.previous();\n    };\n    ClrAlertsPager.prototype.ngOnDestroy = function () {\n        this.multiAlertServiceChanges.unsubscribe();\n    };\n    return ClrAlertsPager;\n}());\nvar CLR_ALERT_DIRECTIVES = [ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager];\nvar ClrAlertModule = /*@__PURE__*/ (function () {\n    function ClrAlertModule() {\n    }\n    return ClrAlertModule;\n}());\nvar Alert = ClrAlert;\nvar AlertItem = ClrAlertItem;\nvar Alerts = ClrAlerts;\nvar AlertsPager = ClrAlertsPager;\nvar ALERT_DIRECTIVES = CLR_ALERT_DIRECTIVES;\nvar ClrEmphasisModule = /*@__PURE__*/ (function () {\n    function ClrEmphasisModule() {\n    }\n    return ClrEmphasisModule;\n}());\nvar ResponsiveNavCodes = /*@__PURE__*/ (function () { function ResponsiveNavCodes() {\n} ResponsiveNavCodes.NAV_LEVEL_1 = 1; ResponsiveNavCodes.NAV_LEVEL_2 = 2; ResponsiveNavCodes.NAV_CLOSE_ALL = \"NAV_CLOSE_ALL\"; ResponsiveNavCodes.NAV_OPEN = \"NAV_OPEN\"; ResponsiveNavCodes.NAV_CLOSE = \"NAV_CLOSE\"; ResponsiveNavCodes.NAV_TOGGLE = \"NAV_TOGGLE\"; ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU = \"open-hamburger-menu\"; ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU = \"open-overflow-menu\"; ResponsiveNavCodes.NAV_CLASS_TRIGGER_1 = \"header-hamburger-trigger\"; ResponsiveNavCodes.NAV_CLASS_TRIGGER_2 = \"header-overflow-trigger\"; ResponsiveNavCodes.NAV_CLASS_LEVEL_1 = \"clr-nav-level-1\"; ResponsiveNavCodes.NAV_CLASS_LEVEL_2 = \"clr-nav-level-2\"; return ResponsiveNavCodes; }());\nvar ResponsiveNavControlMessage = /*@__PURE__*/ (function () {\n    function ResponsiveNavControlMessage(_controlCode, _navLevel) {\n        this._controlCode = _controlCode;\n        this._navLevel = _navLevel;\n    }\n    Object.defineProperty(ResponsiveNavControlMessage.prototype, \"controlCode\", {\n        get: function () {\n            return this._controlCode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ResponsiveNavControlMessage.prototype, \"navLevel\", {\n        get: function () {\n            return this._navLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ResponsiveNavControlMessage;\n}());\nvar ResponsiveNavigationService = /*@__PURE__*/ (function () {\n    function ResponsiveNavigationService() {\n        this.responsiveNavList = [];\n        this.registerNavSubject = new Subject();\n        this.controlNavSubject = new Subject();\n        this.closeAllNavs();\n    }\n    Object.defineProperty(ResponsiveNavigationService.prototype, \"registeredNavs\", {\n        get: function () {\n            return this.registerNavSubject.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ResponsiveNavigationService.prototype, \"navControl\", {\n        get: function () {\n            return this.controlNavSubject.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResponsiveNavigationService.prototype.registerNav = function (navLevel) {\n        if (!navLevel || this.isNavRegistered(navLevel)) {\n            return;\n        }\n        this.responsiveNavList.push(navLevel);\n        this.registerNavSubject.next(this.responsiveNavList);\n    };\n    ResponsiveNavigationService.prototype.isNavRegistered = function (navLevel) {\n        if (this.responsiveNavList.indexOf(navLevel) > -1) {\n            console.error(\"Multiple clr-nav-level \" + navLevel +\n                \" attributes found. Please make sure that only one exists\");\n            return true;\n        }\n        return false;\n    };\n    ResponsiveNavigationService.prototype.unregisterNav = function (navLevel) {\n        var index = this.responsiveNavList.indexOf(navLevel);\n        if (index > -1) {\n            this.responsiveNavList.splice(index, 1);\n            this.registerNavSubject.next(this.responsiveNavList);\n        }\n    };\n    ResponsiveNavigationService.prototype.sendControlMessage = function (controlCode, navLevel) {\n        var message = new ResponsiveNavControlMessage(controlCode, navLevel);\n        this.controlNavSubject.next(message);\n    };\n    ResponsiveNavigationService.prototype.closeAllNavs = function () {\n        var message = new ResponsiveNavControlMessage(ResponsiveNavCodes.NAV_CLOSE_ALL, -999);\n        this.controlNavSubject.next(message);\n    };\n    return ResponsiveNavigationService;\n}());\nvar ClrMainContainer = /*@__PURE__*/ (function () {\n    function ClrMainContainer(elRef, responsiveNavService) {\n        this.elRef = elRef;\n        this.responsiveNavService = responsiveNavService;\n    }\n    ClrMainContainer.prototype.ngOnInit = function () {\n        var _this = this;\n        this._classList = this.elRef.nativeElement.classList;\n        this._subscription = this.responsiveNavService.navControl.subscribe({\n            next: function (message) {\n                _this.processMessage(message);\n            }\n        });\n    };\n    ClrMainContainer.prototype.processMessage = function (message) {\n        var navClass = ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU;\n        if (message.controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL) {\n            this._classList.remove(ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU);\n            this._classList.remove(ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU);\n        }\n        else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {\n            this.controlNav(message.controlCode, navClass);\n        }\n        else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {\n            navClass = ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU;\n            this.controlNav(message.controlCode, navClass);\n        }\n    };\n    ClrMainContainer.prototype.controlNav = function (controlCode, navClass) {\n        if (controlCode === ResponsiveNavCodes.NAV_OPEN) {\n            this._classList.add(navClass);\n        }\n        else if (controlCode === ResponsiveNavCodes.NAV_CLOSE) {\n            this._classList.remove(navClass);\n        }\n        else if (controlCode === ResponsiveNavCodes.NAV_TOGGLE) {\n            this._classList.toggle(navClass);\n        }\n    };\n    ClrMainContainer.prototype.ngOnDestroy = function () {\n        this._subscription.unsubscribe();\n    };\n    return ClrMainContainer;\n}());\nvar CLR_LAYOUT_DIRECTIVES = [ClrMainContainer];\nvar ClrMainContainerModule = /*@__PURE__*/ (function () {\n    function ClrMainContainerModule() {\n    }\n    return ClrMainContainerModule;\n}());\nvar MainContainer = ClrMainContainer;\nvar LAYOUT_DIRECTIVES = CLR_LAYOUT_DIRECTIVES;\nvar MainContainerWillyWonka = /*@__PURE__*/ (function (_super) {\n    __extends(MainContainerWillyWonka, _super);\n    function MainContainerWillyWonka() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MainContainerWillyWonka;\n}(WillyWonka));\nvar NavDetectionOompaLoompa = /*@__PURE__*/ (function (_super) {\n    __extends(NavDetectionOompaLoompa, _super);\n    function NavDetectionOompaLoompa(cdr, willyWonka, responsiveNavService) {\n        var _this = this;\n        if (!willyWonka) {\n            throw new Error(\"clr-header should only be used inside of a clr-main-container\");\n        }\n        _this = _super.call(this, cdr, willyWonka) || this;\n        _this.responsiveNavService = responsiveNavService;\n        return _this;\n    }\n    Object.defineProperty(NavDetectionOompaLoompa.prototype, \"flavor\", {\n        get: function () {\n            return this.responsiveNavService.responsiveNavList.reduce(function (sum, navLevel) { return sum + navLevel; }, 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NavDetectionOompaLoompa;\n}(OompaLoompa));\nvar ClrHeader = /*@__PURE__*/ (function () {\n    function ClrHeader(responsiveNavService) {\n        var _this = this;\n        this.responsiveNavService = responsiveNavService;\n        this.isNavLevel1OnPage = false;\n        this.isNavLevel2OnPage = false;\n        this._subscription = this.responsiveNavService.registeredNavs.subscribe({\n            next: function (navLevelList) {\n                _this.initializeNavTriggers(navLevelList);\n            }\n        });\n    }\n    Object.defineProperty(ClrHeader.prototype, \"responsiveNavCodes\", {\n        get: function () {\n            return ResponsiveNavCodes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrHeader.prototype.resetNavTriggers = function () {\n        this.isNavLevel1OnPage = false;\n        this.isNavLevel2OnPage = false;\n    };\n    ClrHeader.prototype.initializeNavTriggers = function (navList) {\n        var _this = this;\n        this.resetNavTriggers();\n        if (navList.length > 2) {\n            console.error(\"More than 2 Nav Levels detected.\");\n            return;\n        }\n        navList.forEach(function (navLevel) {\n            if (navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {\n                _this.isNavLevel1OnPage = true;\n            }\n            else if (navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {\n                _this.isNavLevel2OnPage = true;\n            }\n        });\n    };\n    ClrHeader.prototype.closeOpenNav = function () {\n        this.responsiveNavService.closeAllNavs();\n    };\n    ClrHeader.prototype.toggleNav = function (navLevel) {\n        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_TOGGLE, navLevel);\n    };\n    ClrHeader.prototype.ngOnDestroy = function () {\n        this._subscription.unsubscribe();\n    };\n    return ClrHeader;\n}());\nvar ClrNavLevel = /*@__PURE__*/ (function () {\n    function ClrNavLevel(responsiveNavService, elementRef) {\n        this.responsiveNavService = responsiveNavService;\n        this.elementRef = elementRef;\n    }\n    ClrNavLevel.prototype.ngOnInit = function () {\n        if (this.level !== ResponsiveNavCodes.NAV_LEVEL_1 && this.level !== ResponsiveNavCodes.NAV_LEVEL_2) {\n            console.error(\"Nav Level can only be 1 or 2\");\n            return;\n        }\n        this.responsiveNavService.registerNav(this.level);\n        this.addNavClass(this.level);\n    };\n    ClrNavLevel.prototype.addNavClass = function (level) {\n        var navHostClassList = this.elementRef.nativeElement.classList;\n        if (level === ResponsiveNavCodes.NAV_LEVEL_1) {\n            navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_1);\n        }\n        else if (level === ResponsiveNavCodes.NAV_LEVEL_2) {\n            navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_2);\n        }\n    };\n    Object.defineProperty(ClrNavLevel.prototype, \"level\", {\n        get: function () {\n            return this._level;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrNavLevel.prototype, \"responsiveNavCodes\", {\n        get: function () {\n            return ResponsiveNavCodes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrNavLevel.prototype.open = function () {\n        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_OPEN, this.level);\n    };\n    ClrNavLevel.prototype.close = function () {\n        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_CLOSE, this.level);\n    };\n    ClrNavLevel.prototype.onMouseClick = function (target) {\n        var current = target;\n        var navHost = this.elementRef.nativeElement;\n        while (current) {\n            if (current === navHost) {\n                return;\n            }\n            else if (current.classList.contains(\"nav-link\")) {\n                this.close();\n                return;\n            }\n            current = current.parentNode;\n        }\n    };\n    ClrNavLevel.prototype.ngOnDestroy = function () {\n        this.responsiveNavService.unregisterNav(this.level);\n    };\n    return ClrNavLevel;\n}());\nfunction ResponsiveNavigationProvider(existing) {\n    return existing || new ResponsiveNavigationService();\n}\nvar CLR_NAVIGATION_DIRECTIVES = [ClrHeader, ClrNavLevel, NavDetectionOompaLoompa, MainContainerWillyWonka];\nvar ɵ0$2 = ResponsiveNavigationProvider;\nvar ClrNavigationModule = /*@__PURE__*/ (function () {\n    function ClrNavigationModule() {\n    }\n    return ClrNavigationModule;\n}());\nvar Header = ClrHeader;\nvar NavLevelDirective = ClrNavLevel;\nvar NAVIGATION_DIRECTIVES = CLR_NAVIGATION_DIRECTIVES;\nvar TemplateRefContainer = /*@__PURE__*/ (function () {\n    function TemplateRefContainer() {\n    }\n    return TemplateRefContainer;\n}());\nvar TEMPLATE_REF_DIRECTIVES = [TemplateRefContainer];\nvar ClrTemplateRefModule = /*@__PURE__*/ (function () {\n    function ClrTemplateRefModule() {\n    }\n    return ClrTemplateRefModule;\n}());\nvar TabsWillyWonka = /*@__PURE__*/ (function (_super) {\n    __extends(TabsWillyWonka, _super);\n    function TabsWillyWonka() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TabsWillyWonka;\n}(WillyWonka));\nvar ActiveOompaLoompa = /*@__PURE__*/ (function (_super) {\n    __extends(ActiveOompaLoompa, _super);\n    function ActiveOompaLoompa(cdr, willyWonka, id, ifActive) {\n        var _this = this;\n        if (!willyWonka) {\n            throw new Error(\"clrTabLink and clr-tab-content should only be used inside of a clr-tabs\");\n        }\n        _this = _super.call(this, cdr, willyWonka) || this;\n        _this.ifActive = ifActive;\n        _this.id = id;\n        return _this;\n    }\n    Object.defineProperty(ActiveOompaLoompa.prototype, \"flavor\", {\n        get: function () {\n            return this.ifActive.current === this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ActiveOompaLoompa;\n}(OompaLoompa));\nvar AriaService = /*@__PURE__*/ (function () {\n    function AriaService() {\n    }\n    return AriaService;\n}());\nvar TabsService = /*@__PURE__*/ (function () {\n    function TabsService() {\n        this._children = [];\n    }\n    TabsService.prototype.register = function (tab) {\n        this._children.push(tab);\n    };\n    Object.defineProperty(TabsService.prototype, \"children\", {\n        get: function () {\n            return this._children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabsService.prototype, \"activeTab\", {\n        get: function () {\n            return this.children.find(function (tab) {\n                return tab.active;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabsService.prototype, \"overflowTabs\", {\n        get: function () {\n            return this.children.filter(function (tab) {\n                return tab.tabLink.inOverflow === true;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TabsService.prototype.unregister = function (tab) {\n        var index = this.children.indexOf(tab);\n        if (index > -1) {\n            this.children.splice(index, 1);\n        }\n    };\n    return TabsService;\n}());\nvar nbTabContentComponents = 0;\nvar ClrTabContent = /*@__PURE__*/ (function () {\n    function ClrTabContent(ifActiveService, id, ariaService) {\n        this.ifActiveService = ifActiveService;\n        this.id = id;\n        this.ariaService = ariaService;\n        if (!this.tabContentId) {\n            this.tabContentId = \"clr-tab-content-\" + (nbTabContentComponents++);\n        }\n    }\n    Object.defineProperty(ClrTabContent.prototype, \"ariaLabelledBy\", {\n        get: function () {\n            return this.ariaService.ariaLabelledBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTabContent.prototype, \"tabContentId\", {\n        get: function () {\n            return this.ariaService.ariaControls;\n        },\n        set: function (id) {\n            this.ariaService.ariaControls = id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTabContent.prototype, \"active\", {\n        get: function () {\n            return this.ifActiveService.current === this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrTabContent;\n}());\nvar nbTabsComponent = 0;\nvar TABS_ID = new InjectionToken(\"TABS_ID\");\nfunction tokenFactory$1() {\n    return \"clr-tabs-\" + (nbTabsComponent++);\n}\nvar TABS_ID_PROVIDER = {\n    provide: TABS_ID,\n    useFactory: tokenFactory$1\n};\nvar nbTabLinkComponents = 0;\nvar ClrTabLink = /*@__PURE__*/ (function () {\n    function ClrTabLink(ifActiveService, id, ariaService, el, cfr, viewContainerRef, tabsId) {\n        this.ifActiveService = ifActiveService;\n        this.id = id;\n        this.ariaService = ariaService;\n        this.el = el;\n        this.cfr = cfr;\n        this.viewContainerRef = viewContainerRef;\n        this.tabsId = tabsId;\n        if (!this.tabLinkId) {\n            this.tabLinkId = \"clr-tab-link-\" + (nbTabLinkComponents++);\n        }\n        var factory = this.cfr.resolveComponentFactory(TemplateRefContainer);\n        this.templateRefContainer =\n            this.viewContainerRef.createComponent(factory, 1, undefined, [[this.el.nativeElement]]).instance;\n    }\n    Object.defineProperty(ClrTabLink.prototype, \"ariaControls\", {\n        get: function () {\n            return this.ariaService.ariaControls;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTabLink.prototype, \"tabLinkId\", {\n        get: function () {\n            return this.ariaService.ariaLabelledBy;\n        },\n        set: function (id) {\n            this.ariaService.ariaLabelledBy = id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrTabLink.prototype.activate = function () {\n        this.ifActiveService.current = this.id;\n    };\n    Object.defineProperty(ClrTabLink.prototype, \"active\", {\n        get: function () {\n            return this.ifActiveService.current === this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTabLink.prototype, \"role\", {\n        get: function () {\n            return \"presentation\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTabLink.prototype, \"type\", {\n        get: function () {\n            return \"button\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrTabLink;\n}());\nvar ClrTab = /*@__PURE__*/ (function () {\n    function ClrTab(ifActiveService, id, tabsService) {\n        this.ifActiveService = ifActiveService;\n        this.id = id;\n        this.tabsService = tabsService;\n        tabsService.register(this);\n    }\n    ClrTab.prototype.ngOnDestroy = function () {\n        this.tabsService.unregister(this);\n    };\n    Object.defineProperty(ClrTab.prototype, \"active\", {\n        get: function () {\n            return this.ifActiveService.current === this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrTab;\n}());\nvar ClrTabOverflowContent = /*@__PURE__*/ (function (_super) {\n    __extends(ClrTabOverflowContent, _super);\n    function ClrTabOverflowContent(injector, parentHost) {\n        var _this = _super.call(this, injector, parentHost) || this;\n        _this.anchorPoint = Point.BOTTOM_RIGHT;\n        _this.popoverPoint = Point.RIGHT_TOP;\n        _this.closeOnOutsideClick = true;\n        return _this;\n    }\n    return ClrTabOverflowContent;\n}(AbstractPopover));\nvar ClrTabs = /*@__PURE__*/ (function () {\n    function ClrTabs(ifActiveService, ifOpenService, tabsService, tabsId) {\n        this.ifActiveService = ifActiveService;\n        this.ifOpenService = ifOpenService;\n        this.tabsService = tabsService;\n        this.tabsId = tabsId;\n    }\n    Object.defineProperty(ClrTabs.prototype, \"activeTabInOverflow\", {\n        get: function () {\n            return this.tabsService.overflowTabs.indexOf(this.tabsService.activeTab) > -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrTabs.prototype.ngAfterContentInit = function () {\n        if (typeof this.ifActiveService.current === \"undefined\") {\n            this.tabLinkDirectives.first.activate();\n        }\n    };\n    ClrTabs.prototype.toggleOverflow = function (event) {\n        this.ifOpenService.toggleWithEvent(event);\n    };\n    return ClrTabs;\n}());\nvar CLR_TABS_DIRECTIVES = [ClrTabContent, ClrTab, ClrTabs, ClrTabOverflowContent, ClrTabLink, TabsWillyWonka, ActiveOompaLoompa];\nvar ClrTabsModule = /*@__PURE__*/ (function () {\n    function ClrTabsModule() {\n    }\n    return ClrTabsModule;\n}());\nvar Tab = ClrTab;\nvar Tabs = ClrTabs;\nvar TabContent = ClrTabContent;\nvar TabOverflowContent = ClrTabOverflowContent;\nvar TabLinkDirective = ClrTabLink;\nvar TABS_DIRECTIVES = CLR_TABS_DIRECTIVES;\nvar VerticalNavGroupRegistrationService = /*@__PURE__*/ (function () {\n    function VerticalNavGroupRegistrationService() {\n        this.navGroupCount = 0;\n    }\n    VerticalNavGroupRegistrationService.prototype.registerNavGroup = function () {\n        this.navGroupCount++;\n    };\n    VerticalNavGroupRegistrationService.prototype.unregisterNavGroup = function () {\n        this.navGroupCount--;\n    };\n    return VerticalNavGroupRegistrationService;\n}());\nvar VerticalNavIconService = /*@__PURE__*/ (function () {\n    function VerticalNavIconService() {\n        this._icons = 0;\n    }\n    Object.defineProperty(VerticalNavIconService.prototype, \"hasIcons\", {\n        get: function () {\n            return this._icons > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    VerticalNavIconService.prototype.registerIcon = function () {\n        this._icons++;\n    };\n    VerticalNavIconService.prototype.unregisterIcon = function () {\n        this._icons--;\n    };\n    return VerticalNavIconService;\n}());\nvar VerticalNavService = /*@__PURE__*/ (function () {\n    function VerticalNavService() {\n        this._animateOnCollapsed = new Subject();\n        this._collapsedChanged = new Subject();\n        this._collapsed = false;\n        this._collapsible = false;\n    }\n    Object.defineProperty(VerticalNavService.prototype, \"animateOnCollapsed\", {\n        get: function () {\n            return this._animateOnCollapsed.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VerticalNavService.prototype, \"collapsedChanged\", {\n        get: function () {\n            return this._collapsedChanged.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VerticalNavService.prototype, \"collapsed\", {\n        get: function () {\n            return this._collapsed;\n        },\n        set: function (value) {\n            value = !!value;\n            if (this.collapsible && (this._collapsed !== value)) {\n                this.updateCollapseBehavior(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VerticalNavService.prototype, \"collapsible\", {\n        get: function () {\n            return this._collapsible;\n        },\n        set: function (value) {\n            value = !!value;\n            if (this._collapsible !== value) {\n                if (!value && this.collapsed) {\n                    this.updateCollapseBehavior(false);\n                }\n                this._collapsible = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    VerticalNavService.prototype.updateCollapseBehavior = function (value) {\n        this._animateOnCollapsed.next(value);\n        this._collapsed = value;\n        this._collapsedChanged.next(value);\n    };\n    return VerticalNavService;\n}());\nvar ClrVerticalNav = /*@__PURE__*/ (function () {\n    function ClrVerticalNav(_navService, _navIconService, _navGroupRegistrationService) {\n        var _this = this;\n        this._navService = _navService;\n        this._navIconService = _navIconService;\n        this._navGroupRegistrationService = _navGroupRegistrationService;\n        this._collapsedChanged = new EventEmitter(true);\n        this._sub = this._navService.collapsedChanged.subscribe(function (value) {\n            _this._collapsedChanged.emit(value);\n        });\n    }\n    Object.defineProperty(ClrVerticalNav.prototype, \"collapsible\", {\n        get: function () {\n            return this._navService.collapsible;\n        },\n        set: function (value) {\n            this._navService.collapsible = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrVerticalNav.prototype, \"collapsed\", {\n        get: function () {\n            return this._navService.collapsed;\n        },\n        set: function (value) {\n            this._navService.collapsed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrVerticalNav.prototype, \"hasNavGroups\", {\n        get: function () {\n            return this._navGroupRegistrationService.navGroupCount > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrVerticalNav.prototype, \"hasIcons\", {\n        get: function () {\n            return this._navIconService.hasIcons;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrVerticalNav.prototype.toggleByButton = function () {\n        this.collapsed = !this.collapsed;\n    };\n    ClrVerticalNav.prototype.ngOnDestroy = function () {\n        this._sub.unsubscribe();\n    };\n    return ClrVerticalNav;\n}());\nvar VerticalNavGroupService = /*@__PURE__*/ (function () {\n    function VerticalNavGroupService() {\n        this._expandChange = new Subject();\n    }\n    Object.defineProperty(VerticalNavGroupService.prototype, \"expandChange\", {\n        get: function () {\n            return this._expandChange.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    VerticalNavGroupService.prototype.expand = function () {\n        this._expandChange.next(true);\n    };\n    return VerticalNavGroupService;\n}());\nvar EXPANDED_STATE = \"expanded\";\nvar COLLAPSED_STATE = \"collapsed\";\nvar ClrVerticalNavGroup = /*@__PURE__*/ (function () {\n    function ClrVerticalNavGroup(_itemExpand, _navGroupRegistrationService, _navGroupService, _navService) {\n        var _this = this;\n        this._itemExpand = _itemExpand;\n        this._navGroupRegistrationService = _navGroupRegistrationService;\n        this._navGroupService = _navGroupService;\n        this._navService = _navService;\n        this.wasExpanded = false;\n        this.expandedChange = new EventEmitter(true);\n        this._subscriptions = [];\n        this._expandAnimationState = COLLAPSED_STATE;\n        this._navGroupRegistrationService.registerNavGroup();\n        this._subscriptions.push(this._itemExpand.expandChange.subscribe(function (value) {\n            if (value && _this.expandAnimationState === COLLAPSED_STATE) {\n                if (_this._navService.collapsed) {\n                    _this._navService.collapsed = false;\n                }\n                _this.expandAnimationState = EXPANDED_STATE;\n            }\n            else if (!value && _this.expandAnimationState === EXPANDED_STATE) {\n                _this.expandAnimationState = COLLAPSED_STATE;\n            }\n        }));\n        this._subscriptions.push(this._navService.animateOnCollapsed.subscribe(function (goingToCollapse) {\n            if (goingToCollapse && _this.expanded) {\n                _this.wasExpanded = true;\n                _this.expandAnimationState = COLLAPSED_STATE;\n            }\n            else if (!goingToCollapse && _this.wasExpanded) {\n                _this.expandGroup();\n                _this.wasExpanded = false;\n            }\n        }));\n        this._subscriptions.push(this._navGroupService.expandChange.subscribe(function (expand) {\n            if (expand && !_this.expanded) {\n                _this.expandGroup();\n            }\n        }));\n    }\n    Object.defineProperty(ClrVerticalNavGroup.prototype, \"expanded\", {\n        get: function () {\n            return this._itemExpand.expanded;\n        },\n        set: function (value) {\n            if (this._itemExpand.expanded !== value) {\n                this._itemExpand.expanded = value;\n                this.expandedChange.emit(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrVerticalNavGroup.prototype, \"userExpandedInput\", {\n        set: function (value) {\n            value = !!value;\n            if (this.expanded !== value) {\n                this.toggleExpand();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrVerticalNavGroup.prototype.expandGroup = function () {\n        this.expanded = true;\n        this.expandAnimationState = EXPANDED_STATE;\n    };\n    ClrVerticalNavGroup.prototype.collapseGroup = function () {\n        this.expandAnimationState = COLLAPSED_STATE;\n    };\n    ClrVerticalNavGroup.prototype.expandAnimationDone = function ($event) {\n        if ($event.toState === COLLAPSED_STATE) {\n            this.expanded = false;\n        }\n    };\n    Object.defineProperty(ClrVerticalNavGroup.prototype, \"expandAnimationState\", {\n        get: function () {\n            return this._expandAnimationState;\n        },\n        set: function (value) {\n            if (value !== this._expandAnimationState) {\n                this._expandAnimationState = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrVerticalNavGroup.prototype.toggleExpand = function () {\n        if (this.expanded) {\n            this.collapseGroup();\n        }\n        else {\n            if (this._navService.collapsed) {\n                this._navService.collapsed = false;\n            }\n            this.expandGroup();\n        }\n    };\n    ClrVerticalNavGroup.prototype.ngAfterContentInit = function () {\n        if (this._navService.collapsed && this.expanded) {\n            this.wasExpanded = true;\n            this.expandAnimationState = COLLAPSED_STATE;\n        }\n    };\n    ClrVerticalNavGroup.prototype.ngOnDestroy = function () {\n        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this._navGroupRegistrationService.unregisterNavGroup();\n    };\n    return ClrVerticalNavGroup;\n}());\nvar ClrVerticalNavGroupChildren = /*@__PURE__*/ (function () {\n    function ClrVerticalNavGroupChildren() {\n    }\n    return ClrVerticalNavGroupChildren;\n}());\nvar ClrVerticalNavIcon = /*@__PURE__*/ (function () {\n    function ClrVerticalNavIcon(_verticalNavIconService) {\n        this._verticalNavIconService = _verticalNavIconService;\n        this._verticalNavIconService.registerIcon();\n    }\n    ClrVerticalNavIcon.prototype.ngOnDestroy = function () {\n        this._verticalNavIconService.unregisterIcon();\n    };\n    return ClrVerticalNavIcon;\n}());\nvar ClrVerticalNavLink = /*@__PURE__*/ (function () {\n    function ClrVerticalNavLink(_navGroupService) {\n        this._navGroupService = _navGroupService;\n    }\n    ClrVerticalNavLink.prototype.expandParentNavGroup = function () {\n        if (this._navGroupService) {\n            this._navGroupService.expand();\n        }\n    };\n    return ClrVerticalNavLink;\n}());\nvar CLR_VERTICAL_NAV_DIRECTIVES = [ClrVerticalNav, ClrVerticalNavLink, ClrVerticalNavGroup, ClrVerticalNavGroupChildren, ClrVerticalNavIcon];\nvar ClrVerticalNavModule = /*@__PURE__*/ (function () {\n    function ClrVerticalNavModule() {\n    }\n    return ClrVerticalNavModule;\n}());\nvar VerticalNav = ClrVerticalNav;\nvar VerticalNavGroup = ClrVerticalNavGroup;\nvar VerticalNavGroupChildren = ClrVerticalNavGroupChildren;\nvar VerticalNavIcon = ClrVerticalNavIcon;\nvar VerticalNavLink = ClrVerticalNavLink;\nvar VERTICAL_NAV_DIRECTIVES = CLR_VERTICAL_NAV_DIRECTIVES;\nvar ClrLayoutModule = /*@__PURE__*/ (function () {\n    function ClrLayoutModule() {\n    }\n    return ClrLayoutModule;\n}());\nvar ScrollingService = /*@__PURE__*/ (function () {\n    function ScrollingService(_document) {\n        this._document = _document;\n    }\n    ScrollingService.prototype.stopScrolling = function () {\n        this._document.body.classList.add(\"no-scrolling\");\n    };\n    ScrollingService.prototype.resumeScrolling = function () {\n        if (this._document.body.classList.contains(\"no-scrolling\")) {\n            this._document.body.classList.remove(\"no-scrolling\");\n        }\n    };\n    return ScrollingService;\n}());\nvar GHOST_PAGE_ANIMATION = {\n    STATES: { NO_PAGES: \"inactive\", ALL_PAGES: \"ready\", NEXT_TO_LAST_PAGE: \"penultimateGhost\", LAST_PAGE: \"lastGhost\" },\n    TRANSITIONS: { IN: \"100ms ease-out\", OUT: \"100ms ease-in\" }\n};\nvar ClrModal = /*@__PURE__*/ (function () {\n    function ClrModal(_scrollingService) {\n        this._scrollingService = _scrollingService;\n        this._open = false;\n        this._openChanged = new EventEmitter(false);\n        this.closable = true;\n        this.staticBackdrop = false;\n        this.skipAnimation = \"false\";\n        this.ghostPageState = \"hidden\";\n        this.bypassScrollService = false;\n        this.stopClose = false;\n        this.altClose = new EventEmitter(false);\n    }\n    Object.defineProperty(ClrModal.prototype, \"sizeClass\", {\n        get: function () {\n            if (this.size) {\n                return \"modal-\" + this.size;\n            }\n            else {\n                return \"\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrModal.prototype.ngOnChanges = function (changes) {\n        if (!this.bypassScrollService && changes && changes.hasOwnProperty(\"_open\")) {\n            if (changes[\"_open\"].currentValue) {\n                this._scrollingService.stopScrolling();\n            }\n            else {\n                this._scrollingService.resumeScrolling();\n            }\n        }\n    };\n    ClrModal.prototype.ngOnDestroy = function () {\n        this._scrollingService.resumeScrolling();\n    };\n    ClrModal.prototype.open = function () {\n        if (this._open === true) {\n            return;\n        }\n        this._open = true;\n        this._openChanged.emit(true);\n    };\n    ClrModal.prototype.close = function () {\n        if (this.stopClose) {\n            this.altClose.emit(false);\n            return;\n        }\n        if (!this.closable || this._open === false) {\n            return;\n        }\n        this._open = false;\n        this._openChanged.emit(false);\n        this.focusTrap.setPreviousFocus();\n    };\n    ClrModal.prototype.fadeDone = function (e) {\n        if (e.toState === \"void\") {\n            this._openChanged.emit(false);\n        }\n    };\n    return ClrModal;\n}());\nvar CLR_MODAL_DIRECTIVES = [ClrModal];\nvar ClrModalModule = /*@__PURE__*/ (function () {\n    function ClrModalModule() {\n    }\n    return ClrModalModule;\n}());\nvar Modal = ClrModal;\nvar MODAL_DIRECTIVES = CLR_MODAL_DIRECTIVES;\nvar SIGNPOST_POSITIONS = {\n    \"top-left\": { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_RIGHT, offsetY: -10, offsetX: 0 },\n    \"top-middle\": { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_CENTER, offsetY: -10, offsetX: 0 },\n    \"top-right\": { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_LEFT, offsetY: -10, offsetX: 0 },\n    \"right-top\": { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_BOTTOM, offsetY: 2, offsetX: 14 },\n    \"right-middle\": { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14 },\n    \"right-bottom\": { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_TOP, offsetY: -1, offsetX: 14 },\n    \"bottom-right\": { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_LEFT, offsetY: 9, offsetX: -1 },\n    \"bottom-middle\": { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_CENTER, offsetY: 9, offsetX: 12 },\n    \"bottom-left\": { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_RIGHT, offsetY: 9, offsetX: 0 },\n    \"left-bottom\": { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_TOP, offsetY: 0, offsetX: -14 },\n    \"left-middle\": { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_CENTER, offsetY: 4, offsetX: -14 },\n    \"left-top\": { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_BOTTOM, offsetY: 0, offsetX: -14 },\n    \"default\": { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14 },\n};\nvar POSITIONS = [\n    \"top-left\",\n    \"top-middle\",\n    \"top-right\",\n    \"right-top\",\n    \"right-middle\",\n    \"right-bottom\",\n    \"bottom-right\",\n    \"bottom-middle\",\n    \"bottom-left\",\n    \"left-bottom\",\n    \"left-middle\",\n    \"left-top\",\n];\nvar ClrSignpostContent = /*@__PURE__*/ (function (_super) {\n    __extends(ClrSignpostContent, _super);\n    function ClrSignpostContent(injector, parentHost) {\n        var _this = this;\n        if (!parentHost) {\n            throw new Error(\"clr-signpost-content should only be used inside of a clr-signpost\");\n        }\n        _this = _super.call(this, injector, parentHost) || this;\n        _this.position = \"right-middle\";\n        _this.closeOnOutsideClick = true;\n        return _this;\n    }\n    ClrSignpostContent.prototype.close = function () {\n        this.ifOpenService.open = false;\n    };\n    Object.defineProperty(ClrSignpostContent.prototype, \"position\", {\n        get: function () {\n            return this._position;\n        },\n        set: function (position) {\n            this.renderer.removeClass(this.el.nativeElement, this.position);\n            if (position && (POSITIONS.indexOf(position) > -1)) {\n                this._position = position;\n            }\n            else {\n                this._position = \"right-middle\";\n            }\n            this.renderer.addClass(this.el.nativeElement, this.position);\n            var setPosition = SIGNPOST_POSITIONS[this.position];\n            this.anchorPoint = setPosition.anchorPoint;\n            this.popoverPoint = setPosition.popoverPoint;\n            this.popoverOptions.offsetY = setPosition.offsetY;\n            this.popoverOptions.offsetX = setPosition.offsetX;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrSignpostContent;\n}(AbstractPopover));\nvar CLR_SIGNPOST_DIRECTIVES = [ClrSignpost, ClrSignpostContent, ClrSignpostTrigger];\nvar ClrSignpostModule = /*@__PURE__*/ (function () {\n    function ClrSignpostModule() {\n    }\n    return ClrSignpostModule;\n}());\nvar Signpost = ClrSignpost;\nvar SignpostContent = ClrSignpostContent;\nvar SignpostTrigger = ClrSignpostTrigger;\nvar SIGNPOST_DIRECTIVES = CLR_SIGNPOST_DIRECTIVES;\nvar ClrTooltip = /*@__PURE__*/ (function () {\n    function ClrTooltip() {\n    }\n    return ClrTooltip;\n}());\nvar POSITIONS$1 = [\"bottom-left\", \"bottom-right\", \"top-left\", \"top-right\", \"right\", \"left\"];\nvar SIZES = [\"xs\", \"sm\", \"md\", \"lg\"];\nvar ClrTooltipContent = /*@__PURE__*/ (function (_super) {\n    __extends(ClrTooltipContent, _super);\n    function ClrTooltipContent(injector, parentHost) {\n        var _this = this;\n        if (!parentHost) {\n            throw new Error(\"clr-tooltip-content should only be used inside of a clr-tooltip\");\n        }\n        _this = _super.call(this, injector, parentHost) || this;\n        _this.position = \"right\";\n        _this.size = \"sm\";\n        return _this;\n    }\n    Object.defineProperty(ClrTooltipContent.prototype, \"position\", {\n        get: function () {\n            return this._position;\n        },\n        set: function (position) {\n            this.renderer.removeClass(this.el.nativeElement, \"tooltip-\" + this.position);\n            if (position && (POSITIONS$1.indexOf(position) > -1)) {\n                this._position = position;\n            }\n            else {\n                this._position = \"right\";\n            }\n            this.renderer.addClass(this.el.nativeElement, \"tooltip-\" + this.position);\n            switch (position) {\n                case (\"top-right\"):\n                    this.anchorPoint = Point.TOP_CENTER;\n                    this.popoverPoint = Point.LEFT_BOTTOM;\n                    break;\n                case (\"top-left\"):\n                    this.anchorPoint = Point.TOP_CENTER;\n                    this.popoverPoint = Point.RIGHT_BOTTOM;\n                    break;\n                case (\"bottom-right\"):\n                    this.anchorPoint = Point.BOTTOM_CENTER;\n                    this.popoverPoint = Point.LEFT_TOP;\n                    break;\n                case (\"bottom-left\"):\n                    this.anchorPoint = Point.BOTTOM_CENTER;\n                    this.popoverPoint = Point.RIGHT_TOP;\n                    break;\n                case (\"right\"):\n                    this.anchorPoint = Point.RIGHT_CENTER;\n                    this.popoverPoint = Point.LEFT_TOP;\n                    break;\n                case (\"left\"):\n                    this.anchorPoint = Point.LEFT_CENTER;\n                    this.popoverPoint = Point.RIGHT_TOP;\n                    break;\n                default:\n                    this.anchorPoint = Point.RIGHT_CENTER;\n                    this.popoverPoint = Point.LEFT_TOP;\n                    break;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrTooltipContent.prototype, \"size\", {\n        get: function () {\n            return this._size;\n        },\n        set: function (size) {\n            this.renderer.removeClass(this.el.nativeElement, \"tooltip-\" + this.size);\n            if (size && (SIZES.indexOf(size) > -1)) {\n                this._size = size;\n            }\n            else {\n                this._size = \"sm\";\n            }\n            this.renderer.addClass(this.el.nativeElement, \"tooltip-\" + this.size);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrTooltipContent;\n}(AbstractPopover));\nvar ClrTooltipTrigger = /*@__PURE__*/ (function () {\n    function ClrTooltipTrigger(ifOpenService) {\n        this.ifOpenService = ifOpenService;\n    }\n    ClrTooltipTrigger.prototype.showTooltip = function () {\n        this.ifOpenService.open = true;\n    };\n    ClrTooltipTrigger.prototype.hideTooltip = function () {\n        this.ifOpenService.open = false;\n    };\n    return ClrTooltipTrigger;\n}());\nvar CLR_TOOLTIP_DIRECTIVES = [ClrTooltip, ClrTooltipTrigger, ClrTooltipContent];\nvar ClrTooltipModule = /*@__PURE__*/ (function () {\n    function ClrTooltipModule() {\n    }\n    return ClrTooltipModule;\n}());\nvar Tooltip = ClrTooltip;\nvar TooltipContent = ClrTooltipContent;\nvar TooltipTrigger = ClrTooltipTrigger;\nvar TOOLTIP_DIRECTIVES = CLR_TOOLTIP_DIRECTIVES;\nvar ClrPopoverModule = /*@__PURE__*/ (function () {\n    function ClrPopoverModule() {\n    }\n    return ClrPopoverModule;\n}());\nvar ButtonHubService = /*@__PURE__*/ (function () {\n    function ButtonHubService() {\n        this.buttonsReady = false;\n        this._previousBtnClicked = new Subject();\n        this._nextBtnClicked = new Subject();\n        this._dangerBtnClicked = new Subject();\n        this._cancelBtnClicked = new Subject();\n        this._finishBtnClicked = new Subject();\n        this._customBtnClicked = new Subject();\n    }\n    Object.defineProperty(ButtonHubService.prototype, \"previousBtnClicked\", {\n        get: function () {\n            return this._previousBtnClicked.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonHubService.prototype, \"nextBtnClicked\", {\n        get: function () {\n            return this._nextBtnClicked.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonHubService.prototype, \"dangerBtnClicked\", {\n        get: function () {\n            return this._dangerBtnClicked.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonHubService.prototype, \"cancelBtnClicked\", {\n        get: function () {\n            return this._cancelBtnClicked.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonHubService.prototype, \"finishBtnClicked\", {\n        get: function () {\n            return this._finishBtnClicked.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonHubService.prototype, \"customBtnClicked\", {\n        get: function () {\n            return this._customBtnClicked.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ButtonHubService.prototype.buttonClicked = function (buttonType) {\n        if (\"previous\" === buttonType) {\n            this._previousBtnClicked.next();\n        }\n        else if (\"next\" === buttonType) {\n            this._nextBtnClicked.next();\n        }\n        else if (\"finish\" === buttonType) {\n            this._finishBtnClicked.next();\n        }\n        else if (\"danger\" === buttonType) {\n            this._dangerBtnClicked.next();\n        }\n        else if (\"cancel\" === buttonType) {\n            this._cancelBtnClicked.next();\n        }\n        else {\n            this._customBtnClicked.next(buttonType);\n        }\n    };\n    return ButtonHubService;\n}());\nvar PageCollectionService = /*@__PURE__*/ (function () {\n    function PageCollectionService() {\n        this._pagesReset = new Subject();\n    }\n    Object.defineProperty(PageCollectionService.prototype, \"pagesAsArray\", {\n        get: function () {\n            return this.pages ? this.pages.toArray() : [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageCollectionService.prototype, \"pagesCount\", {\n        get: function () {\n            return this.pages ? this.pages.length : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageCollectionService.prototype, \"penultimatePage\", {\n        get: function () {\n            var pageCount = this.pagesCount;\n            if (pageCount < 2) {\n                return;\n            }\n            return this.pagesAsArray[pageCount - 2];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageCollectionService.prototype, \"lastPage\", {\n        get: function () {\n            var pageCount = this.pagesCount;\n            if (pageCount < 1) {\n                return;\n            }\n            return this.pagesAsArray[pageCount - 1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageCollectionService.prototype, \"firstPage\", {\n        get: function () {\n            if (!this.pagesCount) {\n                return;\n            }\n            return this.pagesAsArray[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PageCollectionService.prototype.getPageById = function (id) {\n        var foundPages = this.pages.filter(function (page) { return id === page.id; });\n        return this.checkResults(foundPages, id);\n    };\n    PageCollectionService.prototype.getPageByIndex = function (index) {\n        var pageCount = this.pagesCount;\n        var pagesLastIndex = (pageCount > 1) ? pageCount - 1 : 0;\n        if (index < 0) {\n            throw new Error(\"Cannot retrieve page with index of \" + index);\n        }\n        if (index > pagesLastIndex) {\n            throw new Error(\"Page index is greater than length of pages array.\");\n        }\n        return this.pagesAsArray[index];\n    };\n    PageCollectionService.prototype.getPageIndex = function (page) {\n        var index = this.pagesAsArray.indexOf(page);\n        if (index < 0) {\n            throw new Error(\"Requested page cannot be found in collection of pages.\");\n        }\n        return index;\n    };\n    PageCollectionService.prototype.checkResults = function (results, requestedPageId) {\n        var foundPagesCount = results.length || 0;\n        if (foundPagesCount > 1) {\n            throw new Error(\"More than one page has the requested id \" + requestedPageId + \".\");\n        }\n        else if (foundPagesCount < 1) {\n            throw new Error(\"No page can be found with the id \" + requestedPageId + \".\");\n        }\n        else {\n            return results[0];\n        }\n    };\n    PageCollectionService.prototype.pageRange = function (start, end) {\n        var pages = [];\n        if (start < 0 || end < 0) {\n            return [];\n        }\n        if (start === null || typeof start === undefined || isNaN(start)) {\n            return [];\n        }\n        if (end === null || typeof end === undefined || isNaN(end)) {\n            return [];\n        }\n        if (end > this.pagesCount) {\n            end = this.pagesCount;\n        }\n        pages = this.pagesAsArray;\n        if ((end - start) === 0) {\n            return [this.getPageByIndex(start)];\n        }\n        end = end + 1;\n        return pages.slice(start, end);\n    };\n    PageCollectionService.prototype.getPageRangeFromPages = function (page, otherPage) {\n        var pageIndex = this.getPageIndex(page);\n        var otherPageIndex = this.getPageIndex(otherPage);\n        var startIndex;\n        var endIndex;\n        if (pageIndex <= otherPageIndex) {\n            startIndex = pageIndex;\n            endIndex = otherPageIndex;\n        }\n        else {\n            startIndex = otherPageIndex;\n            endIndex = pageIndex;\n        }\n        return this.pageRange(startIndex, endIndex);\n    };\n    PageCollectionService.prototype.getPreviousPage = function (page) {\n        var myPageIndex = this.getPageIndex(page);\n        var previousPageIndex = myPageIndex - 1;\n        if (previousPageIndex < 0) {\n            return null;\n        }\n        return this.getPageByIndex(previousPageIndex);\n    };\n    PageCollectionService.prototype.previousPageIsCompleted = function (page) {\n        var previousPage;\n        if (!page) {\n            return false;\n        }\n        previousPage = this.getPreviousPage(page);\n        if (null === previousPage) {\n            return true;\n        }\n        return previousPage.completed;\n    };\n    PageCollectionService.prototype.getNextPage = function (page) {\n        var myPageIndex = this.getPageIndex(page);\n        var nextPageIndex = myPageIndex + 1;\n        if (nextPageIndex >= this.pagesAsArray.length) {\n            return null;\n        }\n        return this.getPageByIndex(nextPageIndex);\n    };\n    PageCollectionService.prototype.getStepItemIdForPage = function (page) {\n        var pageId = page.id;\n        var pageIdParts = pageId.split(\"-\").reverse();\n        pageIdParts[1] = \"step\";\n        return pageIdParts.reverse().join(\"-\");\n    };\n    PageCollectionService.prototype.commitPage = function (page) {\n        var pageHasOverrides = page.stopNext || page.preventDefault;\n        page.completed = true;\n        if (!pageHasOverrides) {\n            page.onCommit.emit(page.id);\n        }\n    };\n    Object.defineProperty(PageCollectionService.prototype, \"pagesReset\", {\n        get: function () {\n            return this._pagesReset.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PageCollectionService.prototype.reset = function () {\n        this.pagesAsArray.forEach(function (page) {\n            page.completed = false;\n        });\n        this._pagesReset.next(true);\n    };\n    PageCollectionService.prototype.updateCompletedStates = function () {\n        var firstIncompleteIndex = this.findFirstIncompletePageIndex();\n        if (firstIncompleteIndex === this.pagesAsArray.length - 1) {\n            return;\n        }\n        this.pagesAsArray.forEach(function (page, index) {\n            if (index > firstIncompleteIndex) {\n                page.completed = false;\n            }\n        });\n    };\n    PageCollectionService.prototype.findFirstIncompletePageIndex = function () {\n        var returnIndex = null;\n        this.pagesAsArray.forEach(function (page, index) {\n            if (null === returnIndex && false === page.completed) {\n                returnIndex = index;\n            }\n        });\n        if (null === returnIndex) {\n            returnIndex = this.pagesCount - 1;\n        }\n        return returnIndex;\n    };\n    PageCollectionService.prototype.findFirstIncompletePage = function () {\n        var myIncompleteIndex = this.findFirstIncompletePageIndex();\n        return this.pagesAsArray[myIncompleteIndex];\n    };\n    return PageCollectionService;\n}());\nvar WizardNavigationService = /*@__PURE__*/ (function () {\n    function WizardNavigationService(pageCollection, buttonService) {\n        var _this = this;\n        this.pageCollection = pageCollection;\n        this.buttonService = buttonService;\n        this._currentChanged = new Subject();\n        this.navServiceLoaded = false;\n        this.forceForwardNavigation = false;\n        this._movedToNextPage = new Subject();\n        this._wizardFinished = new Subject();\n        this._movedToPreviousPage = new Subject();\n        this._cancelWizard = new Subject();\n        this.wizardHasAltCancel = false;\n        this.wizardHasAltNext = false;\n        this.wizardStopNavigation = false;\n        this.wizardDisableStepnav = false;\n        this._wizardGhostPageState = GHOST_PAGE_ANIMATION.STATES.NO_PAGES;\n        this._hideWizardGhostPages = true;\n        this.previousButtonSubscription = this.buttonService.previousBtnClicked.subscribe(function () {\n            var currentPage = _this.currentPage;\n            if (_this.currentPageIsFirst || currentPage.previousStepDisabled) {\n                return;\n            }\n            currentPage.previousButtonClicked.emit(currentPage);\n            if (!currentPage.preventDefault) {\n                _this.previous();\n            }\n        });\n        this.nextButtonSubscription = this.buttonService.nextBtnClicked.subscribe(function () {\n            _this.checkAndCommitCurrentPage(\"next\");\n        });\n        this.dangerButtonSubscription = this.buttonService.dangerBtnClicked.subscribe(function () {\n            _this.checkAndCommitCurrentPage(\"danger\");\n        });\n        this.finishButtonSubscription = this.buttonService.finishBtnClicked.subscribe(function () {\n            _this.checkAndCommitCurrentPage(\"finish\");\n        });\n        this.customButtonSubscription = this.buttonService.customBtnClicked.subscribe(function (type) {\n            if (!_this.wizardStopNavigation) {\n                _this.currentPage.customButtonClicked.emit(type);\n            }\n        });\n        this.cancelButtonSubscription = this.buttonService.cancelBtnClicked.subscribe(function () {\n            if (_this.wizardStopNavigation) {\n                return;\n            }\n            if (_this.currentPage.preventDefault) {\n                _this.currentPage.pageOnCancel.emit(_this.currentPage);\n            }\n            else {\n                _this.cancel();\n            }\n        });\n        this.pagesResetSubscription = this.pageCollection.pagesReset.subscribe(function () {\n            _this.setFirstPageCurrent();\n        });\n    }\n    WizardNavigationService.prototype.ngOnDestroy = function () {\n        this.previousButtonSubscription.unsubscribe();\n        this.nextButtonSubscription.unsubscribe();\n        this.dangerButtonSubscription.unsubscribe();\n        this.finishButtonSubscription.unsubscribe();\n        this.customButtonSubscription.unsubscribe();\n        this.cancelButtonSubscription.unsubscribe();\n        this.pagesResetSubscription.unsubscribe();\n    };\n    Object.defineProperty(WizardNavigationService.prototype, \"currentPageChanged\", {\n        get: function () {\n            return this._currentChanged.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationService.prototype, \"currentPageTitle\", {\n        get: function () {\n            if (!this.currentPage) {\n                return null;\n            }\n            return this.currentPage.title;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationService.prototype, \"currentPageIsFirst\", {\n        get: function () {\n            return this.pageCollection.firstPage === this.currentPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationService.prototype, \"currentPageIsNextToLast\", {\n        get: function () {\n            return this.pageCollection.penultimatePage === this.currentPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationService.prototype, \"currentPageIsLast\", {\n        get: function () {\n            return this.pageCollection.lastPage === this.currentPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationService.prototype, \"currentPage\", {\n        get: function () {\n            if (!this._currentPage) {\n                return null;\n            }\n            return this._currentPage;\n        },\n        set: function (page) {\n            if (this._currentPage !== page && !this.wizardStopNavigation) {\n                this._currentPage = page;\n                page.onLoad.emit(page.id);\n                this._currentChanged.next(page);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WizardNavigationService.prototype.setCurrentPage = function (page) {\n        this.currentPage = page;\n    };\n    Object.defineProperty(WizardNavigationService.prototype, \"movedToNextPage\", {\n        get: function () {\n            return this._movedToNextPage.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationService.prototype, \"wizardFinished\", {\n        get: function () {\n            return this._wizardFinished.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WizardNavigationService.prototype.next = function () {\n        if (this.currentPageIsLast) {\n            this.checkAndCommitCurrentPage(\"finish\");\n            return;\n        }\n        this.checkAndCommitCurrentPage(\"next\");\n        if (!this.wizardHasAltNext && !this.wizardStopNavigation) {\n            this._movedToNextPage.next(true);\n        }\n    };\n    WizardNavigationService.prototype.forceNext = function () {\n        var currentPage = this.currentPage;\n        var nextPage = this.pageCollection.getNextPage(currentPage);\n        if (!nextPage) {\n            throw new Error(\"The wizard has no next page to go to.\");\n        }\n        if (this.wizardStopNavigation) {\n            return;\n        }\n        if (!currentPage.completed) {\n            this.pageCollection.commitPage(currentPage);\n        }\n        this.currentPage = nextPage;\n    };\n    WizardNavigationService.prototype.checkAndCommitCurrentPage = function (buttonType) {\n        var currentPage = this.currentPage;\n        var iAmTheLastPage;\n        var isNext;\n        var isDanger;\n        var isDangerNext;\n        var isDangerFinish;\n        var isFinish;\n        if (!currentPage.readyToComplete || this.wizardStopNavigation) {\n            return;\n        }\n        iAmTheLastPage = this.currentPageIsLast;\n        isNext = buttonType === \"next\";\n        isDanger = buttonType === \"danger\";\n        isDangerNext = isDanger && !iAmTheLastPage;\n        isDangerFinish = isDanger && iAmTheLastPage;\n        isFinish = buttonType === \"finish\" || isDangerFinish;\n        if (isFinish && !iAmTheLastPage) {\n            return;\n        }\n        currentPage.primaryButtonClicked.emit(buttonType);\n        if (isFinish) {\n            currentPage.finishButtonClicked.emit(currentPage);\n        }\n        else if (isDanger) {\n            currentPage.dangerButtonClicked.emit();\n        }\n        else if (isNext) {\n            currentPage.nextButtonClicked.emit();\n        }\n        if (currentPage.stopNext || currentPage.preventDefault) {\n            currentPage.onCommit.emit(currentPage.id);\n            return;\n        }\n        if (isFinish) {\n            if (!this.wizardHasAltNext) {\n                this.pageCollection.commitPage(currentPage);\n            }\n            this._wizardFinished.next();\n        }\n        if (this.wizardHasAltNext) {\n            this.pageCollection.commitPage(currentPage);\n            if (isNext || isDangerNext) {\n                this._movedToNextPage.next(true);\n            }\n            return;\n        }\n        if (isNext || isDangerNext) {\n            this.forceNext();\n        }\n    };\n    WizardNavigationService.prototype.finish = function () {\n        this.checkAndCommitCurrentPage(\"finish\");\n    };\n    Object.defineProperty(WizardNavigationService.prototype, \"movedToPreviousPage\", {\n        get: function () {\n            return this._movedToPreviousPage.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WizardNavigationService.prototype.previous = function () {\n        var previousPage;\n        if (this.currentPageIsFirst || this.wizardStopNavigation) {\n            return;\n        }\n        previousPage = this.pageCollection.getPreviousPage(this.currentPage);\n        if (!previousPage) {\n            return;\n        }\n        this._movedToPreviousPage.next(true);\n        if (this.forceForwardNavigation) {\n            this.currentPage.completed = false;\n        }\n        this.currentPage = previousPage;\n    };\n    Object.defineProperty(WizardNavigationService.prototype, \"notifyWizardCancel\", {\n        get: function () {\n            return this._cancelWizard.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WizardNavigationService.prototype.cancel = function () {\n        this._cancelWizard.next();\n    };\n    WizardNavigationService.prototype.goTo = function (pageToGoToOrId, lazyComplete) {\n        if (lazyComplete === void 0) {\n            lazyComplete = false;\n        }\n        var pageToGoTo;\n        var currentPage;\n        var myPages;\n        var pagesToCheck;\n        var okayToMove = true;\n        var goingForward;\n        var currentPageIndex;\n        var goToPageIndex;\n        myPages = this.pageCollection;\n        pageToGoTo = (typeof pageToGoToOrId === \"string\") ? myPages.getPageById(pageToGoToOrId) : pageToGoToOrId;\n        currentPage = this.currentPage;\n        if (pageToGoTo === currentPage || this.wizardStopNavigation) {\n            return;\n        }\n        currentPageIndex = myPages.getPageIndex(currentPage);\n        goToPageIndex = myPages.getPageIndex(pageToGoTo);\n        goingForward = (goToPageIndex > currentPageIndex);\n        pagesToCheck = myPages.getPageRangeFromPages(this.currentPage, pageToGoTo);\n        okayToMove = lazyComplete || this.canGoTo(pagesToCheck);\n        if (!okayToMove) {\n            return;\n        }\n        if (goingForward && lazyComplete) {\n            pagesToCheck.forEach(function (page) {\n                if (page !== pageToGoTo) {\n                    page.completed = true;\n                }\n            });\n        }\n        else if (!goingForward && this.forceForwardNavigation) {\n            pagesToCheck.forEach(function (page) {\n                page.completed = false;\n            });\n        }\n        this.currentPage = pageToGoTo;\n    };\n    WizardNavigationService.prototype.canGoTo = function (pagesToCheck) {\n        var okayToMove = true;\n        var myPages = this.pageCollection;\n        var previousPagePasses;\n        if (!pagesToCheck || pagesToCheck.length < 1) {\n            return false;\n        }\n        pagesToCheck.forEach(function (page) {\n            var previousPage;\n            if (!okayToMove) {\n                return;\n            }\n            if (page.completed) {\n                return;\n            }\n            previousPage = myPages.getPageIndex(page) > 0 ? myPages.getPreviousPage(page) : null;\n            previousPagePasses = (previousPage === null) || (previousPage.completed === true);\n            if (!page.current && !previousPagePasses) {\n                okayToMove = false;\n            }\n        });\n        return okayToMove;\n    };\n    WizardNavigationService.prototype.setLastEnabledPageCurrent = function () {\n        var allPages = this.pageCollection.pagesAsArray;\n        var lastCompletedPageIndex = null;\n        allPages.forEach(function (page, index) {\n            if (page.completed) {\n                lastCompletedPageIndex = index;\n            }\n        });\n        if (lastCompletedPageIndex === null) {\n            lastCompletedPageIndex = 0;\n        }\n        else if ((lastCompletedPageIndex + 1) < allPages.length) {\n            lastCompletedPageIndex = lastCompletedPageIndex + 1;\n        }\n        this.currentPage = allPages[lastCompletedPageIndex];\n    };\n    WizardNavigationService.prototype.setFirstPageCurrent = function () {\n        this.currentPage = this.pageCollection.pagesAsArray[0];\n    };\n    Object.defineProperty(WizardNavigationService.prototype, \"wizardGhostPageState\", {\n        get: function () {\n            return this._wizardGhostPageState;\n        },\n        set: function (value) {\n            if (this.hideWizardGhostPages) {\n                this._wizardGhostPageState = GHOST_PAGE_ANIMATION.STATES.NO_PAGES;\n            }\n            else {\n                this._wizardGhostPageState = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationService.prototype, \"hideWizardGhostPages\", {\n        get: function () {\n            return this._hideWizardGhostPages;\n        },\n        set: function (value) {\n            this._hideWizardGhostPages = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WizardNavigationService.prototype.updateNavigation = function () {\n        var toSetCurrent;\n        var currentPageRemoved;\n        this.pageCollection.updateCompletedStates();\n        currentPageRemoved = this.pageCollection.pagesAsArray.indexOf(this.currentPage) < 0;\n        if (currentPageRemoved) {\n            toSetCurrent = this.pageCollection.findFirstIncompletePage();\n            this.currentPage = toSetCurrent;\n        }\n    };\n    return WizardNavigationService;\n}());\nvar HeaderActionService = /*@__PURE__*/ (function () {\n    function HeaderActionService(navService) {\n        this.navService = navService;\n    }\n    Object.defineProperty(HeaderActionService.prototype, \"wizardHasHeaderActions\", {\n        get: function () {\n            var wizardHdrActions = this.wizardHeaderActions;\n            if (!wizardHdrActions) {\n                return false;\n            }\n            return wizardHdrActions.toArray().length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HeaderActionService.prototype, \"currentPageHasHeaderActions\", {\n        get: function () {\n            return this.navService.currentPage ? this.navService.currentPage.hasHeaderActions : false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HeaderActionService.prototype, \"showWizardHeaderActions\", {\n        get: function () {\n            return !this.currentPageHasHeaderActions && this.wizardHasHeaderActions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HeaderActionService.prototype, \"displayHeaderActionsWrapper\", {\n        get: function () {\n            return this.currentPageHasHeaderActions || this.wizardHasHeaderActions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return HeaderActionService;\n}());\nvar wizardHeaderActionIndex = 0;\nvar ClrWizardHeaderAction = /*@__PURE__*/ (function () {\n    function ClrWizardHeaderAction() {\n        this.title = \"\";\n        this._id = (wizardHeaderActionIndex++).toString();\n        this.disabled = false;\n        this.headerActionClicked = new EventEmitter(false);\n    }\n    Object.defineProperty(ClrWizardHeaderAction.prototype, \"id\", {\n        get: function () {\n            return \"clr-wizard-header-action-\" + this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrWizardHeaderAction.prototype.click = function () {\n        if (this.disabled) {\n            return;\n        }\n        this.headerActionClicked.emit(this._id);\n    };\n    return ClrWizardHeaderAction;\n}());\nvar ClrWizardPageButtons = /*@__PURE__*/ (function () {\n    function ClrWizardPageButtons(pageButtonsTemplateRef) {\n        this.pageButtonsTemplateRef = pageButtonsTemplateRef;\n    }\n    return ClrWizardPageButtons;\n}());\nvar ClrWizardPageHeaderActions = /*@__PURE__*/ (function () {\n    function ClrWizardPageHeaderActions(pageHeaderActionsTemplateRef) {\n        this.pageHeaderActionsTemplateRef = pageHeaderActionsTemplateRef;\n    }\n    return ClrWizardPageHeaderActions;\n}());\nvar ClrWizardPageNavTitle = /*@__PURE__*/ (function () {\n    function ClrWizardPageNavTitle(pageNavTitleTemplateRef) {\n        this.pageNavTitleTemplateRef = pageNavTitleTemplateRef;\n    }\n    return ClrWizardPageNavTitle;\n}());\nvar ClrWizardPageTitle = /*@__PURE__*/ (function () {\n    function ClrWizardPageTitle(pageTitleTemplateRef) {\n        this.pageTitleTemplateRef = pageTitleTemplateRef;\n    }\n    return ClrWizardPageTitle;\n}());\nvar wizardPageIndex = 0;\nvar ClrWizardPage = /*@__PURE__*/ (function () {\n    function ClrWizardPage(navService, pageCollection, buttonService) {\n        this.navService = navService;\n        this.pageCollection = pageCollection;\n        this.buttonService = buttonService;\n        this._nextStepDisabled = false;\n        this.nextStepDisabledChange = new EventEmitter();\n        this._previousStepDisabled = false;\n        this.previousStepDisabledChange = new EventEmitter();\n        this.preventDefault = false;\n        this._stopCancel = false;\n        this.stopCancelChange = new EventEmitter();\n        this._stopNext = false;\n        this.onCommit = new EventEmitter(false);\n        this.onLoad = new EventEmitter();\n        this.pageOnCancel = new EventEmitter();\n        this.finishButtonClicked = new EventEmitter();\n        this.previousButtonClicked = new EventEmitter();\n        this.nextButtonClicked = new EventEmitter();\n        this.dangerButtonClicked = new EventEmitter();\n        this.primaryButtonClicked = new EventEmitter();\n        this.customButtonClicked = new EventEmitter();\n        this._id = (wizardPageIndex++).toString();\n        this._complete = false;\n    }\n    Object.defineProperty(ClrWizardPage.prototype, \"nextStepDisabled\", {\n        get: function () {\n            return this._nextStepDisabled;\n        },\n        set: function (val) {\n            var valBool = !!val;\n            if (valBool !== this._nextStepDisabled) {\n                this._nextStepDisabled = valBool;\n                this.nextStepDisabledChange.emit(valBool);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"previousStepDisabled\", {\n        get: function () {\n            return this._previousStepDisabled;\n        },\n        set: function (val) {\n            var valBool = !!val;\n            if (valBool !== this._previousStepDisabled) {\n                this._previousStepDisabled = valBool;\n                this.previousStepDisabledChange.emit(valBool);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"stopCancel\", {\n        get: function () {\n            return this._stopCancel;\n        },\n        set: function (val) {\n            var valBool = !!val;\n            if (valBool !== this._stopCancel) {\n                this._stopCancel = valBool;\n                this.stopCancelChange.emit(valBool);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"stopNext\", {\n        get: function () {\n            return this._stopNext;\n        },\n        set: function (val) {\n            var valBool = !!val;\n            if (valBool !== this._stopNext) {\n                this._stopNext = valBool;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"id\", {\n        get: function () {\n            var idIsNonZeroFalsy = (!this._id && this._id !== 0);\n            if (idIsNonZeroFalsy || this._id < 0) {\n                this._id = (wizardPageIndex++).toString();\n            }\n            return \"clr-wizard-page-\" + this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"readyToComplete\", {\n        get: function () {\n            return !this.nextStepDisabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"completed\", {\n        get: function () {\n            return this._complete && this.readyToComplete;\n        },\n        set: function (value) {\n            this._complete = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"current\", {\n        get: function () {\n            return this.navService.currentPage === this;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"disabled\", {\n        get: function () {\n            return !this.enabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"enabled\", {\n        get: function () {\n            return this.current || this.completed || this.previousCompleted;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"previousCompleted\", {\n        get: function () {\n            var previousPage = this.pageCollection.getPreviousPage(this);\n            if (!previousPage) {\n                return true;\n            }\n            return previousPage.completed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"title\", {\n        get: function () {\n            return this.pageTitle.pageTitleTemplateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"navTitle\", {\n        get: function () {\n            if (this.pageNavTitle) {\n                return this.pageNavTitle.pageNavTitleTemplateRef;\n            }\n            return this.pageTitle.pageTitleTemplateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"headerActions\", {\n        get: function () {\n            if (!this._headerActions) {\n                return;\n            }\n            return this._headerActions.pageHeaderActionsTemplateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"hasHeaderActions\", {\n        get: function () {\n            return !!this._headerActions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"buttons\", {\n        get: function () {\n            if (!this._buttons) {\n                return;\n            }\n            return this._buttons.pageButtonsTemplateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardPage.prototype, \"hasButtons\", {\n        get: function () {\n            return !!this._buttons;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrWizardPage.prototype.makeCurrent = function () {\n        this.navService.currentPage = this;\n    };\n    ClrWizardPage.prototype.ngOnInit = function () {\n        var navService = this.navService;\n        if (!navService.currentPage && !navService.navServiceLoaded) {\n            this.makeCurrent();\n            this.navService.navServiceLoaded = true;\n        }\n    };\n    Object.defineProperty(ClrWizardPage.prototype, \"stepItemId\", {\n        get: function () {\n            return this.pageCollection.getStepItemIdForPage(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClrWizardPage;\n}());\nvar ClrWizard = /*@__PURE__*/ (function () {\n    function ClrWizard(navService, pageCollection, buttonService, headerActionService, elementRef, differs) {\n        var _this = this;\n        this.navService = navService;\n        this.pageCollection = pageCollection;\n        this.buttonService = buttonService;\n        this.headerActionService = headerActionService;\n        this.elementRef = elementRef;\n        this.size = \"xl\";\n        this.showGhostPages = false;\n        this._forceForward = false;\n        this.closable = true;\n        this._open = false;\n        this._openChanged = new EventEmitter(false);\n        this.onCancel = new EventEmitter(false);\n        this.wizardFinished = new EventEmitter(false);\n        this.onReset = new EventEmitter(false);\n        this.currentPageChanged = new EventEmitter(false);\n        this.onMoveNext = new EventEmitter(false);\n        this.onMovePrevious = new EventEmitter(false);\n        this._stopNext = false;\n        this._stopCancel = false;\n        this._stopNavigation = false;\n        this._disableStepnav = false;\n        this._stopModalAnimations = false;\n        this.goNextSubscription = this.navService.movedToNextPage.subscribe(function () {\n            _this.onMoveNext.emit();\n        });\n        this.goPreviousSubscription = this.navService.movedToPreviousPage.subscribe(function () {\n            _this.onMovePrevious.emit();\n        });\n        this.cancelSubscription = this.navService.notifyWizardCancel.subscribe(function () {\n            _this.checkAndCancel();\n        });\n        this.wizardFinishedSubscription = this.navService.wizardFinished.subscribe(function () {\n            if (!_this.stopNext) {\n                _this.forceFinish();\n            }\n            _this.wizardFinished.emit();\n        });\n        this.differ = differs.find([]).create(null);\n    }\n    Object.defineProperty(ClrWizard.prototype, \"forceForward\", {\n        get: function () {\n            return this._forceForward;\n        },\n        set: function (value) {\n            this._forceForward = !!value;\n            this.navService.forceForwardNavigation = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizard.prototype, \"clrWizardOpen\", {\n        set: function (open) {\n            if (open) {\n                this.buttonService.buttonsReady = true;\n            }\n            this._open = open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizard.prototype, \"stopNext\", {\n        get: function () {\n            return this._stopNext;\n        },\n        set: function (value) {\n            this._stopNext = !!value;\n            this.navService.wizardHasAltNext = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizard.prototype, \"stopCancel\", {\n        get: function () {\n            return this._stopCancel;\n        },\n        set: function (value) {\n            this._stopCancel = !!value;\n            this.navService.wizardHasAltCancel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizard.prototype, \"stopNavigation\", {\n        get: function () {\n            return this._stopNavigation;\n        },\n        set: function (value) {\n            this._stopNavigation = !!value;\n            this.navService.wizardStopNavigation = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizard.prototype, \"disableStepnav\", {\n        get: function () {\n            return this._disableStepnav;\n        },\n        set: function (value) {\n            this._disableStepnav = !!value;\n            this.navService.wizardDisableStepnav = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizard.prototype, \"stopModalAnimations\", {\n        get: function () {\n            if (this._stopModalAnimations) {\n                return \"true\";\n            }\n            return \"false\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrWizard.prototype.ngOnInit = function () {\n        var _this = this;\n        this.currentPageSubscription = this.navService.currentPageChanged.subscribe(function (page) {\n            _this.setGhostPages();\n            _this.currentPageChanged.emit();\n        });\n    };\n    ClrWizard.prototype.ngOnDestroy = function () {\n        if (this.goNextSubscription) {\n            this.goNextSubscription.unsubscribe();\n        }\n        if (this.goPreviousSubscription) {\n            this.goPreviousSubscription.unsubscribe();\n        }\n        if (this.cancelSubscription) {\n            this.cancelSubscription.unsubscribe();\n        }\n        if (this.currentPageSubscription) {\n            this.currentPageSubscription.unsubscribe();\n        }\n        if (this.wizardFinishedSubscription) {\n            this.wizardFinishedSubscription.unsubscribe();\n        }\n    };\n    ClrWizard.prototype.ngAfterContentInit = function () {\n        var navService = this.navService;\n        this.pageCollection.pages = this.pages;\n        this.headerActionService.wizardHeaderActions = this.headerActions;\n        if (this.showGhostPages) {\n            navService.hideWizardGhostPages = false;\n            this.deactivateGhostPages();\n        }\n        if (this._open) {\n            this.buttonService.buttonsReady = true;\n        }\n    };\n    ClrWizard.prototype.ngDoCheck = function () {\n        var _this = this;\n        var changes = this.differ.diff(this.pages);\n        if (changes) {\n            changes.forEachAddedItem(function (r) {\n                _this.navService.updateNavigation();\n            });\n            changes.forEachRemovedItem(function (r) {\n                _this.navService.updateNavigation();\n            });\n        }\n    };\n    Object.defineProperty(ClrWizard.prototype, \"isStatic\", {\n        get: function () {\n            return this.elementRef.nativeElement.classList.contains(\"clr-wizard--inline\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizard.prototype, \"currentPage\", {\n        get: function () {\n            return this.navService.currentPage;\n        },\n        set: function (page) {\n            this.navService.goTo(page, true);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizard.prototype, \"isLast\", {\n        get: function () {\n            return this.navService.currentPageIsLast;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizard.prototype, \"isFirst\", {\n        get: function () {\n            return this.navService.currentPageIsFirst;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrWizard.prototype.open = function () {\n        this._open = true;\n        if (!this.currentPage) {\n            this.navService.setFirstPageCurrent();\n        }\n        this.buttonService.buttonsReady = true;\n        this.setGhostPages();\n        this._openChanged.emit(true);\n    };\n    ClrWizard.prototype.close = function () {\n        if (this.stopNavigation) {\n            return;\n        }\n        this._open = false;\n        this.deactivateGhostPages();\n        this._openChanged.emit(false);\n    };\n    ClrWizard.prototype.toggle = function (value) {\n        if (value) {\n            this.open();\n        }\n        else {\n            this.close();\n        }\n    };\n    ClrWizard.prototype.prev = function () {\n        this.previous();\n    };\n    ClrWizard.prototype.previous = function () {\n        this.navService.previous();\n    };\n    ClrWizard.prototype.next = function (skipChecksAndEmits) {\n        if (skipChecksAndEmits === void 0) {\n            skipChecksAndEmits = true;\n        }\n        if (skipChecksAndEmits) {\n            this.forceNext();\n        }\n        else {\n            this.navService.next();\n        }\n    };\n    ClrWizard.prototype.finish = function (skipChecksAndEmits) {\n        if (skipChecksAndEmits === void 0) {\n            skipChecksAndEmits = true;\n        }\n        if (skipChecksAndEmits) {\n            this.forceFinish();\n        }\n        else {\n            this.navService.finish();\n        }\n    };\n    ClrWizard.prototype.forceFinish = function () {\n        if (this.stopNavigation) {\n            return;\n        }\n        this.deactivateGhostPages();\n        this.close();\n    };\n    ClrWizard.prototype.forceNext = function () {\n        this.navService.forceNext();\n    };\n    ClrWizard.prototype.cancel = function () {\n        this.navService.cancel();\n    };\n    ClrWizard.prototype.modalCancel = function () {\n        this.checkAndCancel();\n    };\n    ClrWizard.prototype.checkAndCancel = function () {\n        var currentPage = this.currentPage;\n        var currentPageHasOverrides = currentPage.stopCancel || currentPage.preventDefault;\n        if (this.stopNavigation) {\n            return;\n        }\n        currentPage.pageOnCancel.emit();\n        if (!currentPageHasOverrides) {\n            this.onCancel.emit();\n        }\n        if (!this.stopCancel && !currentPageHasOverrides) {\n            this.close();\n        }\n    };\n    ClrWizard.prototype.goTo = function (pageId) {\n        if (!pageId) {\n            return;\n        }\n        this.navService.goTo(pageId);\n    };\n    ClrWizard.prototype.reset = function () {\n        this.pageCollection.reset();\n        this.onReset.next();\n    };\n    Object.defineProperty(ClrWizard.prototype, \"ghostPageState\", {\n        get: function () {\n            return this.navService.wizardGhostPageState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrWizard.prototype.deactivateGhostPages = function () {\n        this.setGhostPages(\"deactivate\");\n    };\n    ClrWizard.prototype.setGhostPages = function (deactivateOrNot) {\n        if (deactivateOrNot === void 0) {\n            deactivateOrNot = \"\";\n        }\n        var navService = this.navService;\n        var ghostpageStates = GHOST_PAGE_ANIMATION.STATES;\n        if (this.showGhostPages) {\n            if (deactivateOrNot === \"deactivate\") {\n                navService.wizardGhostPageState = ghostpageStates.NO_PAGES;\n            }\n            else if (navService.currentPageIsLast) {\n                navService.wizardGhostPageState = ghostpageStates.LAST_PAGE;\n            }\n            else if (navService.currentPageIsNextToLast) {\n                navService.wizardGhostPageState = ghostpageStates.NEXT_TO_LAST_PAGE;\n            }\n            else {\n                navService.wizardGhostPageState = ghostpageStates.ALL_PAGES;\n            }\n        }\n    };\n    return ClrWizard;\n}());\nvar DEFAULT_BUTTON_TYPES = {\n    cancel: \"cancel\",\n    previous: \"previous\",\n    next: \"next\",\n    finish: \"finish\",\n    danger: \"danger\"\n};\nvar CUSTOM_BUTTON_TYPES = {\n    cancel: \"custom-cancel\",\n    previous: \"custom-previous\",\n    next: \"custom-next\",\n    finish: \"custom-finish\",\n    danger: \"custom-danger\"\n};\nvar ClrWizardButton = /*@__PURE__*/ (function () {\n    function ClrWizardButton(navService, buttonService) {\n        this.navService = navService;\n        this.buttonService = buttonService;\n        this.type = \"\";\n        this.disabled = false;\n        this.hidden = false;\n        this.wasClicked = new EventEmitter(false);\n    }\n    ClrWizardButton.prototype.checkDefaultAndCustomType = function (valueToCheck, typeToLookUp) {\n        if (valueToCheck === void 0) {\n            valueToCheck = \"\";\n        }\n        if (DEFAULT_BUTTON_TYPES[typeToLookUp] === valueToCheck) {\n            return true;\n        }\n        if (CUSTOM_BUTTON_TYPES[typeToLookUp] === valueToCheck) {\n            return true;\n        }\n        return false;\n    };\n    Object.defineProperty(ClrWizardButton.prototype, \"isCancel\", {\n        get: function () {\n            return this.checkDefaultAndCustomType(this.type, \"cancel\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardButton.prototype, \"isNext\", {\n        get: function () {\n            return this.checkDefaultAndCustomType(this.type, \"next\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardButton.prototype, \"isPrevious\", {\n        get: function () {\n            return this.checkDefaultAndCustomType(this.type, \"previous\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardButton.prototype, \"isFinish\", {\n        get: function () {\n            return this.checkDefaultAndCustomType(this.type, \"finish\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardButton.prototype, \"isDanger\", {\n        get: function () {\n            return this.checkDefaultAndCustomType(this.type, \"danger\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardButton.prototype, \"isPrimaryAction\", {\n        get: function () {\n            return this.isNext || this.isDanger || this.isFinish;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardButton.prototype, \"_disabledAttribute\", {\n        get: function () {\n            if (this.isDisabled) {\n                return \"\";\n            }\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardButton.prototype, \"isDisabled\", {\n        get: function () {\n            var disabled = true;\n            var nav = this.navService;\n            var page = this.navService.currentPage;\n            if (!this.buttonService.buttonsReady) {\n                return !disabled;\n            }\n            if (this.disabled || nav.wizardStopNavigation || !page) {\n                return true;\n            }\n            if (this.isCancel) {\n                return !disabled;\n            }\n            if (this.isPrevious && (nav.currentPageIsFirst || page.previousStepDisabled)) {\n                return disabled;\n            }\n            if (this.isDanger && !page.readyToComplete) {\n                return disabled;\n            }\n            if (this.isNext && (nav.currentPageIsLast || !page.readyToComplete)) {\n                return disabled;\n            }\n            if (this.isFinish && (!nav.currentPageIsLast || !page.readyToComplete)) {\n                return disabled;\n            }\n            return !disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardButton.prototype, \"isHidden\", {\n        get: function () {\n            var hidden = true;\n            var nav = this.navService;\n            if (!this.buttonService.buttonsReady) {\n                return !hidden;\n            }\n            if (this.hidden) {\n                return true;\n            }\n            if (this.isCancel) {\n                return !hidden;\n            }\n            if (this.isPrevious && nav.currentPageIsFirst) {\n                return hidden;\n            }\n            if (this.isNext && nav.currentPageIsLast) {\n                return hidden;\n            }\n            if (this.isFinish && !nav.currentPageIsLast) {\n                return hidden;\n            }\n            return !hidden;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrWizardButton.prototype.click = function () {\n        if (this.isDisabled) {\n            return;\n        }\n        this.wasClicked.emit(this.type);\n        this.buttonService.buttonClicked(this.type);\n    };\n    return ClrWizardButton;\n}());\nvar ClrWizardCustomTags = /*@__PURE__*/ (function () {\n    function ClrWizardCustomTags() {\n    }\n    return ClrWizardCustomTags;\n}());\nvar ClrWizardStepnav = /*@__PURE__*/ (function () {\n    function ClrWizardStepnav(pageService) {\n        this.pageService = pageService;\n    }\n    return ClrWizardStepnav;\n}());\nvar ClrWizardStepnavItem = /*@__PURE__*/ (function () {\n    function ClrWizardStepnavItem(navService, pageCollection) {\n        this.navService = navService;\n        this.pageCollection = pageCollection;\n    }\n    ClrWizardStepnavItem.prototype.pageGuard = function () {\n        if (!this.page) {\n            throw new Error(\"Wizard stepnav item is not associated with a wizard page.\");\n        }\n    };\n    Object.defineProperty(ClrWizardStepnavItem.prototype, \"id\", {\n        get: function () {\n            this.pageGuard();\n            return this.pageCollection.getStepItemIdForPage(this.page);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardStepnavItem.prototype, \"isDisabled\", {\n        get: function () {\n            this.pageGuard();\n            return this.page.disabled || this.navService.wizardStopNavigation || this.navService.wizardDisableStepnav;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardStepnavItem.prototype, \"isCurrent\", {\n        get: function () {\n            this.pageGuard();\n            return this.page.current;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardStepnavItem.prototype, \"isComplete\", {\n        get: function () {\n            this.pageGuard();\n            return this.page.completed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ClrWizardStepnavItem.prototype, \"canNavigate\", {\n        get: function () {\n            this.pageGuard();\n            return this.pageCollection.previousPageIsCompleted(this.page);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClrWizardStepnavItem.prototype.click = function () {\n        this.pageGuard();\n        if (this.isDisabled || this.isCurrent) {\n            return;\n        }\n        this.navService.goTo(this.page);\n    };\n    return ClrWizardStepnavItem;\n}());\nvar CLR_WIZARD_DIRECTIVES = [\n    ClrWizard, ClrWizardPage, ClrWizardStepnav, ClrWizardStepnavItem, ClrWizardButton, ClrWizardHeaderAction,\n    ClrWizardCustomTags, ClrWizardPageTitle, ClrWizardPageNavTitle, ClrWizardPageButtons, ClrWizardPageHeaderActions\n];\nvar ClrWizardModule = /*@__PURE__*/ (function () {\n    function ClrWizardModule() {\n    }\n    return ClrWizardModule;\n}());\nvar Wizard = ClrWizard;\nvar WizardPage = ClrWizardPage;\nvar WizardStepnav = ClrWizardStepnav;\nvar WizardStepnavItem = ClrWizardStepnavItem;\nvar WizardButton = ClrWizardButton;\nvar WizardHeaderAction = ClrWizardHeaderAction;\nvar WizardCustomTags = ClrWizardCustomTags;\nvar WizardPageTitleDirective = ClrWizardPageTitle;\nvar WizardPageNavTitleDirective = ClrWizardPageNavTitle;\nvar WizardPageButtonsDirective = ClrWizardPageButtons;\nvar WizardPageHeaderActionsDirective = ClrWizardPageHeaderActions;\nvar WIZARD_DIRECTIVES = CLR_WIZARD_DIRECTIVES;\nvar ClarityModule = /*@__PURE__*/ (function () {\n    function ClarityModule() {\n    }\n    ClarityModule.forRoot = function () {\n        return { ngModule: ClarityModule, providers: [] };\n    };\n    ClarityModule.forChild = function () {\n        return { ngModule: ClarityModule, providers: [] };\n    };\n    return ClarityModule;\n}());\nvar ClrLabel = /*@__PURE__*/ (function () {\n    function ClrLabel(formControlService) {\n        this.formControlService = formControlService;\n    }\n    ClrLabel.prototype.ngOnInit = function () {\n        var _this = this;\n        if (!this.forAttr && this.formControlService) {\n            this.subscription = this.formControlService.idChange.subscribe(function (id) { return _this.forAttr = id; });\n        }\n    };\n    ClrLabel.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    return ClrLabel;\n}());\nvar ClrCommonFormsModule = /*@__PURE__*/ (function () {\n    function ClrCommonFormsModule() {\n    }\n    return ClrCommonFormsModule;\n}());\nvar ClrCheckboxContainer = /*@__PURE__*/ (function () {\n    function ClrCheckboxContainer() {\n        this._dynamic = false;\n    }\n    return ClrCheckboxContainer;\n}());\nvar ClrCheckboxNext = /*@__PURE__*/ (function (_super) {\n    __extends(ClrCheckboxNext, _super);\n    function ClrCheckboxNext(vcr) {\n        return _super.call(this, ClrCheckboxContainer, vcr) || this;\n    }\n    return ClrCheckboxNext;\n}(WrappedFormControl));\nvar ClrCheckboxNextModule = /*@__PURE__*/ (function () {\n    function ClrCheckboxNextModule() {\n    }\n    return ClrCheckboxNextModule;\n}());\nvar ClrRadioContainer = /*@__PURE__*/ (function () {\n    function ClrRadioContainer() {\n        this._dynamic = false;\n    }\n    return ClrRadioContainer;\n}());\nvar ClrRadio = /*@__PURE__*/ (function (_super) {\n    __extends(ClrRadio, _super);\n    function ClrRadio(vcr) {\n        return _super.call(this, ClrRadioContainer, vcr) || this;\n    }\n    return ClrRadio;\n}(WrappedFormControl));\nvar ClrRadioModule = /*@__PURE__*/ (function () {\n    function ClrRadioModule() {\n    }\n    return ClrRadioModule;\n}());\nvar ClrFormsNextModule = /*@__PURE__*/ (function () {\n    function ClrFormsNextModule() {\n    }\n    return ClrFormsNextModule;\n}());\nfunction collapse() {\n    return [\n        state(\"true\", style({ \"height\": 0, \"overflow-y\": \"hidden\" })),\n        transition(\"true => false\", [animate(\"0.2s ease-in-out\", style({ \"height\": \"*\", \"overflow-y\": \"hidden\" }))]),\n        transition(\"false => true\", [style({ \"height\": \"*\", \"overflow-y\": \"hidden\" }), animate(\"0.2s ease-in-out\")])\n    ];\n}\nfunction fade(opacity) {\n    if (opacity === void 0) {\n        opacity = 1;\n    }\n    return [\n        transition(\"void => *\", [style({ opacity: 0 }), animate(\"0.2s ease-in-out\", style({ opacity: opacity }))]),\n        transition(\"* => void\", [animate(\"0.2s ease-in-out\", style({ opacity: 0 }))])\n    ];\n}\nfunction fadeSlide(direction) {\n    var transform = null;\n    if (direction === \"up\") {\n        transform = \"translate(0, 25%)\";\n    }\n    else if (direction === \"down\") {\n        transform = \"translate(0, -25%)\";\n    }\n    else if (direction === \"left\") {\n        transform = \"translate(25%, 0)\";\n    }\n    else if (direction === \"right\") {\n        transform = \"translate(-25%, 0)\";\n    }\n    else {\n        throw new Error(\"Unknown direction \" + direction + \" for slide animation.\");\n    }\n    return [\n        transition(\"void => *\", [style({ opacity: 0, transform: transform }), animate(\"0.2s ease-in-out\")]),\n        transition(\"* => void\", [animate(\"0.2s ease-in-out\", style({ opacity: 0, transform: transform }))])\n    ];\n}\nfunction slide(direction) {\n    var transform = null;\n    if (direction === \"up\") {\n        transform = \"translate(0, 25%)\";\n    }\n    else if (direction === \"down\") {\n        transform = \"translate(0, -25%)\";\n    }\n    else if (direction === \"left\") {\n        transform = \"translate(25%, 0)\";\n    }\n    else if (direction === \"right\") {\n        transform = \"translate(-25%, 0)\";\n    }\n    else {\n        throw new Error(\"Unknown direction \" + direction + \" for slide animation.\");\n    }\n    return [\n        transition(\"void => *\", [style({ transform: transform }), animate(\"0.2s ease-in-out\")]),\n        transition(\"* => void\", [animate(\"0.2s ease-in-out\", style({ transform: transform }))])\n    ];\n}\nexport { FocusTrapTracker as ÇlrFocusTrapTracker, ClarityModule, ClrButtonModule, ClrButton, ClrButtonGroup, CLR_BUTTON_GROUP_DIRECTIVES, ClrButtonGroupModule, Button, ButtonGroup, BUTTON_GROUP_DIRECTIVES, ClrLoadingButton, CLR_LOADING_BUTTON_DIRECTIVES, ClrLoadingButtonModule, LoadingButton, LOADING_BUTTON_DIRECTIVES, ClrCodeModule, ClrCodeHighlight, CLR_CODE_HIGHLIGHT_DIRECTIVES, ClrSyntaxHighlightModule, CodeHighlight, CODE_HIGHLIGHT_DIRECTIVES, ClrDataModule, ClrDatagrid, ClrDatagridActionBar, ClrDatagridActionOverflow, ClrDatagridColumn, ClrDatagridColumnToggle, ClrDatagridHideableColumn, ClrDatagridFilter, ClrDatagridItems, ClrDatagridRow, ClrDatagridRowDetail, ClrDatagridCell, ClrDatagridFooter, ClrDatagridPagination, ClrDatagridPlaceholder, ClrDatagridSortOrder, DatagridStringFilter, DatagridPropertyStringFilter, DatagridPropertyComparator, CLR_DATAGRID_DIRECTIVES, ClrDatagridModule, Datagrid, DatagridActionBar, DatagridActionOverflow, DatagridColumn, DatagridColumnToggle, DatagridHideableColumnDirective, DatagridFilter, DatagridItems, DatagridRow, DatagridRowDetail, DatagridCell, DatagridFooter, DatagridPagination, DatagridPlaceholder, SortOrder, DATAGRID_DIRECTIVES, ClrTreeNode, CLR_TREE_VIEW_DIRECTIVES, ClrTreeViewModule, TreeNode, TREE_VIEW_DIRECTIVES, ClrStackView, ClrStackHeader, ClrStackBlock, ClrStackInput, ClrStackSelect, CLR_STACK_VIEW_DIRECTIVES, ClrStackViewModule, StackView, StackHeader, StackBlock, StackViewCustomTags, StackInput, StackSelect, STACK_VIEW_DIRECTIVES, ClrStackViewCustomTags, ClrEmphasisModule, ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager, CLR_ALERT_DIRECTIVES, ClrAlertModule, Alert, AlertItem, Alerts, AlertsPager, ALERT_DIRECTIVES, ClrLabel, ClrCommonFormsModule, ClrDateContainer, ClrDateInput, ClrDatepickerViewManager, ClrDaypicker, ClrMonthpicker, ClrYearpicker, ClrCalendar, ClrDay, CLR_DATEPICKER_DIRECTIVES, ClrDatepickerModule, ClrCheckboxNext, ClrCheckboxContainer, ClrCheckboxNextModule, ClrRadio, ClrRadioContainer, ClrRadioModule, ClrFormsNextModule, ClrCheckboxDeprecated, CLR_CHECKBOX_DIRECTIVES, ClrCheckboxModule, Checkbox, ClrCheckbox, CHECKBOX_DIRECTIVES, ClrFormsModule, ClrIconCustomTag, CLR_ICON_DIRECTIVES, ClrIconModule, IconCustomTag, ICON_DIRECTIVES, ClrLayoutModule, ClrMainContainer, CLR_LAYOUT_DIRECTIVES, ClrMainContainerModule, MainContainer, LAYOUT_DIRECTIVES, MainContainerWillyWonka, NavDetectionOompaLoompa, ClrHeader, ClrNavLevel, CLR_NAVIGATION_DIRECTIVES, ClrNavigationModule, Header, NavLevelDirective, NAVIGATION_DIRECTIVES, ClrTabs, ClrTab, ClrTabContent, ClrTabOverflowContent, ClrTabLink, CLR_TABS_DIRECTIVES, ClrTabsModule, Tab, Tabs, TabContent, TabOverflowContent, TabLinkDirective, TABS_DIRECTIVES, ClrVerticalNavGroupChildren, ClrVerticalNavGroup, ClrVerticalNav, ClrVerticalNavLink, ClrVerticalNavIcon, CLR_VERTICAL_NAV_DIRECTIVES, ClrVerticalNavModule, VerticalNav, VerticalNavGroup, VerticalNavGroupChildren, VerticalNavIcon, VerticalNavLink, VERTICAL_NAV_DIRECTIVES, ClrModal, CLR_MODAL_DIRECTIVES, ClrModalModule, Modal, MODAL_DIRECTIVES, ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem, CLR_MENU_POSITIONS, CLR_DROPDOWN_DIRECTIVES, ClrDropdownModule, Dropdown, DropdownMenu, DropdownTrigger, DropdownItem, menuPositions, DROPDOWN_DIRECTIVES, ClrPopoverModule, ClrSignpost, ClrSignpostContent, ClrSignpostTrigger, CLR_SIGNPOST_DIRECTIVES, ClrSignpostModule, Signpost, SignpostContent, SignpostTrigger, SIGNPOST_DIRECTIVES, ClrTooltip, ClrTooltipTrigger, ClrTooltipContent, CLR_TOOLTIP_DIRECTIVES, ClrTooltipModule, Tooltip, TooltipContent, TooltipTrigger, TOOLTIP_DIRECTIVES, collapse, fade, fadeSlide, slide, ClrLoading, LoadingListener, CLR_LOADING_DIRECTIVES, ClrLoadingModule, Loading, LOADING_DIRECTIVES, ClrWizard, ClrWizardPage, ClrWizardStepnav, ClrWizardStepnavItem, DEFAULT_BUTTON_TYPES, CUSTOM_BUTTON_TYPES, ClrWizardButton, ClrWizardHeaderAction, ClrWizardCustomTags, ClrWizardPageTitle, ClrWizardPageNavTitle, ClrWizardPageButtons, ClrWizardPageHeaderActions, CLR_WIZARD_DIRECTIVES, ClrWizardModule, Wizard, WizardPage, WizardStepnav, WizardStepnavItem, WizardButton, WizardHeaderAction, WizardCustomTags, WizardPageTitleDirective, WizardPageNavTitleDirective, WizardPageButtonsDirective, WizardPageHeaderActionsDirective, WIZARD_DIRECTIVES, ButtonInGroupService as ɵdh, DatagridRowExpandAnimation as ɵcu, ActionableOompaLoompa as ɵcr, DatagridWillyWonka as ɵcp, ExpandableOompaLoompa as ɵct, ClrDatagridColumnToggleButton as ɵcc, ClrDatagridColumnToggleTitle as ɵcb, DatagridDetailRegisterer as ɵce, ClrDatagridItemsTrackBy as ɵcd, ColumnToggleButtonsService as ɵbw, CustomFilter as ɵbz, DragDispatcher as ɵby, FiltersProvider as ɵbn, ExpandableRowsCount as ɵbt, HideableColumnService as ɵbu, Items as ɵbm, Page as ɵbo, RowActionService as ɵbs, Selection as ɵbl, Sort as ɵbq, StateDebouncer as ɵbp, StateProvider as ɵbv, DatagridBodyRenderer as ɵcm, DatagridCellRenderer as ɵco, DatagridColumnResizer as ɵcj, DomAdapter as ɵch, DatagridHeadRenderer as ɵcl, DatagridHeaderRenderer as ɵci, DatagridMainRenderer as ɵcg, domAdapterFactory as ɵcf, DatagridRenderOrganizer as ɵbr, DatagridRowRenderer as ɵcn, DatagridTableRenderer as ɵck, DatagridFilterRegistrar as ɵbx, StackControl as ɵcy, AbstractTreeSelection as ɵcz, clrTreeSelectionProviderFactory as ɵdb, TreeSelectionService as ɵda, AlertIconAndTypesService as ɵr, MultiAlertService as ɵs, FormControlService as ɵbb, WrappedFormControl as ɵbf, DateFormControlService as ɵba, DateIOService as ɵbd, DateNavigationService as ɵz, DatepickerEnabledService as ɵbe, DatepickerFocusService as ɵbh, LocaleHelperService as ɵbc, ViewManagerService as ɵbg, ResponsiveNavigationProvider as ɵdj, ResponsiveNavigationService as ɵdi, ActiveOompaLoompa as ɵdt, TabsWillyWonka as ɵds, AriaService as ɵdn, TabsService as ɵdr, TABS_ID as ɵdo, TABS_ID_PROVIDER as ɵdq, tokenFactory$1 as ɵdp, VerticalNavGroupRegistrationService as ɵdw, VerticalNavGroupService as ɵdx, VerticalNavIconService as ɵdv, VerticalNavService as ɵdu, GHOST_PAGE_ANIMATION as ɵdg, AbstractPopover as ɵi, POPOVER_DIRECTIVES as ɵb, POPOVER_HOST_ANCHOR as ɵh, PopoverDirectiveOld as ɵc, ClrCommonPopoverModule as ɵa, ROOT_DROPDOWN_PROVIDER as ɵg, RootDropdownService as ɵe, clrRootDropdownFactory as ɵf, OompaLoompa as ɵcs, WillyWonka as ɵcq, ClrConditionalModule as ɵj, IfActiveDirective as ɵl, IF_ACTIVE_ID as ɵn, IF_ACTIVE_ID_PROVIDER as ɵp, IfActiveService as ɵq, tokenFactory as ɵo, IfOpenDirective as ɵm, IfOpenService as ɵd, CONDITIONAL_DIRECTIVES as ɵk, ClrIfExpandModule as ɵcv, IfExpanded as ɵcx, EXPAND_DIRECTIVES as ɵcw, Expand as ɵca, FocusTrapTrackerProvider as ɵw, FocusTrapDirective as ɵy, ClrFocusTrapModule as ɵv, FOCUS_TRAP_DIRECTIVES as ɵx, EmptyAnchor as ɵu, ClrHostWrappingModule as ɵt, UNIQUE_ID as ɵdc, UNIQUE_ID_PROVIDER as ɵde, uniqueIdFactory as ɵdd, OUSTIDE_CLICK_DIRECTIVES as ɵbj, OutsideClick as ɵbk, ClrOutsideClickModule as ɵbi, ScrollingService as ɵdf, TEMPLATE_REF_DIRECTIVES as ɵdl, TemplateRefContainer as ɵdm, ClrTemplateRefModule as ɵdk, ButtonHubService as ɵea, HeaderActionService as ɵeb, PageCollectionService as ɵdz, WizardNavigationService as ɵdy };\n//# sourceMappingURL=clr-angular.js.map\n",null]}