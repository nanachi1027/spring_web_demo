{"remainingRequest":"/Users/nanachi/iceland/fullstack_project/front/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/nanachi/iceland/fullstack_project/front/node_modules/d3-transition/src/transition/end.js","dependencies":[{"path":"/Users/nanachi/iceland/fullstack_project/front/node_modules/d3-transition/src/transition/end.js","mtime":499162500000},{"path":"/Users/nanachi/iceland/fullstack_project/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nanachi/iceland/fullstack_project/front/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import {set} from \"./schedule.js\";\n\nexport default function() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and weâ€™re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n  });\n}\n",null]}